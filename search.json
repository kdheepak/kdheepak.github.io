[
  {
    "objectID": "blog/using-mermaidjs-with-pandoc/index.html",
    "href": "blog/using-mermaidjs-with-pandoc/index.html",
    "title": "Using MermaidJS with Pandoc",
    "section": "",
    "text": "Quarto supports native MermaidJS integration, so I’ve decided to use that instead. You can use the filter from here: https://github.com/kdheepak/blog/blob/61d1186313f3eb73ac51968a4bd5d051d822da37/pandoc/render.lua.\n\n\n\nGitHub recently announced support for MermaidJS. I thought it would be nice to integrate it as part of my blog using Pandoc lua filters. So the following:\n```mermaid\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice-&gt;&gt;John: Hello John, how are you?\n    Note right of John: Rational thoughts &lt;br/&gt;prevail!\n    John--&gt;&gt;Alice: Great!\n    John-&gt;&gt;Bob: How about you?\n    Bob--&gt;&gt;John: Jolly good!\n```\nwould be rendered as:\n\n\n\n\n\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice-&gt;&gt;John: Hello John, how are you?\n    Note right of John: Rational thoughts &lt;br/&gt;prevail!\n    John--&gt;&gt;Alice: Great!\n    John-&gt;&gt;Bob: How about you?\n    Bob--&gt;&gt;John: Jolly good!\n\n\n\n\n\n\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2022,\n  author = {Krishnamurthy, Dheepak},\n  title = {Using {MermaidJS} with {Pandoc}},\n  date = {2022-02-18},\n  url = {https://kdheepak.com/blog/using-mermaidjs-with-pandoc/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Using MermaidJS with Pandoc,” Feb. 18,\n2022. https://kdheepak.com/blog/using-mermaidjs-with-pandoc/."
  },
  {
    "objectID": "blog/mpld3-networkx-d3js-force-layout/index.html",
    "href": "blog/mpld3-networkx-d3js-force-layout/index.html",
    "title": "mpld3 networkx d3.js force layout",
    "section": "",
    "text": "mpld3 is a matplotlib to d3 library. It is lightweight and a pure Python / Javascript package, allowing a lot of the matplotlib interface to be accessible in the web. There are a number of examples on their website. Its integration with d3 allows someone familiar with Javascript to use Python and visualize using the power of d3. d3.js is a powerful low level visualization library and there are loads of examples online on the many features it brings to the table.\nmpld3 also has the ability to add plugins to add new functionality. I wanted to take a shot at adding a d3.js force layout plugin. The force layout is a powerful visualization tool and NetworkX has a nifty function that will convert the graph along with its attributes into a JSON graph format. I’d played around with this before and figured this would be a nice feature to have, so I’ve worked on it over the weekend and here it is - a NetworkX to d3.js force layout plugin for mpld3. I’ve shared an example below.\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport mpld3\nmpld3.enable_notebook()\n\nfrom mpld3 import plugins\n\nfig, ax = plt.subplots()\n\nimport networkx as nx\nG=nx.Graph()\nG.add_node(1, color='red', x=0.25, y=0.25, fixed=True, name='Node1')\nG.add_node(2, x=0.75, y=0.75, fixed=True)\nG.add_edge(1,2)\nG.add_edge(1,3)\nG.add_edge(2,3)\n\npos = None\n\nplugins.connect(fig, NetworkXD3ForceLayout(G, pos, ax))\n\n\n\nI’ve implemented a sticky version of the force layout, since this is what I wanted. This can be turned off by passing an argument to the plugin. The reason it is called a sticky version is because dragging a node to a new position will fix it at that location. You can double click the node to release it.\nThese blocks were used as a reference[1].\nI’ll run through an explanation of the code briefly.\nfig, ax = plt.subplots()\nThis returns a figure and axes object. This plugin requires a single axes object to be passed to it. The figure and axes object, and everything that is on the axes object is converted to mpld3 plot objects. In theory, you could use NetworkX’s draw function to visualize the graph and mpld3 will render it fine. The only downside to that is that the final output will not be a force layout.\nNext we create a graph with the following commands\nimport networkx as nx\nG=nx.Graph()\nG.add_node(1, color='red', x=0.25, y=0.25, fixed=True, name='Node1')\nG.add_node(2, x=0.75, y=0.75, fixed=True)\nG.add_edge(1,2)\nG.add_edge(1,3)\nG.add_edge(2,3)\nI’ve set the color attribute of the first node to red. This is an attribute on the node object and will be used by the force layout to color the node. We can also set the (x, y) coordinates to values for the first and second node. Passing the fixed=True keyword argument assigns a attribute fixed with the value True on the NetworkX graph. When converted to a force layout, this will fix the positions of those nodes.\nWe are almost done! This registers the plugin with mpld3.\nplugins.connect(fig, NetworkXD3ForceLayout(G, pos, ax))\nThe pos argument passed here is None. I plan to set it up such that you can pass a position dictionary to the plugin and have the plugin assign (x,y) coordinates when available. You can generate the pos dictionary using any of NetworkX’s layout functions.\nAdditional keywords arguments can be passed to the constructor of the NetworkXD3ForceLayout class. This allows a user to control certain force layout properties like gravity, linkDistance, linkStrength etc. You can also set a default node size or turn off the dragging feature. The full list of attributes that can be passed is found in the docstring. I plan to write a more detailed description in a following post.\nHere is another example of a NetworkX graph converted to a force layout. This is Zachary’s Karate Club. Nodes in Mr Hi’s club are coloured purple and the rest are coloured orange. Node size is also changed based on the number of neighbours.\nimport matplotlib.pyplot as plt\nimport networkx as nx\n\nfig, axs = plt.subplots(1, 1, figsize=(10, 10))\nax = axs\n\nG=nx.karate_club_graph()\npos = None\n\nfor node, data in G.nodes(data=True):\n    if data['club'] == 'Mr. Hi':\n        data['color'] = 'purple'\n    else:\n        data['color'] = 'orange'\n\nfor n, data in G.nodes(data=True):\n    data['size'] = len(G.neighbors(n))\n\nmpld3.plugins.connect(fig,\n    NetworkXD3ForceLayout(\n        G,\n        pos,\n        ax,\n        gravity=.5,\n        link_distance=20,\n        charge=-600,\n        friction=1\n    )\n)\n\n\n\n\nSee mpld3 documentation for more information.\nimport mpld3\n\nclass NetworkXD3ForceLayout(mpld3.plugins.PluginBase):\n    \"\"\"A NetworkX to D3 Force Layout Plugin\"\"\"\n\n    JAVASCRIPT = \"\"\"\n    mpld3.register_plugin(\"networkxd3forcelayout\", NetworkXD3ForceLayoutPlugin);\n    NetworkXD3ForceLayoutPlugin.prototype = Object.create(mpld3.Plugin.prototype);\n    NetworkXD3ForceLayoutPlugin.prototype.constructor = NetworkXD3ForceLayoutPlugin;\n    NetworkXD3ForceLayoutPlugin.prototype.requiredProps = [\"graph\",\n                                                                \"ax_id\",];\n    NetworkXD3ForceLayoutPlugin.prototype.defaultProps = { coordinates: \"data\",\n                                                               gravity: 1,\n                                                               charge: -30,\n                                                               link_strength: 1,\n                                                               friction: 0.9,\n                                                               link_distance: 20,\n                                                               maximum_stroke_width: 2,\n                                                               minimum_stroke_width: 1,\n                                                               nominal_stroke_width: 1,\n                                                               maximum_radius: 10,\n                                                               minimum_radius: 1,\n                                                               nominal_radius: 5,\n                                                            };\n    function NetworkXD3ForceLayoutPlugin(fig, props){\n        mpld3.Plugin.call(this, fig, props);\n    };\n    var color = d3.scaleOrdinal(d3.schemeCategory10);\n    NetworkXD3ForceLayoutPlugin.prototype.zoomScaleProp = function (nominal_prop, minimum_prop, maximum_prop) {\n        var zoom = this.ax.zoom;\n        scalerFunction = function() {\n            var prop = nominal_prop;\n            if (nominal_prop*zoom.scale()&gt;maximum_prop) prop = maximum_prop/zoom.scale();\n            if (nominal_prop*zoom.scale()&lt;minimum_prop) prop = minimum_prop/zoom.scale();\n            return prop\n        }\n        return scalerFunction;\n    }\n    NetworkXD3ForceLayoutPlugin.prototype.setupDefaults = function () {\n        this.zoomScaleStroke = this.zoomScaleProp(this.props.nominal_stroke_width,\n                                                  this.props.minimum_stroke_width,\n                                                  this.props.maximum_stroke_width)\n        this.zoomScaleRadius = this.zoomScaleProp(this.props.nominal_radius,\n                                                  this.props.minimum_radius,\n                                                  this.props.maximum_radius)\n    }\n    NetworkXD3ForceLayoutPlugin.prototype.zoomed = function() {\n        this.tick()\n    }\n    NetworkXD3ForceLayoutPlugin.prototype.draw = function(){\n        plugin = this\n        DEFAULT_NODE_SIZE = this.props.nominal_radius;\n        var height = this.fig.height\n        var width = this.fig.width\n        var graph = this.props.graph\n        var gravity = this.props.gravity.toFixed()\n        var charge = this.props.charge.toFixed()\n        var link_distance = this.props.link_distance.toFixed()\n        var link_strength = this.props.link_strength.toFixed()\n        var friction = this.props.friction.toFixed()\n        this.ax = mpld3.get_element(this.props.ax_id, this.fig)\n        var ax = this.ax;\n        this.ax.elements.push(this)\n        ax_obj = this.ax;\n        var width = d3.max(ax.x.range()) - d3.min(ax.x.range()),\n            height = d3.max(ax.y.range()) - d3.min(ax.y.range());\n        var color = d3.scaleOrdinal(d3.schemeCategory10);\n        this.xScale = d3.scaleLinear().domain([0, 1]).range([0, width]) // ax.x;\n        this.yScale = d3.scaleLinear().domain([0, 1]).range([height, 0]) // ax.y;\n        this.force = d3.forceSimulation();\n        this.svg = this.ax.axes.append(\"g\");\n        for(var i = 0; i &lt; graph.nodes.length; i++){\n            var node = graph.nodes[i];\n            if (node.hasOwnProperty('x')) {\n                node.x = this.ax.x(node.x);\n            }\n            if (node.hasOwnProperty('y')) {\n                node.y = this.ax.y(node.y);\n            }\n        }\n        this.force\n            .force(\"link\",\n                d3.forceLink()\n                    .id(function(d) { return d.index })\n                    .strength(link_strength)\n                    .distance(link_distance)\n            )\n            .force(\"collide\", d3.forceCollide(function(d){return d.r + 8 }).iterations(16))\n            .force(\"charge\", d3.forceManyBody().strength(charge))\n            .force(\"center\", d3.forceCenter(width / 2, height / 2))\n            .force(\"y\", d3.forceY(0))\n            .force(\"x\", d3.forceX(0));\n        this.force.nodes(graph.nodes);\n        this.force.force(\"link\").links(graph.links);\n        this.link = this.svg.selectAll(\".link\")\n            .data(graph.links)\n          .enter().append(\"line\")\n            .attr(\"class\", \"link\")\n            .attr(\"stroke\", \"black\")\n            .style(\"stroke-width\", function (d) { return Math.sqrt(d.value); });\n        this.node = this.svg.selectAll(\".node\")\n            .data(graph.nodes)\n          .enter().append(\"circle\")\n            .attr(\"class\", \"node\")\n            .attr(\"r\", function(d) {return d.size === undefined ? DEFAULT_NODE_SIZE : d.size ;})\n            .style(\"fill\", function (d) { return color(d); });\n        this.node.append(\"title\")\n            .text(function (d) { return d.name; });\n        this.force.on(\"tick\", this.tick.bind(this));\n        this.setupDefaults()\n    };\n    NetworkXD3ForceLayoutPlugin.prototype.tick = function() {\n        this.link.attr(\"x1\", function (d) { return this.ax.x(this.xScale.invert(d.source.x)); }.bind(this))\n                 .attr(\"y1\", function (d) { return this.ax.y(this.yScale.invert(d.source.y)); }.bind(this))\n                 .attr(\"x2\", function (d) { return this.ax.x(this.xScale.invert(d.target.x)); }.bind(this))\n                 .attr(\"y2\", function (d) { return this.ax.y(this.yScale.invert(d.target.y)); }.bind(this));\n        this.node.attr(\"transform\", function (d) {\n            return \"translate(\" + this.ax.x(this.xScale.invert(d.x)) + \",\" + this.ax.y(this.yScale.invert(d.y)) + \")\";\n            }.bind(this)\n        );\n    }\n    \"\"\"\n\n    def __init__(self, graph, ax,\n                 gravity=1,\n                 link_distance=20,\n                 charge=-30,\n                 node_size=5,\n                 link_strength=1,\n                 friction=0.9):\n\n        self.dict_ = {\"type\": \"networkxd3forcelayout\",\n                      \"graph\": graph,\n                      \"ax_id\": mpld3.utils.get_id(ax),\n                      \"gravity\": gravity,\n                      \"charge\": charge,\n                      \"friction\": friction,\n                      \"link_distance\": link_distance,\n                      \"link_strength\": link_strength,\n                      \"nominal_radius\": node_size}\n\n\n\n\nReferences\n\n[1] “SVG Semantic Zooming.” [Online]. Available: https://bl.ocks.org/mbostock/3680957.\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2016,\n  author = {Krishnamurthy, Dheepak},\n  title = {Mpld3 Networkx D3.js Force Layout},\n  date = {2016-10-02},\n  url = {https://kdheepak.com/blog/mpld3-networkx-d3js-force-layout/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “mpld3 networkx d3.js force layout,” Oct.\n02, 2016. https://kdheepak.com/blog/mpld3-networkx-d3js-force-layout/."
  },
  {
    "objectID": "blog/quickstart-guide-to-using-a-terminal/index.html",
    "href": "blog/quickstart-guide-to-using-a-terminal/index.html",
    "title": "Quickstart guide to using a terminal",
    "section": "",
    "text": "If you are typically used to GUI applications, you may feel lost when you are getting started with a terminal. In this post, I’ll share a number of basic things that I think you should know that will help you get familiar with a terminal based workflow.\nTypically, when you open a terminal on a linux or a mac, you may see something like this:\nOr\nThis is your terminal prompt. In the examples below, I will elide the prompt characters and show only the command you would type or the output of the command."
  },
  {
    "objectID": "blog/quickstart-guide-to-using-a-terminal/index.html#movement",
    "href": "blog/quickstart-guide-to-using-a-terminal/index.html#movement",
    "title": "Quickstart guide to using a terminal",
    "section": "Movement",
    "text": "Movement\nOne of the first things you should know is that you can’t use your mouse to move your cursor, and almost everything you do needs to be done using your keyboard.\nFor starters, you can use Ctrl + a to move to the beginning of the line and Ctrl + e to move to the end of the line.\n\n\n\nKeyboard shortcut\nAction\n\n\n\n\nCtrl + h\nDelete one character back\n\n\nCtrl + d\nDelete one character forward\n\n\nCtrl + k\nDelete to the end of line\n\n\nCtrl + u\nDelete to the beginning of line\n\n\nCtrl + w\nDelete previous word\n\n\nCtrl + f\nMove forward one character\n\n\nCtrl + b\nMove backward one character\n\n\n\nThese are readline keybindings and we’ll talk more about this in a future post."
  },
  {
    "objectID": "blog/quickstart-guide-to-using-a-terminal/index.html#useful-built-in-terminal-utilties",
    "href": "blog/quickstart-guide-to-using-a-terminal/index.html#useful-built-in-terminal-utilties",
    "title": "Quickstart guide to using a terminal",
    "section": "Useful built-in terminal utilties",
    "text": "Useful built-in terminal utilties\n\necho\n\nType the following in your terminal:\necho \"hello world\"\nhello world\n\nls\n\nNow type the following:\nls $HOME\nls lists the files and folders in a particular directory.\nNow try running ls -al $HOME. Notice the -al flags. The -a flag is for all files or folders and -l is for printing it out in a list form.\nls -al $HOME\n\nPermissions Size Date Modified Name\ndrwx------     - 28 Jan  2020  .bash_sessions/\ndrwxr-xr-x     - 22 Jun 18:40  .cache/\ndrwxr-xr-x     - 15 Aug  2021  .cargo/\ndrwxr-xr-x     - 13 Apr  2020  .cmake/\ndrwxrwxr-x     - 12 Mar  2020  .conda/\ndrwxr-xr-x     -  6 Jun 09:23  .config/\ndrwxr-xr-x     - 23 Oct  2020  .gem/\ndrwxr-xr-x     -  5 Feb  2020  .ipython/\ndrwxr-xr-x     - 28 Feb  2021  .iterm2/\ndrwxr-xr-x     - 26 Jul  2020  .vit/\ndrwxr-xr-x     - 12 Jul  2020  .vscode/\ndrwxr-xr-x     -  4 Feb  2020  .yarn/\ndrwxr-xr-x     - 16 Sep  2021  .zfunc/\ndrwx--xr-x     - 26 Jul  2020  .zinit/\ndrwxr-xr-x     - 28 Jun 08:44  Applications/\ndrwxr-xr-x@    -  5 Jul 13:28  Desktop/\ndrwxr-xr-x     - 14 Dec  2021  Documents/\ndrwxr-xr-x@    -  5 Jul 13:21  Downloads/\ndrwxr-xr-x     - 28 Jun 14:39  gitrepos/\ndrwx------@    - 17 Feb 11:35  Library/\ndrwxr-xr-x     - 17 Jun 10:18  local/\ndrwxr-xr-x     -  9 May 11:34  miniconda3/\ndrwx------     -  2 Dec  2021  Movies/\ndrwx------     - 19 Feb  2020  Music/\ndrwx------     - 30 Jan  2020  Pictures/\ndrwxr-xr-x     - 28 Jan  2020  Public/\n\n💡 Learning how to read permissions for files and folders when you use ls -al path/to/file-or-folder is crucial to debugging issues with permissions.\n\nA couple of things to note about flags.\n\nYou can typically use them in any order, i.e. ls -al is equivalent to ls -la\nYou can see the full list of options available by using man ls.\nOther command line tools might have a -h/--help flag that prints out all available flags.\n\nI personally always want to see the output of ls in a list form. If you add the following alias to your .bashrc or .bash_profile, you can use ls to invoke ls -al.\nalias ls=\"ls -al\"\n\npwd\n\nType pwd in your terminal. It should print the full path to the present working directory folder in your terminal. This can be useful to figure out in which directory your prompt is currently is in. Typically, any script or command you run will use the pwd as the current directory in the script.\n\ncd\n\nYou can use cd to change directory. Use cd or cd ~ to change to your home directory, and use cd - to go back to the last directory that you were in. Run the following line by line in your terminal:\npwd\ncd ~\npwd\ncd -\npwd\n\ncp\n\nYou can use cp /path/to/source /path/to/destination to copy a file from a source location to a destination location. If you want to copy a folder, you’ll need to use cp -r for recursively copy.\n\nmv\n\nYou can use mv /path/to/source /path/to/destination to move a file or folder from a source location to a destination location. If you want to rename a file or folder, you will have to mv oldname newname. You want to ensure that the destination does not exist or there is no folder by that name, otherwise you may end up overwriting or moving it to an unintended location.\nmv has the following flags:\n   -i      Cause mv to write a prompt to standard error before moving a file that would overwrite an existing file.  If\n   the response from the standard input begins with the character `y' or `Y', the move is attempted.  (The -i option\n   overrides any previous -f or -n options.)\n\n   -v      Cause mv to be verbose, showing files after they are moved.\nI like to alias mv to mv -iv since I always want to play it safe.\n\nrm\n\nYou can use rm to remove files. You can use rm -r to remove folders.\n\nmkdir\n\nYou can use mkdir /path/to/dir to make a directory if /path/to/ already exists. If you wish to create nested directories, you can use the -p flag, i.e. mkdir /path/to/nested/dir.\n\ncat\n\ncat concatenates and prints files to the terminal standard out. This is useful for seeing the contents of a text file without opening it.\nThere are two additional commands that are useful for seeing the first or last n lines in a file, i.e. head and tail.\n\nfind\n\nfind is extremely useful in finding if a file of a certain name or type exists.\nfind . -name *.md\nYou can use regular expressions to widen your search criteria.\n\ngrep\n\ngrep is handy in finding text within files. I like to use -ri for recursively searching for a case insensitive match in a particular folder.\ngrep -ri \"when I first\" src/posts\nsrc/posts/10-fast-track-to-being-productive-with-vim.md:summary: What I wish I had known when I first started using vim\nsrc/posts/10-fast-track-to-being-productive-with-vim.md:When I first started using vim three months ago, I found it quite challenging to get meaningful work done.\n\nvi or vim or nano or emacs\n\nFinally, learning how to use a text editor can go a long way in getting you comfortable with a terminal. Check out my post on how to get started with vim for more information."
  },
  {
    "objectID": "blog/quickstart-guide-to-using-a-terminal/index.html#environment-variables",
    "href": "blog/quickstart-guide-to-using-a-terminal/index.html#environment-variables",
    "title": "Quickstart guide to using a terminal",
    "section": "Environment Variables",
    "text": "Environment Variables\nIf you type the following and hit enter:\necho $HOME\nyou should see something like this being printed in your terminal:\n/Users/USERNAME\n$HOME is an environment variable that contains the value of your user’s home directory.\nType echo $PATH in your command line. On unix, the $PATH environment variable contains : separated paths to folders. Your shell looks through these in order when searching for binaries to execute."
  },
  {
    "objectID": "blog/quickstart-guide-to-using-a-terminal/index.html#bashrc-and-.bash_profile",
    "href": "blog/quickstart-guide-to-using-a-terminal/index.html#bashrc-and-.bash_profile",
    "title": "Quickstart guide to using a terminal",
    "section": ".bashrc and .bash_profile",
    "text": ".bashrc and .bash_profile\nThe bash shell, when invoked, can read and execute commands from a set of start up files.\nWhen invoked as an interactive login shell, bash looks for /etc/profile, then ~/.bash_profile, then ~/.bash_login and then ~/.profile.\nWhen invoked as an interactive non-login shell, bash reads and executes from ~/.bashrc.\n~/.profile or ~/.bash_profile should contain modifications to $PATH whereas ~/.bashrc can contain modifications to your prompt or aliases or other customizations. ~/.profile is typically run just once, but ~/.bashrc is run everytime you run a new shell."
  },
  {
    "objectID": "blog/quickstart-guide-to-using-a-terminal/index.html#ctrl-c",
    "href": "blog/quickstart-guide-to-using-a-terminal/index.html#ctrl-c",
    "title": "Quickstart guide to using a terminal",
    "section": "Ctrl + c",
    "text": "Ctrl + c\nFor long running processes, you can use Ctrl + c to kill the process. You can use Ctrl + z to background a currently running process and type fg to foreground the last backgrounded process."
  },
  {
    "objectID": "blog/quickstart-guide-to-using-a-terminal/index.html#piping",
    "href": "blog/quickstart-guide-to-using-a-terminal/index.html#piping",
    "title": "Quickstart guide to using a terminal",
    "section": "Piping",
    "text": "Piping\nOne of the advantages of working from the terminal is that once you have some basics down, you can chain together commands really easily. You can do this using the pipe operator, i.e. |.\nLet’s say I wanted to show the last 3 lines or the README.md in my current folder:\nbat README.md | tail -n3\n  44   │ ```bash\n  45   │ npm run deploy\n  46   │ ```\n───────┴────────────────────────────────────────────────────────────────────────\nLet’s say I wanted to find all the files with vim in the name:\nrg --files | rg vim\n58:src/posts/38-rust-lua-nvim.md\n91:src/posts/11-vim-tmux-zsh.md\n99:src/posts/34-three-built-in-neovim-features.md\n110:src/posts/videos/vimtutor.webm\n112:src/posts/32-neovim-languageserver-julia.md\n113:src/posts/10-fast-track-to-being-productive-with-vim.md\n127:src/posts/25-tmux-neovim.md\n135:src/posts/20-custom-path-vim.md\n157:src/posts/images/nvim-highlight-yank.mov.gif\n176:src/posts/images/nvim-live-substitution.mov.gif\n182:src/posts/images/nvim-built-in-lsp.mov.gif\n189:src/posts/images/vim-tmux-zsh.png\nThe | operator takes the stdout of one command and feeds it as input to the next."
  },
  {
    "objectID": "blog/emacs-tips-close-compilation-buffer-if-successful/index.html",
    "href": "blog/emacs-tips-close-compilation-buffer-if-successful/index.html",
    "title": "Emacs tips — Close compilation buffer",
    "section": "",
    "text": "When I work with markdown, \\(\\LaTeX\\) or code that requires compiling, I like to check often if everything looks okay. Emacs has a good description of everything you can do with the CompileCommand.\nHowever, it does not have a description for auto-closing the buffer if the compilation was successful. StackOverflow to the rescue!\n#!lisp\n; from enberg on #emacs\n(setq compilation-finish-function\n(lambda (buf str)\n    (if (null (string-match \".*exited abnormally.*\" str))\n        ;;no errors, make the compilation window go away in a few seconds\n        (progn\n            (run-at-time\n            \"1 sec\" nil 'delete-windows-on\n            (get-buffer-create \"*compilation*\"))\n        (message \"No Compilation Errors!\")))))\nInsert the above code into your .emacs file. You can change the time you wish the buffer to be available by changing the 1 sec in the above code\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2015,\n  author = {Krishnamurthy, Dheepak},\n  title = {Emacs Tips — {Close} Compilation Buffer},\n  date = {2015-07-19},\n  url = {https://kdheepak.com/blog/emacs-tips-close-compilation-buffer-if-successful/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Emacs tips — Close compilation buffer,”\nJul. 19, 2015. https://kdheepak.com/blog/emacs-tips-close-compilation-buffer-if-successful/."
  },
  {
    "objectID": "blog/pandas-vs-polars-vs-ibis/index.html",
    "href": "blog/pandas-vs-polars-vs-ibis/index.html",
    "title": "Pandas vs Polars vs ibis",
    "section": "",
    "text": "This is a short comparison of idiomatic pandas, polars and ibis, all using method chaining.\n\nimport sys\n\nsys.version_info\n\nsys.version_info(major=3, minor=12, micro=5, releaselevel='final', serial=0)\n\n\n\nimport ibis\nfrom ibis import _\nibis.options.interactive = True\n\n\nibis.__version__\n\n'9.4.0'\n\n\n\ndf = ibis.examples.starwars.fetch()\ndf\n\n┏━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━┓\n┃ name               ┃ height ┃ mass    ┃ hair_color    ┃ skin_color  ┃ eye_color ┃ birth_year ┃ sex    ┃ gender    ┃ homeworld ┃ species ┃ films  ┃ vehicles ┃ starships ┃\n┡━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━━┩\n│ string             │ int64  │ float64 │ string        │ string      │ string    │ float64    │ string │ string    │ string    │ string  │ string │ string   │ string    │\n├────────────────────┼────────┼─────────┼───────────────┼─────────────┼───────────┼────────────┼────────┼───────────┼───────────┼─────────┼────────┼──────────┼───────────┤\n│ Luke Skywalker     │    172 │    77.0 │ blond         │ fair        │ blue      │       19.0 │ male   │ masculine │ Tatooine  │ Human   │ NULL   │ NULL     │ NULL      │\n│ C-3PO              │    167 │    75.0 │ NULL          │ gold        │ yellow    │      112.0 │ none   │ masculine │ Tatooine  │ Droid   │ NULL   │ NULL     │ NULL      │\n│ R2-D2              │     96 │    32.0 │ NULL          │ white, blue │ red       │       33.0 │ none   │ masculine │ Naboo     │ Droid   │ NULL   │ NULL     │ NULL      │\n│ Darth Vader        │    202 │   136.0 │ none          │ white       │ yellow    │       41.9 │ male   │ masculine │ Tatooine  │ Human   │ NULL   │ NULL     │ NULL      │\n│ Leia Organa        │    150 │    49.0 │ brown         │ light       │ brown     │       19.0 │ female │ feminine  │ Alderaan  │ Human   │ NULL   │ NULL     │ NULL      │\n│ Owen Lars          │    178 │   120.0 │ brown, grey   │ light       │ blue      │       52.0 │ male   │ masculine │ Tatooine  │ Human   │ NULL   │ NULL     │ NULL      │\n│ Beru Whitesun Lars │    165 │    75.0 │ brown         │ light       │ blue      │       47.0 │ female │ feminine  │ Tatooine  │ Human   │ NULL   │ NULL     │ NULL      │\n│ R5-D4              │     97 │    32.0 │ NULL          │ white, red  │ red       │       NULL │ none   │ masculine │ Tatooine  │ Droid   │ NULL   │ NULL     │ NULL      │\n│ Biggs Darklighter  │    183 │    84.0 │ black         │ light       │ brown     │       24.0 │ male   │ masculine │ Tatooine  │ Human   │ NULL   │ NULL     │ NULL      │\n│ Obi-Wan Kenobi     │    182 │    77.0 │ auburn, white │ fair        │ blue-gray │       57.0 │ male   │ masculine │ Stewjon   │ Human   │ NULL   │ NULL     │ NULL      │\n│ …                  │      … │       … │ …             │ …           │ …         │          … │ …      │ …         │ …         │ …       │ …      │ …        │ …         │\n└────────────────────┴────────┴─────────┴───────────────┴─────────────┴───────────┴────────────┴────────┴───────────┴───────────┴─────────┴────────┴──────────┴───────────┘\n\n\n\n\nPandas\n\nimport re\n\nM = 100\n\n_df = (\n    df\n    .to_pandas()\n    .rename(lambda col: re.sub(r'(?&lt;!^)(?=[A-Z])', '_', col).lower(), axis=1)\n    .query(\"height &gt; 100\")\n    .query(\"mass &gt; @M\")\n    .query('hair_color.str.contains(\"brown\") == True') # some values can be `None` so explicit True required\n    .query(\"sex.notna()\")\n    .assign(hair_color = lambda c: c.hair_color.str.split(','))\n    .explode(\"hair_color\")\n    .query(\"birth_year.notna()\")\n)\n\nibis.pandas.connect({'_df': _df}).table('_df')\n\n┏━━━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━┳━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━┓\n┃ name      ┃ height  ┃ mass    ┃ hair_color ┃ skin_color ┃ eye_color ┃ birth_year ┃ sex    ┃ gender    ┃ homeworld ┃ species ┃ films ┃ vehicles ┃ starships ┃\n┡━━━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━╇━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━━┩\n│ string    │ float64 │ float64 │ string     │ string     │ string    │ float64    │ string │ string    │ string    │ string  │ null  │ null     │ null      │\n├───────────┼─────────┼─────────┼────────────┼────────────┼───────────┼────────────┼────────┼───────────┼───────────┼─────────┼───────┼──────────┼───────────┤\n│ Owen Lars │   178.0 │   120.0 │ brown      │ light      │ blue      │       52.0 │ male   │ masculine │ Tatooine  │ Human   │ NULL  │ NULL     │ NULL      │\n│ Owen Lars │   178.0 │   120.0 │  grey      │ light      │ blue      │       52.0 │ male   │ masculine │ Tatooine  │ Human   │ NULL  │ NULL     │ NULL      │\n│ Chewbacca │   228.0 │   112.0 │ brown      │ unknown    │ blue      │      200.0 │ male   │ masculine │ Kashyyyk  │ Wookiee │ NULL  │ NULL     │ NULL      │\n└───────────┴─────────┴─────────┴────────────┴────────────┴───────────┴────────────┴────────┴───────────┴───────────┴─────────┴───────┴──────────┴───────────┘\n\n\n\n\n\nPolars\n\nimport re\nimport polars as pl\n\nM = 100\n\n_df = (\n    df\n    .to_polars()\n    .rename(lambda col: re.sub(r'(?&lt;!^)(?=[A-Z])', '_', col).lower())\n    .filter(pl.col(\"height\") &gt; 100)\n    .filter(pl.col(\"mass\") &gt; M)\n    .filter(pl.col(\"hair_color\").str.contains(\"brown\"))\n    .filter(pl.col(\"sex\").is_not_null())\n    .with_columns(pl.col(\"hair_color\").str.split(\",\").alias(\"hair_color\"))\n    .explode(pl.col(\"hair_color\"))\n    .filter(pl.col(\"birth_year\").is_not_null())\n)\n\nibis.polars.connect({'_df': _df}).table('_df')\n\n┏━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━┓\n┃ name      ┃ height ┃ mass    ┃ hair_color ┃ skin_color ┃ eye_color ┃ birth_year ┃ sex    ┃ gender    ┃ homeworld ┃ species ┃ films  ┃ vehicles ┃ starships ┃\n┡━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━━┩\n│ string    │ int64  │ float64 │ string     │ string     │ string    │ float64    │ string │ string    │ string    │ string  │ string │ string   │ string    │\n├───────────┼────────┼─────────┼────────────┼────────────┼───────────┼────────────┼────────┼───────────┼───────────┼─────────┼────────┼──────────┼───────────┤\n│ Owen Lars │    178 │   120.0 │ brown      │ light      │ blue      │       52.0 │ male   │ masculine │ Tatooine  │ Human   │ NULL   │ NULL     │ NULL      │\n│ Owen Lars │    178 │   120.0 │  grey      │ light      │ blue      │       52.0 │ male   │ masculine │ Tatooine  │ Human   │ NULL   │ NULL     │ NULL      │\n│ Chewbacca │    228 │   112.0 │ brown      │ unknown    │ blue      │      200.0 │ male   │ masculine │ Kashyyyk  │ Wookiee │ NULL   │ NULL     │ NULL      │\n└───────────┴────────┴─────────┴────────────┴────────────┴───────────┴────────────┴────────┴───────────┴───────────┴─────────┴────────┴──────────┴───────────┘\n\n\n\n\n\nibis\n\nM = 100\n_df = (\n    df\n    .rename(\"snake_case\")\n    .filter(_.height &gt; 100)\n    .filter(_.mass &gt; M)\n    .filter(_.hair_color.contains(\"brown\"))\n    .filter(_.sex.notnull())\n    .mutate(hair_color = _.hair_color.split(\",\"))\n    .unnest(_.hair_color)\n    .drop_null(_.birth_year)\n)\n\n_df\n\n┏━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━┓\n┃ name      ┃ height ┃ mass    ┃ hair_color ┃ skin_color ┃ eye_color ┃ birth_year ┃ sex    ┃ gender    ┃ homeworld ┃ species ┃ films  ┃ vehicles ┃ starships ┃\n┡━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━━┩\n│ string    │ int64  │ float64 │ string     │ string     │ string    │ float64    │ string │ string    │ string    │ string  │ string │ string   │ string    │\n├───────────┼────────┼─────────┼────────────┼────────────┼───────────┼────────────┼────────┼───────────┼───────────┼─────────┼────────┼──────────┼───────────┤\n│ Owen Lars │    178 │   120.0 │ brown      │ light      │ blue      │       52.0 │ male   │ masculine │ Tatooine  │ Human   │ NULL   │ NULL     │ NULL      │\n│ Owen Lars │    178 │   120.0 │  grey      │ light      │ blue      │       52.0 │ male   │ masculine │ Tatooine  │ Human   │ NULL   │ NULL     │ NULL      │\n│ Chewbacca │    228 │   112.0 │ brown      │ unknown    │ blue      │      200.0 │ male   │ masculine │ Kashyyyk  │ Wookiee │ NULL   │ NULL     │ NULL      │\n└───────────┴────────┴─────────┴────────────┴────────────┴───────────┴────────────┴────────┴───────────┴───────────┴─────────┴────────┴──────────┴───────────┘\n\n\n\n\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2024,\n  author = {Krishnamurthy, Dheepak},\n  title = {Pandas Vs {Polars} Vs Ibis},\n  date = {2024-08-25},\n  url = {https://kdheepak.com/blog/pandas-vs-polars-vs-ibis/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Pandas vs Polars vs ibis,” Aug. 25, 2024.\nhttps://kdheepak.com/blog/pandas-vs-polars-vs-ibis/."
  },
  {
    "objectID": "blog/the-basic-building-blocks-of-ratatui-part-3/index.html",
    "href": "blog/the-basic-building-blocks-of-ratatui-part-3/index.html",
    "title": "The Basic Building blocks of Ratatui - Part 3",
    "section": "",
    "text": "Ratatui is a crate for building terminal user interfaces in Rust.\nIn this post, we’ll explore the text primitives of ratatui.\n\n\nCode\n:dep ratatui = \"0.26.2\"\n:dep ratatui-macros = \"0.4.0\"\n    \nfn span_to_html(s: ratatui::text::Span) -&gt; String{\n    let mut html = String::new();\n    html.push_str(\"&lt;span style=\\\"\");\n\n    // Set foreground color\n    if let Some(color) = &s.style.fg {\n        html.push_str(&format!(\"color: {};\", color));\n    }\n\n    // Set background color\n    if let Some(color) = &s.style.bg {\n        html.push_str(&format!(\"background-color: {};\", color));\n    }\n\n    // Add modifiers\n    match s.style.add_modifier {\n        ratatui::style::Modifier::BOLD =&gt; html.push_str(\"font-weight: bold;\"),\n        ratatui::style::Modifier::ITALIC =&gt; html.push_str(\"font-style: italic;\"),\n        ratatui::style::Modifier::UNDERLINED =&gt; html.push_str(\"text-decoration: underline;\"),\n        _ =&gt; {}\n    }\n    html.push_str(\"\\\"&gt;\");\n    html.push_str(&s.content);\n    html.push_str(\"&lt;/span&gt;\");\n    html\n}\n\nfn buffer_to_html(buf: &ratatui::buffer::Buffer) -&gt; String {\n    fn escape_special_html_characters(text: &str) -&gt; String {\n        text.replace(\"&\", \"&amp;\")\n            .replace(\"&lt;\", \"&lt;\")\n            .replace(\"&gt;\", \"&gt;\")\n            .replace(\"\\\"\", \"&quot;\")\n            .replace(\"'\", \"&#39;\")\n    }\n\n    let mut html = String::from(\"&lt;pre&gt;&lt;code&gt;\");\n\n    let w = buf.area.width;\n    let h = buf.area.height;\n\n    for y in 0..h {\n        for x in 0..w {\n            let s = buf.get(x, y).symbol();\n            \n            let escaped = escape_special_html_characters(s); \n\n            let style = buf.get(x, y).style();\n\n            let span = ratatui::text::Span::styled(s, style);\n            \n            html.push_str(&span_to_html(span));\n        }\n        html.push('\\n');\n    }\n\n    html.push_str(\"&lt;/code&gt;&lt;/pre&gt;\");\n\n    html \n}\n    \nfn show_html&lt;D&gt;(content: D) where D: std::fmt::Display {\n    println!(r#\"EVCXR_BEGIN_CONTENT text/html\n&lt;div style=\"display: flex; justify-content:start; gap: 1em; margin: 1em\"&gt;\n{}\n&lt;/div&gt;\nEVCXR_END_CONTENT\"#, content);\n}\n\n\n\n\nText primitives\nIn Ratatui, there are 3 fundamental text primitives that you should be aware of.\n\nSpan\nThe first is a Span.\n\nuse ratatui::text::Span;\n\nlet span = Span::raw(\"hello world\");\nspan\n\nSpan { content: \"hello world\", style: Style { fg: None, bg: None, underline_color: None, add_modifier: NONE, sub_modifier: NONE } }\n\n\nA Span contains two fields.\n\nspan.content\n\n\"hello world\"\n\n\n\nspan.style\n\nStyle { fg: None, bg: None, underline_color: None, add_modifier: NONE, sub_modifier: NONE }\n\n\nA Style object contains foreground color, background color, and modifiers for whether the style being applied is bold, italics, etc\nThere are a number of constructors for Span that you may use, but ratatui exposes a Stylize trait that makes it easy to style content which I find very useful.\n\nuse ratatui::style::Stylize; // required trait to use style methods\n\n\"hello world\".bold()\n\nSpan { content: \"hello world\", style: Style { fg: None, bg: None, underline_color: None, add_modifier: BOLD, sub_modifier: NONE } }\n\n\nYou can even chain these trait methods to add more styles:\n\n\"hello world\".bold().yellow().on_black()\n\nSpan { content: \"hello world\", style: Style { fg: Some(Yellow), bg: Some(Black), underline_color: None, add_modifier: BOLD, sub_modifier: NONE } }\n\n\n\nshow_html(span_to_html(\"hello world\".bold()))\n\n\nhello world\n\n\n\n\nshow_html(span_to_html(\"hello world\".yellow().bold().on_black()))\n\n\nhello world\n\n\n\nWith ratatui-macros, you can even use a format! style macro to create a Span\n\nuse ratatui_macros::span;\n\nlet world = \"world\";\nspan!(\"hello {}\", world)\n\nSpan { content: \"hello world\", style: Style { fg: None, bg: None, underline_color: None, add_modifier: NONE, sub_modifier: NONE } }\n\n\n\n\nLine\nThe second primitive to be aware of is a Line.\nA line consists of one or more spans.\n\nuse ratatui::text::Line;\n\nlet line = Line::raw(\"hello world\");\nline\n\nLine { spans: [Span { content: \"hello world\", style: Style { fg: None, bg: None, underline_color: None, add_modifier: NONE, sub_modifier: NONE } }], style: Style { fg: None, bg: None, underline_color: None, add_modifier: NONE, sub_modifier: NONE }, alignment: None }\n\n\n\nline.spans\n\n[Span { content: \"hello world\", style: Style { fg: None, bg: None, underline_color: None, add_modifier: NONE, sub_modifier: NONE } }]\n\n\n\nline.spans.len()\n\n1\n\n\nA unique feature of lines is that new lines are removed but the content is split into multiple spans.\n\nlet line = Line::raw(\"hello world\\ngoodbye world\");\n\n\nline.spans[0]\n\nSpan { content: \"hello world\", style: Style { fg: None, bg: None, underline_color: None, add_modifier: NONE, sub_modifier: NONE } }\n\n\n\nline.spans[1]\n\nSpan { content: \"goodbye world\", style: Style { fg: None, bg: None, underline_color: None, add_modifier: NONE, sub_modifier: NONE } }\n\n\nA line can also be styled with methods from the Stylize trait:\n\nLine::raw(\"hello world\").bold()\n\nLine { spans: [Span { content: \"hello world\", style: Style { fg: None, bg: None, underline_color: None, add_modifier: NONE, sub_modifier: NONE } }], style: Style { fg: None, bg: None, underline_color: None, add_modifier: BOLD, sub_modifier: NONE }, alignment: None }\n\n\nIn this case, the individual span’s styles are left untouched but the Line’s style is updated.\nAnother unique feature about Line is that they can be aligned.\n\nlet centered_line = line.centered();\ncentered_line\n\nLine { spans: [Span { content: \"hello world\", style: Style { fg: None, bg: None, underline_color: None, add_modifier: NONE, sub_modifier: NONE } }, Span { content: \"goodbye world\", style: Style { fg: None, bg: None, underline_color: None, add_modifier: NONE, sub_modifier: NONE } }], style: Style { fg: None, bg: None, underline_color: None, add_modifier: NONE, sub_modifier: NONE }, alignment: Some(Center) }\n\n\nWith ratatui-macros, you can create a Line using the line! macro using a vec!-like syntax.\n\nuse ratatui_macros::line;\n\nline![\"hello\", \" \", \"world\"].yellow().bold().centered();\n\nEvery element in the line! macro is converted to a Span.\n\n\nText\nFinally there is Text, which is a collection of Lines.\n\nuse ratatui::text::Text;\n\nText::from(vec![Line::raw(\"hello world\"), Line::raw(\"goodbye world\")]);\n\nWith ratatui-macros, you can create a Text using text! macro using a vec!-like syntax.\n\nuse ratatui_macros::text;\n\ntext![\"hello world\", \"goodbye world\"];\n\nHere, every element in the text! macro is converted to a Line.\nLike Line, Text can also be aligned. In this case, the alignment occurs on every Line inside the Text.\n\nlet t = text![\"hello world\", \"goodbye world\"].right_aligned();\nt.alignment\n\nSome(Right)\n\n\n\nuse ratatui::widgets::Widget;\n\nlet (x, y, width, height) = (0, 0, 50, 5); \nlet area = ratatui::layout::Rect::new(x, y, width, height);\nlet mut buf = ratatui::buffer::Buffer::empty(area);\n\ntext![\n    \"left aligned bold text\".bold(), \n    \"center aligned italic text\".italic().into_centered_line(),\n    \"right aligned with yellow on black\".yellow().on_black().into_right_aligned_line(),\n].render(area, &mut buf);\n\nshow_html(buffer_to_html(&buf))\n\n\nleft aligned bold text                            \n            center aligned italic text            \n                right aligned with yellow on black\n                                                  \n                                                  \n\n\n\n\n\n\n\nConclusion\nIn the next post, we’ll examine the a few commonly used widgets.\n\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2024,\n  author = {Krishnamurthy, Dheepak},\n  title = {The {Basic} {Building} Blocks of {Ratatui} - {Part} 3},\n  date = {2024-05-17},\n  url = {https://kdheepak.com/blog/the-basic-building-blocks-of-ratatui-part-3/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “The Basic Building blocks of Ratatui - Part\n3,” May 17, 2024. https://kdheepak.com/blog/the-basic-building-blocks-of-ratatui-part-3/."
  },
  {
    "objectID": "blog/ibis-better-pandas/index.html",
    "href": "blog/ibis-better-pandas/index.html",
    "title": "ibis - a better pandas",
    "section": "",
    "text": "Code\nfrom IPython.core.interactiveshell import InteractiveShell\n\n# `ast_node_interactivity` is a setting that determines how the return value of the last line in a cell is displayed\n# with `last_expr_or_assign`, the return value of the last expression is displayed unless it is assigned to a variable\nInteractiveShell.ast_node_interactivity = \"last_expr_or_assign\"\n\n\nThere’s an excellent blog post on why Pandas feels clunky for those coming from R:\nhttps://www.sumsar.net/blog/pandas-feels-clunky-when-coming-from-r/\nHowever in Python, I’ve found ibis as an alternative to pandas to be a much more natural fit for those coming from R.\nibis uses duckdb as a backend by default, and its API is a mix between duckdb and dplyr.\n\nimport ibis\n\n_ in ibis is a special variable that refers to the last expression evaluated this is useful for chaining operations or for using the result of the last expression in subsequent operations\n\nfrom ibis import _\n\nBy default, ibis defers execution until you call execute(). Using ibis.options.interactive = True will make it so that expressions are immediately executed when displayed. This is useful for interactive exploration.\n\n\nibis.options.interactive = True\n\nLet’s also import pandas to compare the two libraries.\n\nimport pandas as pd\n\nHere’s the equivalent code in pandas and ibis for the example provided in the blog post:\n\npandas_df = pd.read_csv(\"purchases.csv\")\npandas_df.head()\n\n\n\n\n\n\n\n\ncountry\namount\ndiscount\n\n\n\n\n0\nUSA\n2000\n10\n\n\n1\nUSA\n3500\n15\n\n\n2\nUSA\n3000\n20\n\n\n3\nCanada\n120\n12\n\n\n4\nCanada\n180\n18\n\n\n\n\n\n\n\n\ndf = ibis.read_csv(\"purchases.csv\")\ndf.head()\n\n┏━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━┓\n┃ country ┃ amount ┃ discount ┃\n┡━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━━┩\n│ string  │ int64  │ int64    │\n├─────────┼────────┼──────────┤\n│ USA     │   2000 │       10 │\n│ USA     │   3500 │       15 │\n│ USA     │   3000 │       20 │\n│ Canada  │    120 │       12 │\n│ Canada  │    180 │       18 │\n└─────────┴────────┴──────────┘\n\n\n\n\nHow much do we sell..? Let’s take the total sum!\n\npandas\n\npandas_df.amount.sum()\n\nnp.int64(17210)\n\n\n\n\nibis\n\ndf.amount.sum().execute()\n\n17210\n\n\n\n\n\nAh, they wanted it by country…\n\npandas\n\n(\n    pandas_df\n    .groupby(\"country\")\n    .agg(total=(\"amount\", \"sum\"))\n    .reset_index()\n)\n\n\n\n\n\n\n\n\ncountry\ntotal\n\n\n\n\n0\nAustralia\n600\n\n\n1\nBrazil\n460\n\n\n2\nCanada\n3400\n\n\n3\nFrance\n500\n\n\n4\nGermany\n570\n\n\n5\nIndia\n720\n\n\n6\nItaly\n630\n\n\n7\nJapan\n690\n\n\n8\nSpain\n660\n\n\n9\nUK\n480\n\n\n10\nUSA\n8500\n\n\n\n\n\n\n\n\n\nibis\n\n(\n    df\n    .group_by(\"country\")\n    .aggregate(total=_.amount.sum())\n    .order_by(\"country\") # optional, to align with the pandas output\n)\n\n┏━━━━━━━━━━━┳━━━━━━━┓\n┃ country   ┃ total ┃\n┡━━━━━━━━━━━╇━━━━━━━┩\n│ string    │ int64 │\n├───────────┼───────┤\n│ Australia │   600 │\n│ Brazil    │   460 │\n│ Canada    │  3400 │\n│ France    │   500 │\n│ Germany   │   570 │\n│ India     │   720 │\n│ Italy     │   630 │\n│ Japan     │   690 │\n│ Spain     │   660 │\n│ UK        │   480 │\n│ …         │     … │\n└───────────┴───────┘\n\n\n\nCalling .execute() will run the query and return the result as a pandas DataFrame.\n\ntype(\n  (\n    df\n    .group_by(\"country\")\n    .aggregate(total=_.amount.sum())\n    .order_by(\"country\") # optional, to align with the pandas output\n  ).execute()\n)\n\npandas.core.frame.DataFrame\n\n\n\n\n\nAnd I guess I should deduct the discount.\n\npandas\n\n(\n    pandas_df\n    .groupby(\"country\")[[\"amount\", \"discount\"]]\n    .apply(lambda df: (df[\"amount\"] - df[\"discount\"]).sum())\n    .reset_index()\n    .rename(columns={0: \"total\"})\n)\n\n\n\n\n\n\n\n\ncountry\ntotal\n\n\n\n\n0\nAustralia\n540\n\n\n1\nBrazil\n414\n\n\n2\nCanada\n3349\n\n\n3\nFrance\n450\n\n\n4\nGermany\n513\n\n\n5\nIndia\n648\n\n\n6\nItaly\n567\n\n\n7\nJapan\n621\n\n\n8\nSpain\n594\n\n\n9\nUK\n432\n\n\n10\nUSA\n8455\n\n\n\n\n\n\n\n\n\nibis\n\n(\n    df\n    .group_by(\"country\")\n    .aggregate(total=(_.amount - _.discount).sum())\n    .order_by(\"country\")\n)\n\n┏━━━━━━━━━━━┳━━━━━━━┓\n┃ country   ┃ total ┃\n┡━━━━━━━━━━━╇━━━━━━━┩\n│ string    │ int64 │\n├───────────┼───────┤\n│ Australia │   540 │\n│ Brazil    │   414 │\n│ Canada    │  3349 │\n│ France    │   450 │\n│ Germany   │   513 │\n│ India     │   648 │\n│ Italy     │   567 │\n│ Japan     │   621 │\n│ Spain     │   594 │\n│ UK        │   432 │\n│ …         │     … │\n└───────────┴───────┘\n\n\n\n\n\n\nOh, and Maria asked me to remove any outliers.\n\npandas\n\n(\n    pandas_df\n    .query(\"amount &lt;= amount.median() * 10\")\n    .groupby(\"country\")[[\"amount\", \"discount\"]]\n    .apply(lambda df: (df[\"amount\"] - df[\"discount\"]).sum())\n    .reset_index()\n    .rename(columns={0: \"total\"})\n)\n\n\n\n\n\n\n\n\ncountry\ntotal\n\n\n\n\n0\nAustralia\n540\n\n\n1\nBrazil\n414\n\n\n2\nCanada\n270\n\n\n3\nFrance\n450\n\n\n4\nGermany\n513\n\n\n5\nIndia\n648\n\n\n6\nItaly\n567\n\n\n7\nJapan\n621\n\n\n8\nSpain\n594\n\n\n9\nUK\n432\n\n\n10\nUSA\n1990\n\n\n\n\n\n\n\n\n\nibis\n\n(\n    df\n    .mutate(median=_.amount.median())\n    .filter(_.amount &lt;= _.median * 10)\n    .group_by(\"country\")\n    .aggregate(total=(_.amount - _.discount).sum())\n    .order_by(\"country\")\n)\n\n┏━━━━━━━━━━━┳━━━━━━━┓\n┃ country   ┃ total ┃\n┡━━━━━━━━━━━╇━━━━━━━┩\n│ string    │ int64 │\n├───────────┼───────┤\n│ Australia │   540 │\n│ Brazil    │   414 │\n│ Canada    │   270 │\n│ France    │   450 │\n│ Germany   │   513 │\n│ India     │   648 │\n│ Italy     │   567 │\n│ Japan     │   621 │\n│ Spain     │   594 │\n│ UK        │   432 │\n│ …         │     … │\n└───────────┴───────┘\n\n\n\n\n\n\nI probably should use the median within each country\n\npandas\n\n(\n    pandas_df\n    .assign(country_median=lambda df:\n        df.groupby(\"country\")[\"amount\"].transform(\"median\")\n    )\n    .query(\"amount &lt;= country_median * 10\")\n    .groupby(\"country\")[[\"amount\", \"discount\"]]\n    .apply(lambda df: (df[\"amount\"] - df[\"discount\"]).sum())\n    .reset_index()\n    .rename(columns={0: \"total\"})\n)\n\n\n\n\n\n\n\n\ncountry\ntotal\n\n\n\n\n0\nAustralia\n540\n\n\n1\nBrazil\n414\n\n\n2\nCanada\n270\n\n\n3\nFrance\n450\n\n\n4\nGermany\n513\n\n\n5\nIndia\n648\n\n\n6\nItaly\n567\n\n\n7\nJapan\n621\n\n\n8\nSpain\n594\n\n\n9\nUK\n432\n\n\n10\nUSA\n8455\n\n\n\n\n\n\n\n\n\nibis\nFor this last example, we have to resort to calculating the median after a group by operation over each country and then join it back to the original DataFrame to replace the outliers. This is similar to the pandas approach.\n\ndf.group_by(\"country\").aggregate(median=_.amount.median())\n\n┏━━━━━━━━━━━┳━━━━━━━━━┓\n┃ country   ┃ median  ┃\n┡━━━━━━━━━━━╇━━━━━━━━━┩\n│ string    │ float64 │\n├───────────┼─────────┤\n│ USA       │  3000.0 │\n│ Germany   │   200.0 │\n│ India     │   250.0 │\n│ Spain     │   230.0 │\n│ Japan     │   240.0 │\n│ Italy     │   220.0 │\n│ Brazil    │   230.0 │\n│ Australia │   210.0 │\n│ UK        │   160.0 │\n│ Canada    │   180.0 │\n│ …         │       … │\n└───────────┴─────────┘\n\n\n\nHere’s how you can do it in a single expression in ibis:\n\n(\n    df\n    .join(\n        df.group_by(\"country\").aggregate(median=_.amount.median()),\n        predicates=[\"country\"],\n    )\n    .filter(_.amount &lt;= _.median * 10)\n    .group_by(\"country\")\n    .aggregate(total=(_.amount - _.discount).sum())\n    .order_by(\"country\")\n)\n\n┏━━━━━━━━━━━┳━━━━━━━┓\n┃ country   ┃ total ┃\n┡━━━━━━━━━━━╇━━━━━━━┩\n│ string    │ int64 │\n├───────────┼───────┤\n│ Australia │   540 │\n│ Brazil    │   414 │\n│ Canada    │   270 │\n│ France    │   450 │\n│ Germany   │   513 │\n│ India     │   648 │\n│ Italy     │   567 │\n│ Japan     │   621 │\n│ Spain     │   594 │\n│ UK        │   432 │\n│ …         │     … │\n└───────────┴───────┘\n\n\n\n\n\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2025,\n  author = {Krishnamurthy, Dheepak},\n  title = {Ibis - a Better Pandas},\n  date = {2025-06-07},\n  url = {https://kdheepak.com/blog/ibis-better-pandas/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “ibis - a better pandas,” Jun. 07, 2025. https://kdheepak.com/blog/ibis-better-pandas/."
  },
  {
    "objectID": "blog/jupyter-notebook-revealjs-and-github-pages/index.html",
    "href": "blog/jupyter-notebook-revealjs-and-github-pages/index.html",
    "title": "Jupyter Notebook, Reveal.js and Github Pages",
    "section": "",
    "text": "Jupyter Notebook has the ability to convert an notebook ipynb to markdown, rst, html and interestingly slides. And these Reveal.js powered slides can be hosted on GitHub pages, like any other html page. The following steps works well for me to generate a static set of slides from a notebook that can be used as a presentation\n\nSave the ipython notebook as index.ipynb.\nFork reveal.js to your GitHub account.\nPush the master branch into the gh-pages branch. This is necessary because we want to use a single reveal.js repository to link to from the GitHub pages slideshow. Alternatively, you can clone reveal.js into your repository where the slideshow / presentation exists.\nUse the following script to convert the notebook to index.slides.html\n\nipython nbconvert index.ipynb --to slides --reveal-prefix ../reveal.js\nIf you did not Fork reveal.js and force update master to origin/gh-pages, and instead cloned reveal.js to this folder, you can add it as a submodule and use the following instead\nipython nbconvert index.ipynb --to slides --reveal-prefix reveal.js\n\nRename index.slides.html to index.html\nPush your changes to a repository\n\nYou can find an example here and the original notebook here.\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2015,\n  author = {Krishnamurthy, Dheepak},\n  title = {Jupyter {Notebook,} {Reveal.js} and {Github} {Pages}},\n  date = {2015-12-05},\n  url = {https://kdheepak.com/blog/jupyter-notebook-revealjs-and-github-pages/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Jupyter Notebook, Reveal.js and Github\nPages,” Dec. 05, 2015. https://kdheepak.com/blog/jupyter-notebook-revealjs-and-github-pages/."
  },
  {
    "objectID": "blog/fast-track-to-being-productive-in-vim/index.html",
    "href": "blog/fast-track-to-being-productive-in-vim/index.html",
    "title": "Fast track to being productive in Vim",
    "section": "",
    "text": "When I first started using vim three months ago, I found it quite challenging to get meaningful work done. I now realize that there were a list of things I had to grok in order to be productive in vim. Learning vim can be extremely gratifying, but the core ideas in vim are also probably unlike anything you have seen before. I thought it would be useful to share some steps one could take to maximize productivity with vim after committing to it. I haven’t been using vim for very long so I’m by no means an expert, and I still learn new things about vim every day. That said, this is in my experience the best bang for buck in priority order.\n\nSpend half an hour (maybe over lunch) using vimtutor.\n\nType vimtutor in a command line window and follow instructions.\n\nLearn to stay in normal mode often.\n\nIf you want to make a change, enter insert mode, edit text and return to normal mode.\n\nBreak old habits while learning new features by disabling functionality you are accustomed to.\n\nFor example, you can learn to navigate using hjkl by disabling arrow keys.\n\nUnderstand how to use macros:\n\nq : Start a macro\n[REG] : Assign a macro to a register, e.g. a. Starts recording a macro\n[keystrokes] : Perform a set of keystrokes, e.g. ciwhelloESC\nq : End recording a macro\n@[REG] : Play a macro from cursor current position\n@@ : Play last played macro\n\nLearn how to use and navigate buffers (:ls&lt;CR&gt;, :buffer N, C-^), jumplist (C-O, C-I), and taglist (C-], C-T).\nLearn about the built-in complete sub-mode: Use C-X in insert mode.\nCraft your lightsaber — make vim your own using ~/.vimrc.\n\nDon’t be afraid to customize your editor, but also don’t add anything in your .vimrc that you don’t understand.\n\nChange CAPSLOCK to ESC.\nWatch other people use vim on vimcasts and on YouTube.\nFind plugins to boost your productivity, and use a plugin manager.\n\n\n\n\nvimtutorReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2015,\n  author = {Krishnamurthy, Dheepak},\n  title = {Fast Track to Being Productive in {Vim}},\n  date = {2015-05-02},\n  url = {https://kdheepak.com/blog/fast-track-to-being-productive-in-vim/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Fast track to being productive in Vim,” May\n02, 2015. https://kdheepak.com/blog/fast-track-to-being-productive-in-vim/."
  },
  {
    "objectID": "blog/the-basic-building-blocks-of-ratatui-part-4/index.html",
    "href": "blog/the-basic-building-blocks-of-ratatui-part-4/index.html",
    "title": "The Basic Building blocks of Ratatui - Part 4",
    "section": "",
    "text": "Ratatui is a crate for building terminal user interfaces in Rust.\nIn this post we’ll show some simple widgets that come built-in with ratatui.\n\n\nCode\n:dep ratatui = \"0.26.2\"\n:dep ratatui-macros = \"0.4.0\"\n    \nfn span_to_html(s: ratatui::text::Span) -&gt; String{\n    let mut html = String::new();\n    html.push_str(\"&lt;span style=\\\"\");\n\n    // Set foreground color\n    if let Some(color) = &s.style.fg {\n        html.push_str(&format!(\"color: {};\", color));\n    }\n\n    // Set background color\n    if let Some(color) = &s.style.bg {\n        html.push_str(&format!(\"background-color: {};\", color));\n    }\n\n    // Add modifiers\n    match s.style.add_modifier {\n        ratatui::style::Modifier::BOLD =&gt; html.push_str(\"font-weight: bold;\"),\n        ratatui::style::Modifier::ITALIC =&gt; html.push_str(\"font-style: italic;\"),\n        ratatui::style::Modifier::UNDERLINED =&gt; html.push_str(\"text-decoration: underline;\"),\n        _ =&gt; {}\n    }\n    html.push_str(\"\\\"&gt;\");\n    html.push_str(&s.content);\n    html.push_str(\"&lt;/span&gt;\");\n    html\n}\n\nfn buffer_to_html(buf: &ratatui::buffer::Buffer) -&gt; String {\n    fn escape_special_html_characters(text: &str) -&gt; String {\n        text.replace(\"&\", \"&amp;\")\n            .replace(\"&lt;\", \"&lt;\")\n            .replace(\"&gt;\", \"&gt;\")\n            .replace(\"\\\"\", \"&quot;\")\n            .replace(\"'\", \"&#39;\")\n    }\n\n    let mut html = String::from(\"&lt;pre&gt;&lt;code&gt;\");\n\n    let w = buf.area.width;\n    let h = buf.area.height;\n\n    for y in 0..h {\n        for x in 0..w {\n            let s = buf.get(x, y).symbol();\n            \n            let escaped = escape_special_html_characters(s); \n\n            let style = buf.get(x, y).style();\n\n            let span = ratatui::text::Span::styled(s, style);\n            \n            html.push_str(&span_to_html(span));\n        }\n        html.push('\\n');\n    }\n\n    html.push_str(\"&lt;/code&gt;&lt;/pre&gt;\");\n\n    html \n}\n    \nfn show_html&lt;D&gt;(content: D) where D: std::fmt::Display {\n    println!(r#\"EVCXR_BEGIN_CONTENT text/html\n&lt;div style=\"display: flex; justify-content:start; gap: 1em; margin: 1em\"&gt;\n{}\n&lt;/div&gt;\nEVCXR_END_CONTENT\"#, content);\n}\n\n\n\nWidget primitives\n\nBlock\nThe simplest widget is the Block widget, which is essentially just borders.\n\nuse ratatui::widgets::Widget;\n\nlet (x, y, width, height) = (0, 0, 50, 5); \nlet area = ratatui::layout::Rect::new(x, y, width, height);\nlet mut buf = ratatui::buffer::Buffer::empty(area);\nratatui::widgets::Block::bordered().render(area, &mut buf);\n\nshow_html(buffer_to_html(&buf))\n\n\n┌────────────────────────────────────────────────┐\n│                                                │\n│                                                │\n│                                                │\n└────────────────────────────────────────────────┘\n\n\n\n\nMost widgets accept a Block as a fluent setter. We saw from earlier that the Paragraph has a .block() method that accepts a Block.\nlet paragraph = Paragraph::new(text).block(block).centered();\nBlocks can have different kinds of borders:\n\nlet (x, y, width, height) = (0, 0, 50, 5); \nlet area = ratatui::layout::Rect::new(x, y, width, height);\nlet mut buf = ratatui::buffer::Buffer::empty(area);\n\nratatui::widgets::Block::bordered().border_type(\n    ratatui::widgets::BorderType::Double\n).render(area.inner(&ratatui::layout::Margin::new(2, 1)), &mut buf);\n\nratatui::widgets::Block::bordered().borders(\n    ratatui::widgets::Borders::TOP | ratatui::widgets::Borders::BOTTOM\n).render(area, &mut buf);\n\nshow_html(buffer_to_html(&buf))\n\n\n──────────────────────────────────────────────────\n  ╔════════════════════════════════════════════╗  \n  ║                                            ║  \n  ╚════════════════════════════════════════════╝  \n──────────────────────────────────────────────────\n\n\n\n\nAnd Block can have multiple titles in different locations:\n\nuse ratatui_macros::line;\n\nlet (x, y, width, height) = (0, 0, 50, 5); \nlet area = ratatui::layout::Rect::new(x, y, width, height);\nlet mut buf = ratatui::buffer::Buffer::empty(area);\n\nlet block = ratatui::widgets::Block::bordered()\n                .title(\"Top Left\") // accepts anything that can be converted to a `Title` or a `Line`\n                .title(ratatui::text::Line::from(\"Top Center\").centered()) // explicitly need to use `Line` if you want alignment\n                .title(line![\"Top Right\"].right_aligned()) // you can use the `line!` macro to make it shorter\n                .title(ratatui::widgets::block::Title::from(\"Bottom Right\") // explicitly using `Title` gives you most control\n                       .alignment(ratatui::layout::Alignment::Right)\n                       .position(ratatui::widgets::block::title::Position::Bottom)\n                )\n                .title_bottom(ratatui::text::Line::from(\"Bottom Center\").centered()) // shorthand functions for bottom position\n                .title_bottom(\"Bottom Left\"); // aligned to the left by default\n\nblock.render(area, &mut buf);\n\nshow_html(buffer_to_html(&buf))\n\n\n┌Top Left───────────Top Center──────────Top Right┐\n│                                                │\n│                                                │\n│                                                │\n└Bottom Left──────Bottom Center──────Bottom Right┘\n\n\n\n\n\n\n\nConclusion\nIn the next post, we’ll examine how Ratatui works under the hood in more detail.\n\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2024,\n  author = {Krishnamurthy, Dheepak},\n  title = {The {Basic} {Building} Blocks of {Ratatui} - {Part} 4},\n  date = {2024-05-18},\n  url = {https://kdheepak.com/blog/the-basic-building-blocks-of-ratatui-part-4/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “The Basic Building blocks of Ratatui - Part\n4,” May 18, 2024. https://kdheepak.com/blog/the-basic-building-blocks-of-ratatui-part-4/."
  },
  {
    "objectID": "blog/reinstall-xcode-command-line-developer-tools/index.html",
    "href": "blog/reinstall-xcode-command-line-developer-tools/index.html",
    "title": "Reinstall Xcode command line developer tools",
    "section": "",
    "text": "Delete existing command line tools and install them again.\n\nℹ This requires root to run.\n\n# uninstall command line tools\nsudo rm -rf /Library/Developer/CommandLineTools\n# install command line tools\nxcode-select --install\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2022,\n  author = {Krishnamurthy, Dheepak},\n  title = {Reinstall {Xcode} Command Line Developer Tools},\n  date = {2022-02-15},\n  url = {https://kdheepak.com/blog/reinstall-xcode-command-line-developer-tools/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Reinstall Xcode command line developer\ntools,” Feb. 15, 2022. https://kdheepak.com/blog/reinstall-xcode-command-line-developer-tools/."
  },
  {
    "objectID": "blog/emacs-workflow-using-emacs-in-the-terminal/index.html",
    "href": "blog/emacs-workflow-using-emacs-in-the-terminal/index.html",
    "title": "Emacs workflow — Using Emacs in the terminal",
    "section": "",
    "text": "I use the command line a lot, frequently editing files locally or remotely. Up until now, I’ve been using vim with tmux and zsh. I’ve recently been experimenting with emacs and have been trying to get it to work well inplace of vim. I personally think the author of this post nailed it regarding emacs workflow. I’ve only made minor modifications to get it to suit my requirements.\nI’ve created a separate script called ess (emacsserverstart) added a & at the end of the emacs script to get it to run in the background.\n/usr/local/bin/ess:\n#!/bin/zsh\n/Applications/Emacs.app/Contents/MacOS/Emacs &\n/usr/local/bin/emacs:\n#!/bin/zsh\n/Applications/Emacs.app/Contents/MacOS/Emacs \"$@\"\nI’ve found that when using emacsclient connecting to emacs --daemon renders certain things differently, as compared to opening emacs, starting a server and connecting to that instead. I also have (server-start) in my .emacs file.\nThe following script connects a emacsclient to an already existing emacs server. If a server does not exist, it starts a daemon and then connects to it. This is done using the -a \"\" flag, which allows you to set an alternate editor. If no editor it set it defaults to running a daemon. It also shifts focus to the emacsclient after it opens.\n/usr/local/bin/ec:\n#!/bin/zsh\n\n# This script starts emacs daemon if it is not running, opens whatever file\n# you pass in and changes the focus to emacs.  Without any arguments, it just\n# opens the current buffer or *scratch* if nothing else is open.  The following\n# example will open ~/.bashrc\n\n# ec ~/.bashrc\n\n# You can also pass it multiple files, it will open them all.  Unbury-buffer\n# will cycle through those files in order\n\n# The compliment to the script is et, which opens emacs in the terminal\n# attached to a daemon\n\n# If you want to execute elisp, pass in -e whatever.\n# You may also want to stop the output from returning to the terminal, like\n# ec -e \"(message \\\"Hello\\\")\" &gt; /dev/null\n\n# emacsclient options for reference\n# -a \"\" starts emacs daemon and reattaches\n# -c creates a new frame\n# -n returns control back to the terminal\n# -e eval the script\n\n# Number of current visible frames,\n# Emacs daemon always has a visible frame called F1\nvisible_frames() {\n  emacsclient -a \"\" -e '(length (visible-frame-list))'\n}\n\nchange_focus() {\n  emacsclient -n -e \"(select-frame-set-input-focus (selected-frame))\" &gt; /dev/null\n}\n\n# try switching to the frame incase it is just minimized\n# will start a server if not running\ntest \"$(visible_frames)\" -eq \"1\" && change_focus\n\nif [ \"$(visible_frames)\" -lt \"2\" ]; then # need to create a frame\n  # -c $@ with no args just opens the scratch buffer\n  emacsclient -n -c \"$@\" && change_focus\nelse # there is already a visible frame besides the daemon, so\n  change_focus\n  # -n $@ errors if there are no args\n  test \"$#\" -ne \"0\" && emacsclient -n \"$@\"\nfi\nThis script opens an emacsclient in the terminal and connects it to a running server. The -t flag opens it in the terminal.\n/usr/local/bin/et:\n#!/bin/zsh\n\n# Makes sure emacs daemon is running and opens the file in Emacs in\n# the terminal.\n\n# If you want to execute elisp, use -e whatever, like so\n\n# et -e \"(message \\\"Word up\\\")\"\n\n# You may want to redirect that to /dev/null if you don't want the\n# return to printed on the terminal.  Also, just echoing a message\n# may not be visible if Emacs then gives you a message about what\n# to do when do with the frame\n\n# The compliment to this script is ec\n\n# Emacsclient option reference\n# -a \"\" starts emacs daemon and reattaches\n# -t starts in terminal, since I won't be using the gui\n# can also pass in -n if you want to have the shell return right away\n\nexec emacsclient -a \"\" -t \"$@\"\nThis following script stops the emacs server.\n/usr/local/bin/es:\n#!/bin/zsh\n\n# simple script to shutdown the running Emacs daemon\n\n# emacsclient options for reference\n# -a Alternate editor, runs bin/false in this case\n# -e eval the script\n\n# If the server-process is bound and the server is in a good state, then kill\n# the server\n\nserver_ok() {\n  emacsclient -a \"false\" -e \"(boundp 'server-process)\"\n}\n\nif [ \"t\" == \"$(server_ok)\" ]; then\n  echo \"Shutting down Emacs server\"\n  # wasn't removing emacs from ALT-TAB on mac\n  # emacsclient -e \"(server-force-delete)\"\n  emacsclient -e '(spacemacs/kill-emacs)'\nelse\n  echo \"Emacs server not running\"\nfi\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2015,\n  author = {Krishnamurthy, Dheepak},\n  title = {Emacs Workflow — {Using} {Emacs} in the Terminal},\n  date = {2015-07-26},\n  url = {https://kdheepak.com/blog/emacs-workflow-using-emacs-in-the-terminal/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Emacs workflow — Using Emacs in the\nterminal,” Jul. 26, 2015. https://kdheepak.com/blog/emacs-workflow-using-emacs-in-the-terminal/."
  },
  {
    "objectID": "blog/geektool-and-desktop-widgets-in-osx/index.html",
    "href": "blog/geektool-and-desktop-widgets-in-osx/index.html",
    "title": "Geektool and Desktop Widgets in OSX",
    "section": "",
    "text": "This is a Geektool tutorial on how to customize your Mac OSX desktop homescreen. Using Geektool you can add a widget like functionality to your desktop.\n\n \nAll you need to do is download the following script from here and place it in any folder. Then add a Geektool script and link it to the bash script you’ve downloaded.\n\n\nI’ve also used a Calvin and Hobbes / Bill Watterson font to display the day, time and weather using the following codes.\nDay\ndate '+%A' | tr [:lower:] [:upper:]\nTime\ndate '+%I: %M %p'\nWeather\ncurl --silent \"https://xml.weather.yahoo.com/forecastrss?p=50014&u=f\" | grep -E '(Current Conditions:|F&lt;BR)' | sed -e 's/Current Conditions://' -e 's/\n//' -e 's/&lt;b&gt;//' -e 's/&lt;\\/b&gt;//' -e 's/\n//' -e 's///' -e 's/&lt;\\/description&gt;//'\nYou can also display your battery level, uptime, network connectivity status. There are also loads of preset Geeklets that you can download to get yourself a good looking homescreen. Sky is the limit!\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2014,\n  author = {Krishnamurthy, Dheepak},\n  title = {Geektool and {Desktop} {Widgets} in {OSX}},\n  date = {2014-12-13},\n  url = {https://kdheepak.com/blog/geektool-and-desktop-widgets-in-osx/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Geektool and Desktop Widgets in OSX,” Dec.\n13, 2014. https://kdheepak.com/blog/geektool-and-desktop-widgets-in-osx/."
  },
  {
    "objectID": "blog/the-basic-building-blocks-of-ratatui-part-1/index.html",
    "href": "blog/the-basic-building-blocks-of-ratatui-part-1/index.html",
    "title": "The Basic Building blocks of Ratatui - Part 1",
    "section": "",
    "text": "Ratatui is a crate for building terminal user interfaces in Rust.\nOne of the unique features of Ratatui is that it is an immediate mode rendering library. In these series post, I’m going to describe some of the primitives of Ratatui. In every Ratatui application I build, I rely on theses concepts described in this post.\n\nImmediate Mode Rendering\nUser interfaces can broadly be classified into two kinds:\n\nimmediate mode GUIs,\nretained mode GUIs.\n\nCasey Muratori has a great video on immediate mode rendering.\n\nAt a very high level, in retained mode GUIs, you create UI elements and pass it to a framework and the framework is in charge of displaying them. For example, you can create a text field and input field, and then the browser will render them. The browser is in charge of handling events, and as a developer you have to define how these events interact with these widgets.\nFor example, in a simple counter example in a browser, we have to set up an incrementCounter and decrementCounter callbacks that update the relevant element’s state. The browser is responsible for displaying these elements, receiving user inputs, calling the appropriate onclick callback, etc.\n\n\nCode\n:dep ratatui = \"0.26.2\"\n:dep ratatui-macros = \"0.4.0\"\n    \nfn span_to_html(s: ratatui::text::Span) -&gt; String{\n    let mut html = String::new();\n    html.push_str(\"&lt;span style=\\\"\");\n\n    // Set foreground color\n    if let Some(color) = &s.style.fg {\n        html.push_str(&format!(\"color: {};\", color));\n    }\n\n    // Set background color\n    if let Some(color) = &s.style.bg {\n        html.push_str(&format!(\"background-color: {};\", color));\n    }\n\n    // Add modifiers\n    match s.style.add_modifier {\n        ratatui::style::Modifier::BOLD =&gt; html.push_str(\"font-weight: bold;\"),\n        ratatui::style::Modifier::ITALIC =&gt; html.push_str(\"font-style: italic;\"),\n        ratatui::style::Modifier::UNDERLINED =&gt; html.push_str(\"text-decoration: underline;\"),\n        _ =&gt; {}\n    }\n    html.push_str(\"\\\"&gt;\");\n    html.push_str(&s.content);\n    html.push_str(\"&lt;/span&gt;\");\n    html\n}\n\nfn buffer_to_html(buf: &ratatui::buffer::Buffer) -&gt; String {\n    fn escape_special_html_characters(text: &str) -&gt; String {\n        text.replace(\"&\", \"&amp;\")\n            .replace(\"&lt;\", \"&lt;\")\n            .replace(\"&gt;\", \"&gt;\")\n            .replace(\"\\\"\", \"&quot;\")\n            .replace(\"'\", \"&#39;\")\n    }\n\n    let mut html = String::from(\"&lt;pre&gt;&lt;code&gt;\");\n\n    let w = buf.area.width;\n    let h = buf.area.height;\n\n    for y in 0..h {\n        for x in 0..w {\n            let s = buf.get(x, y).symbol();\n            \n            let escaped = escape_special_html_characters(s); \n\n            let style = buf.get(x, y).style();\n\n            let span = ratatui::text::Span::styled(s, style);\n            \n            html.push_str(&span_to_html(span));\n        }\n        html.push('\\n');\n    }\n\n    html.push_str(\"&lt;/code&gt;&lt;/pre&gt;\");\n\n    html \n}\n    \nfn show_html&lt;D&gt;(content: D) where D: std::fmt::Display {\n    println!(r#\"EVCXR_BEGIN_CONTENT text/html\n&lt;div style=\"display: flex; justify-content:start; gap: 1em; margin: 1em\"&gt;\n{}\n&lt;/div&gt;\nEVCXR_END_CONTENT\"#, content);\n}\n\n\nshow_html(r#\"\n\n&lt;button onclick=\"decrementCounter()\"&gt;Decrement&lt;/button&gt;\n\n&lt;text&gt; Counter: &lt;/text&gt;\n&lt;text id=\"counter\"&gt;0&lt;/text&gt;\n\n&lt;button onclick=\"incrementCounter()\"&gt;Increment&lt;/button&gt;\n\n&lt;script&gt;\n    var counterElement = document.getElementById(\"counter\");\n\n    var counterValue = 0;\n    counterElement.textContent = counterValue;\n\n    function incrementCounter() {\n        counterValue++;\n        counterElement.textContent = counterValue;\n    }\n\n    function decrementCounter() {\n        counterValue--;\n        counterElement.textContent = counterValue;\n    }\n&lt;/script&gt;\n\"#)\n\n\n\n\n\nDecrement\n\n Counter: \n0\n\nIncrement\n\n\n\n\n\n\nIn immediate mode rendering, however, you are responsible for rendering the UI every frame. This is typically done in a for loop or a while true loop in your application; and you use an immediate mode rendering library (in our case ratatui) to render the elements. This means you as the developer of the application using immediate mode rendering are responsible for a lot more things but it also gives you more control and freedom.\n\n\nRect Primitives\n\n\nCode\n:dep ratatui = \"0.26.2\"\n:dep ratatui-macros = \"0.4.0\"\n\n\nOne of Ratatui’s core primitives is a Rect struct. Let’s create one:\n\nlet (x, y, width, height) = (0, 0, 80, 5);\nlet area = ratatui::layout::Rect::new(x, y, width, height);\narea\n\nRect { x: 0, y: 0, width: 80, height: 5 }\n\n\nWe can also create an inner Rect by using the inner() method and a Margin struct:\n\nlet (horizontal, vertical) = (2, 1);\narea.inner(&ratatui::layout::Margin::new(horizontal, vertical))\n\nRect { x: 2, y: 1, width: 76, height: 3 }\n\n\nRect has 4 public fields,\n\nx,\ny,\nwidth and\nheight\n\n\n\n\n\n\n\nIn ratatui (and terminals in general), the origin is at the top left and increases horizontally left to right, and increases vertically top to bottom.\n\"(0,0)\" -------------&gt; x \"(columns)\"\n\n   |\n   |\n   |\n   |\n   v\n\n   y \"(rows)\"\n\n\n\nIf we want to loop though all elements in a Rect, we can use the following pattern:\n\nfor x in area.left()..area.right() {\n    for y in area.top()..area.bottom() {\n        // ...\n    }\n};\n\n\n\nBuffer Primitives\nIn Ratatui, every widget renders into a Buffer of a fixed size that is equal to the terminal dimensions. Let create an empty buffer:\n\n// create a `Rect`\nlet (x, y, width, height) = (0, 0, 80, 5);\nlet area = ratatui::layout::Rect::new(x, y, width, height);\n\n// create a `Buffer` that is of size of `area`\nlet mut buf = ratatui::buffer::Buffer::empty(area);\n\nWe can print the buf here as HTML using this function:\n\n\nCode\nshow_html(buffer_to_html(&buf))\n\n\n\n                                                                                \n                                                                                \n                                                                                \n                                                                                \n                                                                                \n\n\n\n\nCurrently the buf is empty. Let’s render into the buffer by using the Block widget with a border. We will discuss Block in more detail in a future blog post.\nThe render method requires importing the Widget trait:\n\nuse ratatui::widgets::Widget; // required trait for `.render()` method\n\nNow we can render a Block with borders widget into a Buffer using the render method from the Widget trait:\n\nlet block = ratatui::widgets::Block::bordered();\nblock.render(area, &mut buf);\n\nThis is what it looks like when displayed in the browser.\n\n\nCode\nshow_html(buffer_to_html(&buf))\n\n\n\n┌──────────────────────────────────────────────────────────────────────────────┐\n│                                                                              │\n│                                                                              │\n│                                                                              │\n└──────────────────────────────────────────────────────────────────────────────┘\n\n\n\n\nLet’s also add a title.\n\nlet block = ratatui::widgets::Block::bordered().title(\"Counter Example\");\nblock.render(area, &mut buf);\n\n\n\nCode\nshow_html(buffer_to_html(&buf))\n\n\n\n┌Counter Example───────────────────────────────────────────────────────────────┐\n│                                                                              │\n│                                                                              │\n│                                                                              │\n└──────────────────────────────────────────────────────────────────────────────┘\n\n\n\n\nNow, let’s put some text into the center of the buffer.\nLet’s say we have the following App:\n\n#[derive(Debug, Default)]\npub struct App {\n    counter: u8,\n}\nlet mut app = App::default();\napp\n\nApp { counter: 0 }\n\n\nAnd we want to render the App’s counter in the center of the buffer.\n\nuse ratatui::widgets::Paragraph;\n\nlet inner_area = area.inner(&ratatui::layout::Margin { horizontal: 0, vertical: 2 });\n\nlet paragraph = ratatui::widgets::Paragraph::new(format!(\"Counter: {}\", app.counter)).centered();\nparagraph.render(inner_area, &mut buf);\n\n\n\nCode\nshow_html(buffer_to_html(&buf))\n\n\n\n┌Counter Example───────────────────────────────────────────────────────────────┐\n│                                                                              │\n│                                  Counter: 0                                  │\n│                                                                              │\n└──────────────────────────────────────────────────────────────────────────────┘\n\n\n\n\nIn immediate mode rendering, this is one frame of our UI!\nLet’s put our UI code into a function.\n\nfn draw_ui(app: &App, area: ratatui::layout::Rect, buf: &mut ratatui::buffer::Buffer) {\n    let block = ratatui::widgets::Block::bordered().title(\"Counter Example\");\n    block.render(area, buf);\n    \n    let inner_area = area.inner(&ratatui::layout::Margin { horizontal: 0, vertical: 2 });    \n    let paragraph = ratatui::widgets::Paragraph::new(format!(\"Counter: {}\", app.counter)).centered();\n    paragraph.render(inner_area, buf);\n}\n\nFor the next frame, we can increment the counter and render into the buffer again.\n\napp.counter += 1;\n\ndraw_ui(&app, area, &mut buf);\n\n\n\nCode\nshow_html(buffer_to_html(&buf))\n\n\n\n┌Counter Example───────────────────────────────────────────────────────────────┐\n│                                                                              │\n│                                  Counter: 1                                  │\n│                                                                              │\n└──────────────────────────────────────────────────────────────────────────────┘\n\n\n\n\n\napp.counter += 1;\n\ndraw_ui(&app, area, &mut buf);\n\n\n\nCode\nshow_html(buffer_to_html(&buf))\n\n\n\n┌Counter Example───────────────────────────────────────────────────────────────┐\n│                                                                              │\n│                                  Counter: 2                                  │\n│                                                                              │\n└──────────────────────────────────────────────────────────────────────────────┘\n\n\n\n\n\napp.counter += 1;\n\ndraw_ui(&app, area, &mut buf);\n\n\n\nCode\nshow_html(buffer_to_html(&buf))\n\n\n\n┌Counter Example───────────────────────────────────────────────────────────────┐\n│                                                                              │\n│                                  Counter: 3                                  │\n│                                                                              │\n└──────────────────────────────────────────────────────────────────────────────┘\n\n\n\n\nA Buffer contains a ratatui::layout::Rect indicating its size and Vec&lt;ratatui::buffer::Cell&gt; storing its content.\nA ratatui::buffer::Cell contains the symbol that represents the content at a specific (x,y) location on the terminal as well as the style of the content.\n\nlet cell = buf.get(0, 0).clone();\ncell\n\nCell { symbol: \"┌\", fg: Reset, bg: Reset, underline_color: Reset, modifier: NONE, skip: false }\n\n\n\nbuf.content.len()\n\n400\n\n\n\nbuf.area.width * buf.area.height\n\n400\n\n\nWe will learn more about ratatui::style::Styles and how a widget draws into a ratatui::buffer::Buffer in a future post.\n\n\nFrame primitive\nratatui exposes just one function as the API for drawing to the terminal, the Terminal::draw method.\nLet’s create a TestBackend based Terminal to illustrate this.\n\nlet backend = ratatui::backend::TestBackend::new(80, 5);\nlet mut terminal = ratatui::terminal::Terminal::new(backend).unwrap();\nterminal.draw(|frame| {\n    dbg!(frame);\n});\n\n[src/lib.rs:202:5] frame = Frame {\n    cursor_position: None,\n    viewport_area: Rect {\n        x: 0,\n        y: 0,\n        width: 80,\n        height: 5,\n    },\n    buffer: Buffer {\n        area: Rect { x: 0, y: 0, width: 80, height: 5 },\n        content: [\n            \"                                                                                \",\n            \"                                                                                \",\n            \"                                                                                \",\n            \"                                                                                \",\n            \"                                                                                \",\n        ],\n        styles: [\n            x: 0, y: 0, fg: Reset, bg: Reset, underline: Reset, modifier: NONE,\n        ]\n    },\n    count: 0,\n}\n\n\nWe can see that when called terminal.draw(|f| ...), the callback passed into the draw method is called immediately. The callback receives an argument that is a Frame.\nCalling terminal.draw again increases the f.count value\n\nterminal.draw(|frame| {\n    dbg!(frame.count());\n});\n\n[src/lib.rs:202:5] frame.count() = 1\n\n\n\nterminal.draw(|frame| {\n    dbg!(frame.count());\n});\n\n[src/lib.rs:202:5] frame.count() = 2\n\n\n\nterminal.draw(|frame| {\n    dbg!(frame.count());\n});\n\n[src/lib.rs:202:5] frame.count() = 3\n\n\nFrame also has access to the current Buffer.\n\nterminal.draw(|frame| {\n    dbg!(frame.buffer_mut());\n});\n\n[src/lib.rs:202:5] frame.buffer_mut() = Buffer {\n    area: Rect { x: 0, y: 0, width: 80, height: 5 },\n    content: [\n        \"                                                                                \",\n        \"                                                                                \",\n        \"                                                                                \",\n        \"                                                                                \",\n        \"                                                                                \",\n    ],\n    styles: [\n        x: 0, y: 0, fg: Reset, bg: Reset, underline: Reset, modifier: NONE,\n    ]\n}\n\n\nAll of ratatui functionality is to be used to draw into this Buffer of the Frame passed into the callback. ratatui then figures out how to print the Buffer to a terminal to display a UI.\nLet’s draw our app from earlier into the Buffer of the frame.\n\nterminal.backend().buffer()\n\nBuffer {\n    area: Rect { x: 0, y: 0, width: 80, height: 5 },\n    content: [\n        \"                                                                                \",\n        \"                                                                                \",\n        \"                                                                                \",\n        \"                                                                                \",\n        \"                                                                                \",\n    ],\n    styles: [\n        x: 0, y: 0, fg: Reset, bg: Reset, underline: Reset, modifier: NONE,\n    ]\n}\n\n\n\nterminal.draw(|frame| {\n    let mut buf = frame.buffer_mut();\n    draw_ui(&app, area, &mut buf)\n});\n\n\nterminal.backend().buffer()\n\nBuffer {\n    area: Rect { x: 0, y: 0, width: 80, height: 5 },\n    content: [\n        \"┌Counter Example───────────────────────────────────────────────────────────────┐\",\n        \"│                                                                              │\",\n        \"│                                  Counter: 3                                  │\",\n        \"│                                                                              │\",\n        \"└──────────────────────────────────────────────────────────────────────────────┘\",\n    ],\n    styles: [\n        x: 0, y: 0, fg: Reset, bg: Reset, underline: Reset, modifier: NONE,\n    ]\n}\n\n\nIf we repeat this process of updating state and drawing UI in a loop, we get an immediate mode rendered UI.\nwhile true {\n    // update app state\n    app.counter += 1;\n\n    // draw app state\n    terminal.draw(|frame| {\n        let mut buf = frame.buffer_mut();\n        draw_ui(&app, area, &mut buf)\n    });\n}\nHere’s what a more complete counter application might look like with keyboard events.\n\nIf you are interested in seeing the full code regarding this, you can check out the basic-app tutorial on the Ratatui website.\nRatatui uses a double buffer rendering technique that you can read about here.\n\n\nConclusion\nWe will discuss more about how this works under the hood in a future blog post.\nIn the next post, we’ll discuss ratatui’s layout primitives.\n\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2024,\n  author = {Krishnamurthy, Dheepak},\n  title = {The {Basic} {Building} Blocks of {Ratatui} - {Part} 1},\n  date = {2024-05-15},\n  url = {https://kdheepak.com/blog/the-basic-building-blocks-of-ratatui-part-1/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “The Basic Building blocks of Ratatui - Part\n1,” May 15, 2024. https://kdheepak.com/blog/the-basic-building-blocks-of-ratatui-part-1/."
  },
  {
    "objectID": "blog/active-reactive-and-apparent-power/index.html",
    "href": "blog/active-reactive-and-apparent-power/index.html",
    "title": "Active, reactive and apparent power",
    "section": "",
    "text": "Introduction to basic concepts\n\\(V\\) and \\(I\\) are used to indicate phasor representations of sinusoidal voltages and currents. \\(E\\) is used to represent generated voltage or electromotive force (emf). \\(V\\) is often used to measure a potential difference between two points. \\(v\\) is used to represent the instantaneous voltage between two points.\nLet voltage be defined as the following:\n\\(v = 155.563491861 \\cos(\\omega t + \\phi)\\)\n\\(i = 7.07106781187 \\cos\\omega t\\)\nLet us plot this and see what it looks like.\n\n\nCode\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nf0 = 60 # Hz (frequency)\nphi = -np.pi/2 # phase shift\n\nAv = 155.563491861 # voltage peak\nAi = 7.07106781187 # current peak\n\nfs = 4000 # steps\nt = np.arange(0.000, 6/f0, 1.0/fs) # plot from 0 to .02 secs\n\nv = Av * np.cos(2 * np.pi * f0 * t + phi)\ni = Ai * np.cos(2 * np.pi * f0 * t )\n\nfig, ax = plt.subplots(1,1,figsize = (16,10))\nax.plot(t, v, label = 'Voltage')\nax.plot(t, i, label = 'Current')\nax.axis([0, 2/f0, -200, 200])\n\nax.legend();\n\nplt.savefig(\"./power_3_0.png\", transparent=True, dpi=300)\n\n\nWe can calculate the maximum, minimum and the RMS value as follows:\ndef rms(x):\n    return np.sqrt(np.mean(x**2))\n\nprint('Maximum', max(v))\nprint('Minimum', min(v))\nprint('RMS', rms(v))\n\nprint('Ratio max/rms', max(v)/rms(v))\n\ntry:\n    np.testing.assert_approx_equal(np.sqrt(2), max(v)/rms(v))\nexcept:\n    print 'Numbers not equal'\nelse:\n    print 'Maximum value = √2 x RMS value'\nMaximum 155.563491861\nMinimum -155.563491861\nRMS 110.0\nRatio max/rms 1.41421356237\nMaximum value = √2 x RMS value\n\\(|V|\\) is used to represent magnitude of the phasors.\n\\(|V| = 110 = \\frac{155.5634}{\\sqrt{2}}\\)\nThe RMS value of \\(v\\) is what is read by a voltmeter.\n\n\nExpression for power\nLet voltage and current be expressed by:\n\\(v_{an} = V_{max} \\cos(\\omega t + \\theta)\\)\n\\(i_{an} = I_{max} \\cos\\omega t\\)\nInstantaneous power is calculated by \\(p_{a} = v_{an} \\times i_{an}\\). If we plot the above equations, assuming \\(\\theta = -\\frac{\\pi}{6}\\), we get the following.\n\n\nCode\n\nf0 = 60 # Hz (frequency)\nphi = -np.pi/6 # phase shift\n\nAv = 10*np.sqrt(2) # voltage peak\nAi = 5*np.sqrt(2) # current peak\n\nfs = 4000 # steps\nt = np.arange(0.000, 1/f0, 1.0/fs) # plot from 0 to .02 secs\n\nv = Av * np.cos(2 * np.pi * f0 * t + phi)\ni = Ai * np.cos(2 * np.pi * f0 * t )\nfig, axs = plt.subplots(2,1,figsize = (16,10))\n\nax1 = axs[0]\n\nax1.axhline(linewidth=0.25, color='black')\nax1.axvline(linewidth=0.25, color='black')\n\nax1.plot(t, v, label = 'Voltage in phase A')\nax1.plot(t, i, label = 'Current in phase A')\nax1.set_ylabel('Voltage and Current')\n\nax1.axis([0, 1/f0, -20, 20]);\nax1.legend()\n\n\nax2 = axs[1]\n\nax2.axhline(linewidth=0.25, color='black')\nax2.axvline(linewidth=0.25, color='black')\n\nax2.plot(t, v*i, label = 'Power in phase A', color='g')\n\nax2.set_ylabel('Power')\n# for tl in ax2.get_yticklabels():\n#     tl.set_color('g')\nax2.legend()\nax2.axis([0, 1/f0, -120, 120]);\n\nplt.savefig(\"./power_11_0.png\", transparent=True, dpi=300)\n\n\nWe can decompose the instantaneous power following the steps below.\n\\(v_{an} = V_{max} \\cos(\\omega t  + \\theta)\\)\n\\(i_{an} = I_{max} \\cos\\omega t\\)\n\\(p = v_{an} \\times i_{an}\\)\n\\(p = V_{max} \\cos(\\omega t + \\theta) \\times I_{max} \\cos\\omega t\\)\n\\(p = V_{max}I_{max} \\cos(\\omega t + \\theta) \\times \\cos\\omega t\\)\nWe know that,\n\\(2\\cos \\theta \\cos \\varphi = {{\\cos(\\theta - \\varphi) + \\cos(\\theta + \\varphi)}}\\)\n\\(p = V_{max}I_{max} \\cos(\\omega t + \\theta) \\cos\\omega t\\)\n\\(p = \\frac{V_{max}I_{max}}{2}({{\\cos(\\omega t + \\theta - \\omega t) + \\cos(\\omega t + \\theta + \\omega t)}})\\)\n\\(p = \\frac{V_{max}I_{max}}{2}({{\\cos\\theta + \\cos(2\\omega t + \\theta )}})\\)\nThe second \\(\\cos\\) term is of the following form,\n\\(\\cos(\\alpha \\pm \\beta) = \\cos \\alpha \\cos \\beta \\mp \\sin \\alpha \\sin \\beta\\,\\)\n\\(p = \\frac{V_{max}I_{max}}{2}({{\\cos\\theta + \\cos 2\\omega t \\cos \\theta - \\sin 2\\omega t \\sin \\theta}})\\)\n\\(p = \\frac{V_{max}I_{max}}{2}({{\\cos\\theta (1 + \\cos 2\\omega t)  - \\sin 2\\omega t \\sin \\theta}})\\)\n\\(p = \\frac{V_{max}I_{max}}{2} \\cos\\theta (1 + \\cos 2\\omega t)  - \\frac{V_{max}I_{max}}{2} \\sin 2\\omega t \\sin \\theta\\)\n\\(\\theta\\) is the phase angle of one of the phasors. In our case, \\(\\theta\\) is the phase angle of Voltage, when the angle of Current is 0\nAssuming \\(\\theta = -\\theta\\),\n\\(\\cos(\\theta) = \\cos(-\\theta)\\)\n\\(\\sin(\\theta) =  - \\sin(-\\theta)\\)\nHence,\n\\(p = \\frac{V_{max}I_{max}}{2} \\cos\\theta (1 + \\cos 2\\omega t) + \\frac{V_{max}I_{max}}{2} \\sin 2\\omega t \\sin \\theta\\)\nWe see that the sign of the first term remains unaffected by the sign of \\(\\theta\\)\nLet us plot the two parts of this equation.\n\n\nCode\n\nf0 = 60 # Hz (frequency)\nphi = -np.pi/3 # phase shift\n\nAv = 110*np.sqrt(2) # voltage peak\nAi = 5*np.sqrt(2) # current peak\n\nfs = 4000 # steps\nt = np.arange(0.000, 1/f0, 1.0/fs) # plot from 0 to .02 secs\n\nv = Av * np.cos(2 * np.pi * f0 * t + phi)\ni = Ai * np.cos(2 * np.pi * f0 * t )\nfig, axs = plt.subplots(1,1,figsize = (16,5))\n\n# ax1 = axs[0]\n\n# ax1.axhline(linewidth=0.25, color='black')\n# ax1.axvline(linewidth=0.25, color='black')\n\n# ax1.plot(t, v, label = 'Voltage in phase A')\n# ax1.plot(t, i, label = 'Current in phase A')\n# ax1.set_ylabel('Voltage and Current')\n\n# ax1.axis([0, 1/f0, -200, 200]);\n# ax1.legend(loc='lower left')\n\nax2 = axs\n\nax2.axhline(linewidth=0.25, color='black')\nax2.axvline(linewidth=0.25, color='black')\n\n#$p = \\frac{V_{max}I_{max}}{2} \\cos\\theta (1 + \\cos 2\\omega t)\n#                         + \\frac{V_{max}I_{max}}{2} \\sin 2\\omega t \\sin \\theta $\n\np_R = Av*Ai/2*(np.cos(phi) * (1 + np.cos(2 * 2 * np.pi * f0 * t)))\np_X = Av*Ai/2*(np.sin(phi) * (np.sin(2 * 2 * np.pi * f0 * t)))\n\nax2.plot(t, p_R, label = 'Instantaneous Active Power in phase A', linestyle='--', color = 'b')\nax2.plot(t, p_X, label = 'Instantaneous Reactive Power in phase A', linestyle='-.', color = 'r')\n\n#ax2.plot(t, v*i, label = 'Power in phase A', color='g')\nax2.plot(t, p_R+p_X, label = 'Instantaneous Power in phase A', color='g')\n\n\nax2.set_ylabel('Power')\nax2.legend(loc='lower left')\nax2.axis([0, 1/f0, -1500, 1500]);\n\nplt.savefig(\"power_16_0.png\", transparent=True, dpi=300)\n\n\nThe blue line (active power) is always positve and has an average value of \\(\\frac{V_{max}I_{max}}{2}\\cos\\theta\\). If we use RMS values, we get\n\\(P = \\frac{V_{max}}{\\sqrt{2}} \\frac{I_{max}}{\\sqrt{2}} \\cos\\theta\\)\n\\(P = |V||I|\\cos\\theta\\)\nThe average value of the red line (reactive power) is equal to zero.\nThe maximum value of the instantaneous reactive power is \\(\\frac{V_{max}I_{max}}{2} \\sin \\theta\\)\nOr,\n\\(Q = |V||I|\\sin\\theta\\)\n\n\nSo why is it called real power?\n\n\nCode\n\nplt.rc(\"font\", size=20)\nfig, ax = plt.subplots(1,1,figsize = (16,10))\n\nax.axis('off');\n\nimport schemdraw as schem\nimport schemdraw.elements as e\n# schem.use('svg')\n\nd = schem.Drawing()\n\nV1 = d.add( e.SOURCE_SIN, label='$V_{a}$' )\nL1 = d.add( e.LINE, d='right', label='$I_{a}$')\nd.push()\nR = d.add( e.RES, d='down', botlabel='$R$' )\nd.pop()\nd.add( e.LINE, d='right' )\nd.add( e.INDUCTOR2, d='down', botlabel='$L$' )\nd.add( e.LINE, to=V1.start )\nd.add( e.GND )\nd.draw(ax=ax, show=False)\nplt.savefig(\"./schemdraw.png\", dpi=300, transparent=True)\n\n\n\n\nCode\n\nplt.rc(\"font\", size=20)\nfig, ax = plt.subplots(1,1,figsize = (16,10))\n\nsoa =np.array([[0,0,0,5],[0,0,0,10],[0,0,5,0],[0,0,5,5]])\nX,Y,U,V = zip(*soa)\nax = plt.gca()\nax.quiver(X,Y,U,V,angles='xy',scale_units='xy',scale=1)\nax.set_xlim([-1,10])\nax.set_ylim([-1,10])\n\nax.text(5, 0, r'$I_{X}$')\nax.text(0, 5, r'$I_{R}$')\nax.text(5, 5, r'$I_{an}$')\nax.text(0, 10, r'$V_{an}$')\nax.text(0.25, 1, r'$\\theta$')\n\nax.axis('off');\n\nplt.savefig(\"./power_20_0.png\", transparent=True, dpi=300)\n\n\nWe know that \\(\\theta\\) is the phase difference between the Voltage and Current.\n\\(p = \\frac{V_{max}I_{max}}{2} \\cos\\theta (1 + \\cos 2\\omega t) + \\frac{V_{max}I_{max}}{2} \\sin 2\\omega t \\sin \\theta\\)\nThe first term can be rewritten as\n\\(\\frac{V_{max}I_{max}}{2} \\cos\\theta (1 + \\cos 2\\omega t)\\)\n\\(V_{max}I_{max} \\cos\\theta \\cos^2 \\omega t\\)\n\\(V_{max}\\cos \\omega t \\times I_{max}\\cos\\theta\\cos \\omega t\\)\nSimilarly the second term can be rewritten as\n\\(V_{max}\\cos \\omega t \\times I_{max}\\sin \\omega t \\sin\\theta\\)\nFrom the above figure we can see that power can be written as\n\\(p_{active} = v_{a} \\times i_{R}\\)\n\\(p_{reactive} = v_{a} \\times i_{X}\\)\n\n\nSpecial cases\n\\(P\\) or active power or real power is the power that is dissipated in the resistor, in the form of heat energy. \\(Q\\) or reactive power is the power that oscillates between the source and inductor or the capacitor. And \\(\\theta\\) is determined by the nature of the impedance.\nLet’s look at three cases\n\nCase 1 : \\(\\theta\\) is zero\nWhen we assume \\(\\theta\\) is zero, the load is purely resistive\n\n\nCode\n\nf0 = 60 # Hz (frequency)\nphi = 0 # phase shift\n\nAv = 110*np.sqrt(2) # voltage peak\nAi = 5*np.sqrt(2) # current peak\n\nfs = 4000 # steps\nt = np.arange(0.000, 1/f0, 1.0/fs) # plot from 0 to .02 secs\n\nv = Av * np.cos(2 * np.pi * f0 * t + phi)\ni = Ai * np.cos(2 * np.pi * f0 * t )\nfig, axs = plt.subplots(2,1,figsize = (16,10))\n\n\nax1 = axs[0]\n\nax1.axhline(linewidth=0.25, color='black')\nax1.axvline(linewidth=0.25, color='black')\n\nax1.plot(t, v, label = 'Voltage in phase A')\nax1.plot(t, i, label = 'Current in phase A')\nax1.set_ylabel('Voltage and Current')\n\nax1.axis([0, 1/f0, -200, 200]);\nax1.legend(loc='lower left')\n\nax2 = axs[1]\n\nax2.axhline(linewidth=0.25, color='black')\nax2.axvline(linewidth=0.25, color='black')\n\n#$p = \\frac{V_{max}I_{max}}{2} \\cos\\theta (1 + \\cos 2\\omega t)\n#                         + \\frac{V_{max}I_{max}}{2} \\sin 2\\omega t \\sin \\theta $\n\np_R = Av*Ai/2*(np.cos(phi) * (1 + np.cos(2 * 2 * np.pi * f0 * t)))\np_X = Av*Ai/2*(np.sin(phi) * (np.sin(2 * 2 * np.pi * f0 * t)))\n\nax2.plot(t, p_R, label = 'Instantaneous Active Power in phase A', linestyle='--', color = 'b')\nax2.plot(t, p_X, label = 'Instantaneous Reactive Power in phase A', linestyle='-.', color = 'r')\n\n#ax2.plot(t, v*i, label = 'Power in phase A', color='g')\nax2.plot(t, p_R+p_X, label = 'Instantaneous Power in phase A', color='g')\n\n\nax2.set_ylabel('Power')\nax2.legend(loc='lower left')\nax2.axis([0, 1/f0, -1500, 1500]);\n\nplt.savefig(\"./power_26_0.png\", dpi=300, transparent=True)\n\n\nThe Instantaneous power in the phase is equal to the active power.\n\n\nCase 2 : \\(\\theta\\) is 90\nWhen \\(\\theta\\) is 90, the load is purely inductive\n\n\nCode\n\nf0 = 60 # Hz (frequency)\nphi = np.pi/2 # phase shift\n\nAv = 110*np.sqrt(2) # voltage peak\nAi = 5*np.sqrt(2) # current peak\n\nfs = 4000 # steps\nt = np.arange(0.000, 1/f0, 1.0/fs) # plot from 0 to .02 secs\n\nv = Av * np.cos(2 * np.pi * f0 * t + phi)\ni = Ai * np.cos(2 * np.pi * f0 * t )\nfig, axs = plt.subplots(2,1,figsize = (16,10))\n\nax1 = axs[0]\n\nax1.axhline(linewidth=0.25, color='black')\nax1.axvline(linewidth=0.25, color='black')\n\nax1.plot(t, v, label = 'Voltage in phase A')\nax1.plot(t, i, label = 'Current in phase A')\nax1.set_ylabel('Voltage and Current')\n\nax1.axis([0, 1/f0, -200, 200]);\nax1.legend(loc='upper left')\n\nax2 = axs[1]\n\nax2.axhline(linewidth=0.25, color='black')\nax2.axvline(linewidth=0.25, color='black')\n\n#$p = \\frac{V_{max}I_{max}}{2} \\cos\\theta (1 + \\cos 2\\omega t)\n#                         + \\frac{V_{max}I_{max}}{2} \\sin 2\\omega t \\sin \\theta$\n\np_R = Av*Ai/2*(np.cos(phi) * (1 + np.cos(2 * 2 * np.pi * f0 * t)))\np_X = Av*Ai/2*(np.sin(phi) * (np.sin(2 * 2 * np.pi * f0 * t)))\n\nax2.plot(t, p_R, label = 'Instantaneous Active Power in phase A', linestyle='--', color = 'b')\nax2.plot(t, p_X, label = 'Instantaneous Reactive Power in phase A', linestyle='-.', color = 'r')\n\n#ax2.plot(t, v*i, label = 'Power in phase A', color='g')\nax2.plot(t, p_R+p_X, label = 'Instantaneous Power in phase A', color='g')\n\n\nax2.set_ylabel('Power')\nax2.legend(loc='upper left')\nax2.axis([0, 1/f0, -1500, 1500]);\n\nplt.savefig(\"./power_30_0.png\", dpi=300, transparent=True)\n\n\nThe Instantaneous power in the phase is equal to the reactive power. The power oscillates between the source and the inductive circuit.\n\n\nCase 3 : \\(\\theta\\) is -90\nWhen \\(\\theta\\) is -90, the load is purely capacitive\n\n\nCode\n\nf0 = 60 # Hz (frequency)\nphi = -np.pi/2 # phase shift\n\nAv = 110*np.sqrt(2) # voltage peak\nAi = 5*np.sqrt(2) # current peak\n\nfs = 4000 # steps\nt = np.arange(0.000, 1/f0, 1.0/fs) # plot from 0 to .02 secs\n\nv = Av * np.cos(2 * np.pi * f0 * t + phi)\ni = Ai * np.cos(2 * np.pi * f0 * t )\nfig, axs = plt.subplots(2,1,figsize = (16,10))\n\nax1 = axs[0]\n\nax1.axhline(linewidth=0.25, color='black')\nax1.axvline(linewidth=0.25, color='black')\n\nax1.plot(t, v, label = 'Voltage in phase A')\nax1.plot(t, i, label = 'Current in phase A')\nax1.set_ylabel('Voltage and Current')\n\nax1.axis([0, 1/f0, -200, 200]);\nax1.legend(loc='upper left')\n\nax2 = axs[1]\n\nax2.axhline(linewidth=0.25, color='black')\nax2.axvline(linewidth=0.25, color='black')\n\n#$p = \\frac{V_{max}I_{max}}{2} \\cos\\theta (1 + \\cos 2\\omega t)\n#                         + \\frac{V_{max}I_{max}}{2} \\sin 2\\omega t \\sin \\theta$\n\np_R = Av*Ai/2*(np.cos(phi) * (1 + np.cos(2 * 2 * np.pi * f0 * t)))\np_X = Av*Ai/2*(np.sin(phi) * (np.sin(2 * 2 * np.pi * f0 * t)))\n\nax2.plot(t, p_R, label = 'Instantaneous Active Power in phase A', linestyle='--', color = 'b')\nax2.plot(t, p_X, label = 'Instantaneous Reactive Power in phase A', linestyle='-.', color = 'r')\n\n#ax2.plot(t, v*i, label = 'Power in phase A', color='g')\nax2.plot(t, p_R+p_X, label = 'Instantaneous Power in phase A', color='g')\n\n\nax2.set_ylabel('Power')\nax2.legend(loc='upper left')\nax2.axis([0, 1/f0, -1500, 1500]);\n\nplt.savefig(\"./power_34_0.png\", dpi=300, transparent=True)\n\n\nIn a purely capacitive circuit, power oscillates between the source and electric field associated with the capacitor.\n\n\n\nExpression for complex power\nWe know from Euler’s identity that, for any real number x\n\\(e^{jx} = \\cos x +  j\\sin x\\)\nThis means, we can write the above equations as :\n\\(\\cos\\theta = \\operatorname{Re}\\{ e^{j \\theta} \\}\\)\n\\(v = 155.563491861 \\cos(\\omega t + \\theta)\\)\n\\(v = 110 \\operatorname{Re}\\{ \\sqrt{2} e^{j (\\omega t + \\theta)}\\}\\)\n\\(v = 110 \\operatorname{Re}\\{ \\sqrt{2} e^{ j\\theta} e^{j \\omega t} \\}\\)\nSimilarly,\n\\(i = 5 \\operatorname{Re}\\{ \\sqrt{2} e^{j \\omega t} \\}\\)\nHence \\(V\\) can be written as,\n\\(V = |V| \\angle \\theta_{v}\\)\n\\(I = |I| \\angle \\theta_{i}\\)\n\\(VI^* = |V||I|\\angle \\theta_{v} - \\theta_{i}\\)\n\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2015,\n  author = {Krishnamurthy, Dheepak},\n  title = {Active, Reactive and Apparent Power},\n  date = {2015-04-30},\n  url = {https://kdheepak.com/blog/active-reactive-and-apparent-power/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Active, reactive and apparent power,” Apr.\n30, 2015. https://kdheepak.com/blog/active-reactive-and-apparent-power/."
  },
  {
    "objectID": "blog/julia-workflow-tips-and-tricks/index.html",
    "href": "blog/julia-workflow-tips-and-tricks/index.html",
    "title": "Julia Workflow Tips and Tricks",
    "section": "",
    "text": "Julia is a high-performance, dynamic programming language designed for technical computing and data science. The language offers a flexible and expressive syntax, and also delivers the performance benefits of compiled languages like C++. Like Python, Julia also offers an interactive REPL (Read-Eval-Print Loop) environment for real-time data exploration and rapid prototyping.\nIf you are fairly new to Julia, here are a few things you might want to know to improve your developer experience.\n\nstartup.jl\nEvery time you start Julia, it looks for a file named startup.jl in a config directory.\n\n\n\nOperating System\nstartup.jl Location\n\n\n\n\nWindows\nC:\\Users\\USERNAME\\.julia\\config\\startup.jl\n\n\nmacOS\n/Users/USERNAME/.julia/config/startup.jl\n\n\nLinux\n/home/USERNAME/.julia/config/startup.jl\n\n\n\nThis file is executed before the REPL starts, allowing you to customize your Julia environment.\nFor example, if you added the following code to your startup.jl, it would ensure that Revise, OhMyREPL and BenchmarkTools are always installed whenever you start Julia.\n# Setup OhMyREPL and Revise\nimport Pkg\nlet\n  pkgs = [\"Revise\", \"OhMyREPL\", \"BenchmarkTools\"]\n  for pkg in pkgs\n    if Base.find_package(pkg) === nothing\n      Pkg.add(pkg)\n    end\n  end\nend\n\n\n\n\n\n\nWhen adding packages in Julia, they are added by default to what’s known as the global environment. While these packages can be readily used within the Julia REPL, they won’t be available for import within Julia packages.\nFor those aiming to ensure reproducibility in code execution — both for themselves and others — it’s essential to use dedicated, per-project local environments. This approach ensures that the same set of package versions are always used.\nPersonally, I reserve the global environment for packages that enhance my development workflow, such as Revise, BenchmarkTools, and OhMyREPL.\n\n\n\nThis thread on the JuliaLang Discourse has some neat examples of things you may want to add to your startup.jl.\nIf you wish to go one step further, you can create a Julia package called Startup.jl, place it anywhere on your computer and load it in startup.jl using the following code:\nif Base.isinteractive()\n  push!(LOAD_PATH, joinpath(ENV[\"HOME\"], \"gitrepos\", \"Startup.jl\"))\n  using Startup\nend\nThe advantage of this approach is that the contents of Startup.jl can be precompiled and your Julia REPL starts up very quickly.\nWith the Startup.jl package approach, your root environment can be empty and you can still use functionality exposed by Startup.jl:\n\n\n\n\n\n\n\nUsing Startup.jl to load BenchmarkTools with an empty root environment.\n\n\n\n\n\n\n\n\nYou can use julia --startup-file=no to not execute the contents for startup.jl, i.e. get a clean Julia REPL.\n\n\n\n\n\nOhMyREPL\nOhMyREPL.jl is a package that provides syntax highlighting, bracket highlighting, rainbow brackets, and more for the Julia REPL. Once installed, it can enhance your REPL experience dramatically, making it more visually appealing and easier to work with.\n\n\n\n\n\n\n\n\n\n\n\n\nRevise.jl\nRevise.jl is a game-changer for Julia development. It automatically reloads modified source files without restarting the Julia session. This makes iterative development much smoother.\nOnce set up, any changes you make to your code files are immediately available in your active Julia session.\nRevise can track changes in single files if you include them using includet:\n\n\n\n\n\nIf you want Revise to track changes in a package you are developing locally, simply run using Revise before you load the package for the first time.\n\n\n\n\n\n\nIf you use VSCode and start a REPL using the Julia: Start REPL command, Revise is automatically loaded by default.\n\n\n\n\n\n\n\n\nSee Revise’s documentation for how to set this up to happen automatically all the time by adding setup code to your startup.jl file.\nOne of the issues with Revise is that it cannot deal with changes in struct. Let’s say I wanted to make a change like this:\n  struct Foo\n-   x::Int\n+   y::Float64\n  end\nRevise throws an error and warning because it is unable to make that change; and Revise changes the color of the Julia prompt:\n\n\n\n\n\nThere are some workarounds for this but the easiest thing to do is to restart the Julia session after you are make changes to any struct.\n\n\n\n\n\n\nWatch for the Revise warnings and errors and keep an eye out for the color of your Julia REPL prompt. If you see the prompt in yellow, you know Revise wasn’t able to track a change you made.\n\n\n\n\n\nInfiltrator\nInfiltrator.jl is a debugger and code inspection tool for Julia. It allows you to insert breakpoints in your code and inspect the current scope’s variables.\nWhen Julia hits the @infiltrate macro, it’ll pause execution, and drop you into a Julia REPL that allows you to inspect the current scope.\n\n\n\n\n\nYou can also use @infiltrate i == 3 and that’ll drop you into a Julia REPL only in the third iteration of the for loop.\nWhen using @infiltrate conditional_expression with Revise, you can jump into any function at any point of the execution to inspect values of variables in a Julia REPL. You can even load additional packages like DataFrames or Plots to explore your data in the scope of any function interactively while debugging. This combination can make for a versatile and productive debugging experience.\n\n\nPrecompileTools\nPrecompileTools is a package that allows package developers to specify which parts of the package should be precompiled. From the official documentation:\n\nPrecompileTools can force precompilation of specific workloads; particularly with Julia 1.9 and higher, the precompiled code can be saved to disk, so that it doesn’t need to be compiled freshly in each Julia session. You can use PrecompileTools as a package developer, to reduce the latency experienced by users of your package for typical workloads; you can also use PrecompileTools as a user, creating custom Startup package(s) that precompile workloads important for your work.\n\nPrecompiling Julia packages can significantly reduce the loading times for you and your users, providing a much more responsive experience.\nFor example, I have the following in my Startup.jl to reduce Julia REPL startup times:\nmodule Startup\n\nusing PrecompileTools\n\n@setup_workload begin\n  @compile_workload begin\n    using Pkg\n    using Revise\n    using OhMyREPL\n  end\nend\n\nend\n\n\nBenchmarkTools\nBenchmarkTools.jl is an essential package to help quantify the performance of your code. It provides utilities to benchmark code snippets, giving insights into their run-time and memory allocations.\nThe @benchmark macro runs a number of trials of a function and plots a histogram in the terminal showing what kind of performance you are getting out of that particular function. As an example, we can compare the performance of a custom sum function without and with the @simd macro:\n\n\n\n\n\n\n\n\n\n\n\n\nCthulhu\nDelving deep into Julia’s compiler optimizations and type inference can sometimes feel daunting and that’s where Cthulhu.jl comes to the rescue. Cthulhu is an interactive terminal user interface that is an alternative to @code_lowered and @code_typed, and allows developers to interactively descend into the lowered and optimized versions of their Julia code, making it easier to debug performance issues and understand how Julia’s JIT compiler optimizes code.\nFor example, if we examine the mysum function from the previous section, we can see that a is being inferred as a Int64 or a Float64, i.e. Union{Float64, Int64}.\n\n\n\n\n\nIn this particular case, by changing a = 0 to a = 0.0, we can make the code generated by Julia more optimized, i.e. a is now being inferred only as a Float64.\n\n\n\n\n\nHere’s the benchmark results with a = 0 (left) and a = 0.0 (right), with the latter being almost 3 times faster.\n\n\n\n\n\n\n\n\n\n\n\n\nReTest and InlineTests\nJulia has a built-in package Test for unit testing. This requires writing tests in a separate folder, i.e. in test/runtests.jl; and these tests are run in a separate process when you can Pkg.test(). There’s also no out of the box solution to run a subset of tests.\nUsing InlineTests allows you to write tests directly in your source files, and you can also choose to run a subset of tests. If you choose to run it with retest, you can make changes that are tracked with Revise, allowing faster iteration using a test driven development workflow.\nIn the screenshot below, I have shown an example of having a @testset as part of the package itself, i.e. in ./src/layout.jl:\n\n\n\nInlineTests allows co-locating tests along with the implementation.\n\n\nYou’ll also notice from the screenshot that ReTest contains a function called retest which allows running a subset of tests by passing in a pattern as the second argument.\n\n\n\n\n\n\nYou may also be interested in TestEnv.jl, which lets you activate the test environment of a given package.\n\n\n\n\n\nPkgTemplates\nJulia has a built-in way to create a new package, using Pkg.generate(). However, PkgTemplates.jl is a package that makes the process of creating new packages as easy and customizable at the same time. PkgTemplates can generate new Julia packages with numerous features out-of-the-box that follow best practices (e.g. GitHub Actions, Documenter, etc).\nCreating a new package then becomes as straightforward as running the following:\nusing PkgTemplates\nt = Template()\nt(\"MyNewPackage\")\nYou can customize the template too:\nusing PkgTemplates\nt = Template(\n  dir = \"~/gitrepos/\",\n  julia = v\"1.10\",\n  plugins = [\n    Git(; ssh = true, manifest = true),\n    GitHubActions(),\n    Documenter{GitHubActions}(),\n  ],\n)\nt(\"MyNewPackage\")\n\n\nJET\nJET.jl is a powerful static code analyzer tailored for the Julia programming language. JET serves as a linter – identifying potential runtime errors without actually executing the code. It works by simulating the Julia compiler’s type inference process.\nfib(n) = n ≤ 2 ? n : fib(n-1) + fib(n-2)\n\nfib(1000)   # =&gt; never terminates\nfib(m)      # =&gt; ERROR: UndefVarError: `m` not defined\nfib(\"1000\") # =&gt; ERROR: MethodError: no method matching isless(::String, ::Int64)\nYou can see the other kinds of warnings that JET can produce in the demo.jl file.\n\n\nLiveServer\nLiveServer.jl allows developers to serve static sites locally and refreshes your browser automatically as you edit source files. You can even use it to view or update documentation.\n# serve contents of any folder\nLiveServer.serve(; dir, launch_browser = true)\n\n# serve documentation of any package\nPkg.activate(\"./docs\")\nLiveServer.servedocs(; launch_browser = true)\n\n\nComonicon\nComonicon.jl is a rich tool for building command-line applications. Comonicon allows you to easily convert your Julia scripts and packages into command-line tools with minimal effort.\nUsing Comonicon, you can:\n\nParse command-line arguments\nGenerate help messages\nHandle subcommands\nAnd more\n\nFor example, I’ve added into my Startup.jl/src/jl.jl some helper subcommands that I can access from that command line in any folder.\n\n\n\nConclusion\nJulia’s ecosystem is filled with tools designed to optimize the developer’s workflow, making it easier and more efficient to write, test, and deploy code.\n\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2023,\n  author = {Krishnamurthy, Dheepak},\n  title = {Julia {Workflow} {Tips} and {Tricks}},\n  date = {2023-08-13},\n  url = {https://kdheepak.com/blog/julia-workflow-tips-and-tricks/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Julia Workflow Tips and Tricks,” Aug. 13,\n2023. https://kdheepak.com/blog/julia-workflow-tips-and-tricks/."
  },
  {
    "objectID": "blog/writing-papers-with-markdown/index.html",
    "href": "blog/writing-papers-with-markdown/index.html",
    "title": "Writing technical papers with Markdown and Pandoc",
    "section": "",
    "text": "You can view this post in the following formats, thanks to Pandoc!\nI’ve had several people ask me about Markdown for academic writing recently. I figured I’d use this post to write about my workflow and my resources on this topic."
  },
  {
    "objectID": "blog/writing-papers-with-markdown/index.html#why-markdown",
    "href": "blog/writing-papers-with-markdown/index.html#why-markdown",
    "title": "Writing technical papers with Markdown and Pandoc",
    "section": "Why Markdown",
    "text": "Why Markdown\n\nAcademic writing involves:\n\nwriting down ideas as they come along and documenting results (notetaking),\nexperimenting with these ideas (simulations and data analysis),\nand finally presenting them effectively (scientific paper).\n\n\nThere’s a lot to manage over the length of time this entire process spans. Academics require a set of tools that aid in making this process, i.e. the effective communication of ideas, as seamless as possible. There are currently two popular options for academics seeking to write technical papers - Microsoft Word or \\(\\LaTeX\\).\n\nA word about Word\nMicrosoft Word is ubiquitous when it comes to writing reports. The great thing about Word is that there is almost no barrier to begin writing. You can incrementally build your skill in using this tool as and when you are using it. This is useful since it makes it immediately accessible, thereby decreasing the time and effort spent on learning how to use a software for writing and allowing you to concentrate on the writing itself.\nHowever, I’ve found a few fundamental problems with Microsoft Word. Having a WYSIWYG (What You See Is What You Get) editor is great (even Richard Stallman seems to think so [1]). However, products like Word fail miserably at separating content from formatting. These products impose on the writer their own concept of how a document should be formatted, which I’ve found greatly hinders the writing process. Have you ever experienced a sudden jump in spacing? Or mismatched formatting after a copy and paste from one part of the document to another? Or have indents and bullet points misbehave haphazardly? Word applies these formatting changes seemingly at random! These are all typesetting and formatting processes and these should be applied after the text is completed. These processes should not distract from the task at hand1 - writing!\n1 I understand that there may be more correct ways to go about it, I just don’t want to be thinking about all that while I’m writing.There are other issues as well. Microsoft’s ecosystem comes at a price, literally. Word is proprietary, and Word’s format is a proprietary data format. When you use Word, by storing your work in this proprietary software’s proprietary data format, you tie yourself down to this particular licensed software for the forseeable future. You also make the implicit assumption that everyone you work with has the same software on their computer. Word also does not play well with its counterparts on OSX. With the same content, the document is presented differently depending on which machine you open it on. As far as I know there isn’t even a version for Linux machines. Heck, Microsoft Word does not even play well with previous versions of Microsoft Word. I understand why this issue occurs, considering the complexity in operating systems and software. Backward incompatible software or cross incompatibility are probably inevitable, but as an user, I shouldn’t have to be concerned about this. I shouldn’t have to think about what software or what version of a software my reviewers are using when I’m sending them a document. And speaking of sharing documents, did you know you can end up transferring malware through a Word document? Just think about that for a second. Opening what should be essentially a text file is a security risk for your machine. And some of these viruses (as of the time of this writing) do not even have patches yet [2]. Loads of people have already talked about this and similar issues at some length [3], and have probably done more justice to this topic that I possibly could. With all these issues, it is hard to believe Word is so widely accepted as a standard.\nI think there is a strong case to be made about why you should consider dropping Word for your next paper. In addition to what has been discussed above:\n\n\nWord is slow, and consumes sometimes up to a gig of virtual memory. For what is basically a word processor, that is unnecessary.\nthere is no clean way to permanently save comments or notes, that persist in the final version without affecting how final document looks.\ncollaborating with other people requires foresight and planning.\nthe equation editor is painful to use.\nWord does not work in the workflow for scientific research papers or reports.\n\n\nLet us assume that scientific research papers consists of only 3 steps (if only!) - notetaking, analysis and presentation. Word fails at delivering at all these tasks. Word doesn’t quite work for notetaking. Org mode, Evernote or Onenote are most people’s preferred solution. Word doesn’t fit data analysis requirements as well, with Python, R or Excel being the go-to tools. I personally use Emacs / Vim for notetaking and store them in a git repository and all of my data analysis is done in Jupyter Notebooks. After collecting the required data from an experiment and post-processing it, I can save plots into an image or the data into a table in a particular format programmatically using scripts. Word however, does not allow me to import these images or tables programmatically. If I did somehow manage to contort my workflow and store my data and information in this software, I have absolutely no way of retrieving it. The final presentation/report/paper, information and data will exist confined in this closed source proprietary software. Word just does not fit into an analysis or research workflow. To quote Raymond Hettinger:\n\n\n\n\nRaymond Hettinger\n\n\n\n\n\n\\(\\LaTeX\\) - lah-tekh, lah-tek or lay-tek\n\nEnter \\(\\LaTeX\\).\n\n\\(\\LaTeX\\) is to a book what a set of blueprints is to a building. [4]\n\n\n\\(\\LaTeX\\) is a typesetting system and is frequently used in scientific, technical and mathematical papers. It is infamous for displaying equations in a manner that looks great. Math is beautiful, and it deserves to be presented beautifully.\n\\[\\begin{align}\n\\hskip6em \\nabla \\times \\vec{\\mathbf{B}} -\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} & = \\frac{4\\pi}{c}\\vec{\\mathbf{j}} \\hskip6em \\\\\n\\nabla \\cdot \\vec{\\mathbf{E}} & = 4 \\pi \\rho \\\\\n\\nabla \\times \\vec{\\mathbf{E}}\\, +\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} & = \\vec{\\mathbf{0}} \\\\\n\\nabla \\cdot \\vec{\\mathbf{B}} & = 0\n\\end{align}\\]\n\nEssentially, \\(\\LaTeX\\) is a markup language. Content is written in plain text and can be annotated with commands that describe how certain elements should be displayed.\n\n\nFor example, take a look at the following commands.\n\\textbf{bold}\n\\textit{italic}\nThis markup will format the words passed into these functions as bold and italic respectively.\n\nThere are numerous similar functions for different aspects of formatting. This allows you to concentrate on writing, without worrying about the typesetting until later.\nThe source document that contains the content is a plain text file. This means you can use git to version control the paper. This allows you to track changes and collaborate with others without any additional effort. This also lets you work with your favourite text editor - Vim, Emacs, Atom. There are even TeX specific ones, such as TeXShop and Lyx.\n\\(\\LaTeX\\) is free. Free as in beer and free as in freedom. You can have the confidence that your code and documents can survive possibly forever in its current format. The \\(\\LaTeX\\) community is great and are very helpful towards beginners. There are hundreds of packages that improve upon the functionality that \\(\\LaTeX\\) provides. There are packages like TikZ that let you to create high resolution print quality detailed diagrams, which I’ve seen used even outside a \\(\\LaTeX\\) environment.\nHowever, there is a barrier to entry which one must overcome in order to begin using \\(\\LaTeX\\). Unlike Word, you have to know which commands are used for what markup functionality, not only to know when to use them, but also when not to use them. The biggest problem with \\(\\LaTeX\\) is probably the error messages. Most of the time they are near useless, and sometimes they are even borderline cryptic.\nPersonally, I found learning how to work with \\(\\LaTeX\\) extremely useful. It challenged me to think about the structure of a document, and how I could convey information effectively not just through the final document, but also in the source material2. I also didn’t think it was difficult. Solutions to my initial problems were only a quick Google search away. Tables were frustrating at first, but you get the hang of them over time. Equations are a joy to type in \\(\\LaTeX\\). And the final product looks great!\n2 Having the ability to leave comments to myself or fellow collaborators that are filtered out of the final presentation can be very useful.That said, the markup language is a bit too heavy for notetaking, and not particularly readable. For example, take a look at the syntax for a creating a section, a subsection and list of items with some bold and italic elements.\n\n\\section{Section Name}\nThis is text in the section\n\\subsection{Sub Section Name}\nThe following is a list in this subsection\n\\begin{enumerate}\n  \\item The first \\textbf{bold} item\n  \\begin{enumerate}\n    \\item Nested item 1\n    \\item Nested item 2\n  \\end{enumerate}\n  \\item The second \\textit{italicized} item\n  \\item The third etc \\ldots\n\\end{enumerate}\n\nWith good IDEs for \\(\\LaTeX\\) this isn’t as bad as it looks, although they still hinder the writer’s flow. Over time and with experience, one can become proficient in \\(\\LaTeX\\). And once you invest the time to learn \\(\\LaTeX\\) I can’t think of any reason why you would go back to Word. But it is likely that beginners will have a hard time getting started. So, if you cannot afford to experiment with \\(\\LaTeX\\), are you resigned to Word? I don’t think so. Markdown to the rescue!\n\n\nMarkdown\n\nMarkdown is a very lightweight easy-to-read easy-to-write plain text markup language. The same example as before looks like this in Markdown.\n# Section Name\n\nThis is text in the section\n\n## Sub Section Name\n\nThe following is a list in this subsection\n\n- The first **bold** item\n  - Nested item 1\n  - Nested item 2\n- The second _italicized_ item\n- The third etc ...\n\nMuch better! It’s a lot easier to read and a lot easier to write than \\(\\LaTeX\\). Markdown, developed by John Gruber, was principally written for the web, to avoid the heavy markup of HTML. Tools have been developed to convert Markdown to HTML, PDF and even DOCX.\nThe main advantages of Markdown:\n\n\nEasy: the syntax is simple\nFast: the simple formatting saves time and speeds up workflows of writers\nPortable: documents are cross-platform by nature\nFlexible: HTML, PDF, DOCX, TEX are all supported output formats\n\n\nMarkdown is awesome at a set of things, and a much better alternative than Word or \\(\\LaTeX\\) for those specific set of things. Take for example this table Table 2.\n\n\n\n\n\n\n\n\nRight\nLeft\nCenter\nDefault\n\n\n\n\n12\n12\n12\n12\n\n\n123\n123\n123\n123\n\n\n1\n1\n1\n1\n\n\n\n\n\nTable 1: Demonstration of simple table syntax.\n\n\n\n\n\nThis is what the same table looks like in \\(\\LaTeX\\).\n\\begin{longtable}[c]{@{}rlcl@{}}\n\\caption{Demonstration of simple table syntax.}\n\\tabularnewline\n\\toprule\nRight & Left & Center & Default\\tabularnewline\n\\midrule\n\\endfirsthead\n\\toprule\nRight & Left & Center & Default\\tabularnewline\n\\midrule\n\\endhead\n12 & 12 & 12 & 12\\tabularnewline\n123 & 123 & 123 & 123\\tabularnewline\n1 & 1 & 1 & 1\\tabularnewline\n\\bottomrule\n\\end{longtable}\n\n\nHowever, Markdown does not allow for the level of detailed customization that you can achieve using \\(\\LaTeX\\). Even a moderately complex table such as the one below is not supported (currently) by any form of Markdown.\n\n\n\nTabular \\(\\LaTeX\\) example [5]\n\n\n\n\nMarkdown may not be as powerful as \\(\\LaTeX\\), but its easy to write easy to read syntax, open standard format and a strong backing from the community make it a ideal candidate for writing. It has the advantages of Word (ease of use) and \\(\\LaTeX\\) (excellent typesetting) for output formats. Also there is the added advantage of only having to write in Markdown once, and have documents generated in a multitude of formats later - PDF, DOCX, slides, HTML etc.\n\nI hope that by now you are convinced that Markdown is a great tool for writing. In the following sections we will look at how to convert a Markdown file to other formats, and what are some potential limitations and how you might overcome them."
  },
  {
    "objectID": "blog/writing-papers-with-markdown/index.html#pandoc---a-swiss-army-knife",
    "href": "blog/writing-papers-with-markdown/index.html#pandoc---a-swiss-army-knife",
    "title": "Writing technical papers with Markdown and Pandoc",
    "section": "Pandoc - A swiss army knife",
    "text": "Pandoc - A swiss army knife\nPandoc is a software tool by John Macfarlane written in Haskell that can convert a document from just about any format to just about any other format. And works really well.\n\nInput formats:\n\nnative (native Haskell)\njson (JSON version of native AST)\nmarkdown (pandoc’s extended Markdown)\nmarkdown_strict (original unextended Markdown)\nmarkdown_phpextra (PHP Markdown Extra)\nmarkdown_github (GitHub-Flavored Markdown)\ncommonmark (CommonMark Markdown)\ntextile (Textile)\nrst (reStructuredText)\nhtml (HTML)\ndocbook (DocBook)\nt2t (txt2tags)\ndocx (docx)\nodt (ODT)\nepub (EPUB)\nopml (OPML)\norg (Emacs Org mode)\nmediawiki (MediaWiki markup)\ntwiki (TWiki markup)\nhaddock (Haddock markup)\nor latex (\\(\\LaTeX\\))\n\nOutput formats:\n\nnative (native Haskell)\njson (JSON version of native AST)\nplain (plain text)\nmarkdown (pandoc’s extended Markdown)\nmarkdown_strict (original unextended Markdown)\nmarkdown_phpextra (PHP Markdown Extra)\nmarkdown_github (GitHub-Flavored Markdown)\ncommonmark (CommonMark Markdown)\nrst (reStructuredText)\nhtml (XHTML)\nhtml5 (HTML5)\nlatex (\\(\\LaTeX\\))\nbeamer (\\(\\LaTeX\\) beamer slide show)\ncontext (ConTeXt)\nman (groff man)\nmediawiki (MediaWiki markup)\ndokuwiki (DokuWiki markup)\ntextile (Textile)\norg (Emacs Org mode)\ntexinfo (GNU Texinfo)\nopml (OPML)\ndocbook (DocBook)\nopendocument (OpenDocument)\nodt (OpenOffice text document)\ndocx (Word docx)\nhaddock (Haddock markup)\nrtf (rich text format)\nepub (EPUB v2 book)\nepub3 (EPUB v3)\nfb2 (FictionBook2 e-book)\nasciidoc (AsciiDoc)\nicml (InDesign ICML)\nslidy (Slidy HTML and javascript slide show)\nslideous (Slideous HTML and javascript slide show)\ndzslides (DZSlides HTML5 + javascript slide show)\nrevealjs (reveal.js HTML5 + javascript slide show)\ns5 (S5 HTML and javascript slide show)\n\nWith 21 input formats and 37 output formats, it doesn’t take long to guess that there’s no way they implemented a converter for each input to output format. Pandoc employs a Abstract Syntax Tree (AST) structure as an intermediate stage to convert one format to another3. This is the reason Pandoc is great at converting from and to a wide variety of formats, and why it is potentially easy to support new formats as well. Pandoc is also constantly under development. We can use Pandoc to convert a markdown file, to a PDF, HTML or DOCX file for a technical paper.\n3 Understanding this will be important if you want to write your own custom filters. We will talk about that in the next section.4 If you install Pandoc from a package, pandoc-citeproc should come pre-installed. However, if you want to use a package manager such as brew, you may need to install pandoc-citeproc separately as well. Just run brew install pandoc pandoc-citeproc.First off, you will need pandoc. You can get the latest version from their GitHub page [6]. You may want pandoc-citeproc as well4. You will also need \\(\\LaTeX\\). I’ve found that the following python packages are useful too.\n\npandoc-attributes\npandoc-eqnos\npandoc-fignos\npandoc-tablenos\npandocfilters\n\nYou can run pip install &lt;package-name&gt;. Alternatively you can create a virtual environment using conda with a suitable environment file [7], which is the approach I recommend [8].\nThere are several people that have shared their complete workflow along with all their resources [9]–[12]. Mine is available on GitHub [13] as well. While someone else’s workflow will work for you, I encourage you to start from scratch and craft your own. That way you will figure out why each item has been added into a workflow, and if that works for you. You will also know what to do if (when?) it breaks, and how to fix it. Feel free to go through other people’s Makefiles to see what they have done, and how you can improve your own.\n\nSyntax\n\nHeadings\n# Section\n\n## Sub Section\n\n### Sub Sub Section\nExample\nI’ve not provided an example here to avoid messing with this document’s headings.\n\n\nText\nThis text is in _italic_.\nThis text is in **bold**.\nAnd this text is in **_bold-italic_**\nExample\nThis text is in italic. This text is in bold. And this text is in bold-italic.\n\n\nLink\n[Text](https://google.com)\nExample\nText\n\n\nImages\n![Caption](images/markdown.png)\nExample\n\n\n\nCaption\n\n\n\n\nLists\n- item\n- item\n  - item\n- item\n\n1. item\n1. item\n   1. item\n1. item\nExample\n\nitem\nitem\n\nitem\n\nitem\n\n\nitem\nitem\n\nitem\n\nitem\n\n\n\nQuotes\n&gt; Research is what I'm doing\n&gt; when I don't know what I'm doing.\n\n- Wernher von Braun\nExample\n\nResearch is what I’m doing when I don’t know what I’m doing.\n\n\nWernher von Braun\n\n\n\nCode\n`inline code`\n\n    Tab space\n    for code block\nExample\ninline code\nTab space\nfor code block\n\n\nTables\n\n  Right     Left     Center     Default\n-------     ------ ----------   -------\n     12     12        12            12\n    123     123       123          123\n      1     1          1             1\n\n:  Demonstration of simple table syntax. {#tbl-table}\n\nExample\n\n\n\n\n\n\nRight\nLeft\nCenter\nDefault\n\n\n\n\n12\n12\n12\n12\n\n\n123\n123\n123\n123\n\n\n1\n1\n1\n1\n\n\n\n\n\nTable 2: Demonstration of simple table syntax.\n\n\n\n\n\n\nCitations\nThis is a very important fact [@citation_example]\nExample\nThis is a very important fact [14]\n\n\nStrikethrough\n~~Strikethrough text~~\nExample\nStrikethrough text\n\n\nMark\n==Mark text==\nExample\nMark text\n\n\nEquations\nInline equations $\\pi$\n\nBlock equations\n\n$$\n\\pi\n$$ {#eq-pi}\n$$\nExample\nInline equations \\(\\pi\\)\nBlock equations\n\\[\n\\pi\n\\tag{1}\\]\n\n\n\nPandoc conversion\nOnce you have typed all the content, you can use the pandoc command to convert the document into the format you want. Pandoc uses the output filename extension to figure out what the output file format should be. Btw, Pandoc is a command line tool only. You will have to use the command line for any conversion.\n\nTo generate a PDF file:\npandoc document.md -o document.pdf\nIt is as simple as that! To generate a HTML file:\npandoc document.md -o document.html\n\nCheck out pandoc’s README [15]. It has loads of examples and you might be able to find what you are looking for by straight up picking an example or by making a minor tweak to it.\n\nWith PDF files, you can specify the following additional arguments:\n\n--latex-engine=pdflatex: latex engine\n--latex-template=latex.template: latex template file\n\n\nThis allows you to define a \\(\\LaTeX\\) template to use. By default, pandoc uses a built in template.\n\nWith html files, you can specify the following arguments:\n\n--template=html.template: html template file\n--css=cssfile.css: css file\n\n\n\nWith docx files unfortunately, you cannot specify a template (at least not at the time of writing this post) [16]. You can however, specify a reference-docx:\n\n--reference-docx=reference.docx: docx for reference styles\n\n\n\nThese following arguments allow you to use citations when writing academic papers.\n\n--filter pandoc-citeproc: filter to parse citations\n--csl=CSLFILE: define a citation style sheet e.g. ieee.csl\n--bibliography=BIBFILE: look for citations from a bibliography\n\n\nPandoc will find the appropriate citation from a .bib file and add it to your Bibliography according to the style sheet you specify. It works great and I’ve had no issues with it so far.\n\nAlso, I’ve found the following filters useful.\n\n--filter pandoc-eqnos: equation numbers\n--filter pandoc-fignos: figure numbers\n--filter pandoc-tablenos: table numbers\n\n\nThey allow you reference a figure, equation or table. For example, Equation {Equation 1} is an example of a block equation in Markdown.\nA paper may be generated using a command as shown below:\npandoc -s -S --latex-engine=pdflatex \\\n  --template=./templates/ieee-latex.template \\\n  --filter pandoc-fignos \\\n  --filter pandoc-eqnos \\\n  --filter pandoc-tablenos \\\n  --filter pandoc-citeproc \\\n  --csl=./styles/ieee.csl \\\n  --bibliography=./bib/research.bib \\\n  -o ieee-paper.pdf paper.md\nAs you can see, there are a lot of arguments that can be passed to Pandoc. I’ve found using Makefiles for recording your past commands and documenting these instructions extremely useful. I’ve barely scratched the surface with what you can do with Pandoc. I’ll update this post with more features if I think they are relevant to writing a paper using Markdown."
  },
  {
    "objectID": "blog/writing-papers-with-markdown/index.html#downside-to-using-markdown",
    "href": "blog/writing-papers-with-markdown/index.html#downside-to-using-markdown",
    "title": "Writing technical papers with Markdown and Pandoc",
    "section": "Downside to using Markdown?",
    "text": "Downside to using Markdown?\n\nPandoc allows you to define \\(\\LaTeX\\) blocks in a markdown file, which are passed straight through to \\(\\LaTeX\\) without any change. \\(\\LaTeX\\) then processes it and renders it correctly. Which means if you want to generate a PDF, you are in luck! You have the entire arsenal of \\(\\LaTeX\\) commands at your disposal.\nHowever, when converting to html or docx files, pandoc will choose to remove \\(\\LaTeX\\) blocks. There is a workaround for equations. You can specify --mathjax and force Pandoc to attempt to render \\(\\LaTeX\\) as mathjax, which works most of the time. This page for example was generated entirely from a markdown file, rendered to html using pandoc. I have found a few cases where mathjax did not work correctly for me, so there may be some experimenting involved. With DOCX, you can pass in the --mathjax flag, and Pandoc will convert it to Word’s equation editor format, but this seems to work only with the certain set of the markdown equation syntax that pandoc supports. In the case of tables, it is Markdown or bust. You have to format it in the Markdown table format that pandoc supports if you want a HTML or DOCX output.\n\nThe good news is that anything you do in \\(\\LaTeX\\), you can do in Markdown and render as a PDF. This includes equations, tables, citations, references, images, lists, tikz diagrams etc. The bad news is that if you do decide to use \\(\\LaTeX\\) syntax, you are still writing \\(\\LaTeX\\) (although a lot less of it), and you have lost complete HTML and DOCX conversion capability.\n\nAlso, Markdown / Pandoc does not support splitting the source document across multiple files. This was not as much a deal breaker for me, since the markup is pretty light and having it all in a single file is fine for a technical paper. However, for large reports extending hundreds of pages this may be a issue. There are workarounds for this (see next section), however they may be a bit of a hassle."
  },
  {
    "objectID": "blog/writing-papers-with-markdown/index.html#bending-markdown-to-your-will",
    "href": "blog/writing-papers-with-markdown/index.html#bending-markdown-to-your-will",
    "title": "Writing technical papers with Markdown and Pandoc",
    "section": "Bending Markdown to your will",
    "text": "Bending Markdown to your will\nFortunately, some of the problems I mentioned in the previous section can be solved using an excellent feature of Pandoc - filters!\n\nYou can write your own custom filter, and you can use it to parse certain blocks in a custom fashion. For most people this will not be necessary since Pandoc is feature complete, and when a specific need arises6 the community has often provided a custom filter that does the job. But if you come across a case where pandoc does not do what you want it to do, you can write a filter for it.\n\n6 The features for references for figures, equations and tables are all python pandocfilters packages written by the one person [17]. There is a two year long standing discussion on cross references [18] that the curious reader is referred to.There is a python package called pandocfilters that allows you to walk the AST and parse specific formats or keys. It is very powerful, and can offer unique ways to expand on pandoc’s functionality. I wrote a pandocfilter [7] to embed a jupyter notebook using a liquid tag style syntax, which I currently use for this post.\n\nIn theory, you can write a filter that finds a \\(\\LaTeX\\) table block in Markdown, converts it to an image and renders that in Word. Or you can write a filter that inputs other files during run time, allowing you to split your source document.\nMy understanding is that the Python pandocfilters package is limited in scope. Alternatively, if you choose to, you can yield Pandoc’s complete power by writing a Haskell filter instead of using Python, but then you will be writing Haskell ;)\nI would tag the custom filters functionality I’ve described in this section as an advanced feature. I’ve not had to write my own filter for writing a technical paper (so far). Know that they are there when you need them."
  },
  {
    "objectID": "blog/writing-papers-with-markdown/index.html#tldr",
    "href": "blog/writing-papers-with-markdown/index.html#tldr",
    "title": "Writing technical papers with Markdown and Pandoc",
    "section": "TLDR",
    "text": "TLDR\n\nYou can write a complete paper in Markdown and render it in PDF without any issues. I recommend using Markdown and Pandoc for writing over \\(\\LaTeX\\) and Word because of its ease of use and its flexibility and versatility. And if you think Markdown is not cutting it for you, you can always convert it to a Word document or a TEX file and continue using your usual workflow. Check out my attempt at describing the relationship between complexity of document and difficulty in implementing when using Word, \\(\\LaTeX\\) and Markdown in Figure 1.\n\n\n\n\n\n\n\nFigure 1: Comparing Word, \\(\\LaTeX\\) and Markdown\n\n\n\n\nIf you have gotten this far in the post, congratulations! This was a lot to take in, and I hope I shed some light on the potential for Markdown as an academic and technical writing tool. Let me know if you have any questions in the comments below.\n\n\n$$"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Blog",
    "section": "",
    "text": "Date\n\n\n\nTitle\n\n\n\nReading Time\n\n\n\n\n\n\n\n\nJun 7, 2025\n\n\nibis - a better pandas\n\n\n2 min\n\n\n\n\n\n\nJan 5, 2025\n\n\nBuilding Dashboards using Param and Panel in Python\n\n\n11 min\n\n\n\n\n\n\nDec 16, 2024\n\n\nJupyter prelude\n\n\n3 min\n\n\n\n\n\n\nNov 30, 2024\n\n\nPower Lines with ibis\n\n\n1 min\n\n\n\n\n\n\nAug 25, 2024\n\n\nPandas vs Polars vs ibis\n\n\n1 min\n\n\n\n\n\n\nMay 19, 2024\n\n\nThe Basic Building blocks of Ratatui - Part 5\n\n\n1 min\n\n\n\n\n\n\nMay 18, 2024\n\n\nThe Basic Building blocks of Ratatui - Part 4\n\n\n1 min\n\n\n\n\n\n\nMay 17, 2024\n\n\nThe Basic Building blocks of Ratatui - Part 3\n\n\n2 min\n\n\n\n\n\n\nMay 16, 2024\n\n\nThe Basic Building blocks of Ratatui - Part 2\n\n\n1 min\n\n\n\n\n\n\nMay 15, 2024\n\n\nThe Basic Building blocks of Ratatui - Part 1\n\n\n5 min\n\n\n\n\n\n\nApr 21, 2024\n\n\nEffect of type inference on performance in Julia\n\n\n4 min\n\n\n\n\n\n\nNov 20, 2023\n\n\nPublishing documents with Quarto\n\n\n4 min\n\n\n\n\n\n\nOct 23, 2023\n\n\nGraphing CGP Grey’s Rock-Paper-Scissors YouTube Game\n\n\n2 min\n\n\n\n\n\n\nAug 13, 2023\n\n\nJulia Workflow Tips and Tricks\n\n\n9 min\n\n\n\n\n\n\nApr 29, 2023\n\n\nVisualizing roads in the cities of Canada\n\n\n1 min\n\n\n\n\n\n\nApr 27, 2023\n\n\nUsing Makie with Quarto\n\n\n1 min\n\n\n\n\n\n\nFeb 26, 2023\n\n\nUnderstanding variables and mutability in Julia\n\n\n37 min\n\n\n\n\n\n\nAug 3, 2022\n\n\nInstalling homebrew in an alternative location\n\n\n1 min\n\n\n\n\n\n\nJul 29, 2022\n\n\nProgrammers’ preferences for package names\n\n\n2 min\n\n\n\n\n\n\nJul 12, 2022\n\n\nQuickstart guide to using a terminal\n\n\n8 min\n\n\n\n\n\n\nMar 31, 2022\n\n\nPandoc lua filter for alerts\n\n\n1 min\n\n\n\n\n\n\nMar 20, 2022\n\n\nCompiling firmware for the Moonlander keyboard with QMK\n\n\n1 min\n\n\n\n\n\n\nFeb 19, 2022\n\n\nSveltekit tailwind starter\n\n\n1 min\n\n\n\n\n\n\nFeb 19, 2022\n\n\nUsing Tikz with Pandoc\n\n\n1 min\n\n\n\n\n\n\nFeb 18, 2022\n\n\nUsing MermaidJS with Pandoc\n\n\n1 min\n\n\n\n\n\n\nFeb 15, 2022\n\n\nReinstall Xcode command line developer tools\n\n\n1 min\n\n\n\n\n\n\nAug 6, 2021\n\n\nLoading a Rust library as a Lua module in Neovim\n\n\n8 min\n\n\n\n\n\n\nDec 25, 2020\n\n\nAdvent of Code 2020 Retrospective\n\n\n53 min\n\n\n\n\n\n\nSep 19, 2020\n\n\nMy Unicode cheat sheet\n\n\n12 min\n\n\n\n\n\n\nJul 27, 2020\n\n\nUsing pre-commit hooks\n\n\n6 min\n\n\n\n\n\n\nJun 27, 2020\n\n\nThree built-in neovim features\n\n\n3 min\n\n\n\n\n\n\nJun 7, 2020\n\n\nThe egg tower puzzle\n\n\n16 min\n\n\n\n\n\n\nJun 5, 2020\n\n\nDrawing in ASCII\n\n\n5 min\n\n\n\n\n\n\nJun 2, 2020\n\n\nNeovim + LanguageServer.jl\n\n\n2 min\n\n\n\n\n\n\nDec 16, 2016\n\n\nPython 2 vs 3\n\n\n6 min\n\n\n\n\n\n\nOct 9, 2016\n\n\nPelican margin notes with Pandoc\n\n\n8 min\n\n\n\n\n\n\nOct 2, 2016\n\n\nmpld3 networkx d3.js force layout\n\n\n67 min\n\n\n\n\n\n\nMar 28, 2016\n\n\nRaspberry Pi powered LED lamp\n\n\n3 min\n\n\n\n\n\n\nFeb 6, 2016\n\n\nNeovim and Tmux\n\n\n1 min\n\n\n\n\n\n\nDec 25, 2015\n\n\nUsing conda to manage packages\n\n\n2 min\n\n\n\n\n\n\nDec 20, 2015\n\n\nWriting technical papers with Markdown and Pandoc\n\n\n23 min\n\n\n\n\n\n\nDec 5, 2015\n\n\nJupyter Notebook, Reveal.js and Github Pages\n\n\n1 min\n\n\n\n\n\n\nSep 20, 2015\n\n\nSpotify and tmux\n\n\n2 min\n\n\n\n\n\n\nSep 19, 2015\n\n\nChange $PATH inside vim\n\n\n1 min\n\n\n\n\n\n\nAug 28, 2015\n\n\nUninstalling and re-installing Homebrew on OSX\n\n\n1 min\n\n\n\n\n\n\nAug 18, 2015\n\n\nHow to add line numbers for code blocks in Pelican\n\n\n2 min\n\n\n\n\n\n\nJul 27, 2015\n\n\nHow to install gdb on OSX\n\n\n1 min\n\n\n\n\n\n\nJul 27, 2015\n\n\nEmacsclient and tmux split navigation\n\n\n2 min\n\n\n\n\n\n\nJul 26, 2015\n\n\nEmacs workflow — Using Emacs in the terminal\n\n\n4 min\n\n\n\n\n\n\nJul 19, 2015\n\n\nEmacs tips — Close compilation buffer\n\n\n1 min\n\n\n\n\n\n\nJul 18, 2015\n\n\nCreate Emacsclient.app using AppleScript\n\n\n1 min\n\n\n\n\n\n\nJul 13, 2015\n\n\nPatched fonts madness\n\n\n1 min\n\n\n\n\n\n\nJun 2, 2015\n\n\nBetter git log with git ls\n\n\n1 min\n\n\n\n\n\n\nMay 9, 2015\n\n\nVim, tmux and zsh — the productivity trio\n\n\n3 min\n\n\n\n\n\n\nMay 3, 2015\n\n\nHow to set up a Pelican blog with Github pages\n\n\n5 min\n\n\n\n\n\n\nMay 2, 2015\n\n\nFast track to being productive in Vim\n\n\n2 min\n\n\n\n\n\n\nApr 30, 2015\n\n\nActive, reactive and apparent power\n\n\n10 min\n\n\n\n\n\n\nApr 2, 2015\n\n\nMac OSX productivity apps\n\n\n1 min\n\n\n\n\n\n\nMar 22, 2015\n\n\nMac OSX Tweaks\n\n\n3 min\n\n\n\n\n\n\nDec 13, 2014\n\n\nTasker and Google Maps\n\n\n4 min\n\n\n\n\n\n\nDec 13, 2014\n\n\nGeektool and Desktop Widgets in OSX\n\n\n1 min\n\n\n\n\n\n\nDec 13, 2014\n\n\nRobotics\n\n\n1 min\n\n\n\n\n\n\nDec 13, 2014\n\n\nTasker projects\n\n\n1 min\n\n\n\n\n\n\nDec 11, 2014\n\n\nHome monitoring system\n\n\n1 min\n\n\n\n\n\n\nJan 5, 2014\n\n\nWelcome to my blog\n\n\n1 min\n\n\n\n\n\n\nNo matching items\nReuseCC BY-SA 4.0"
  },
  {
    "objectID": "blog/the-basic-building-blocks-of-ratatui-part-2/index.html",
    "href": "blog/the-basic-building-blocks-of-ratatui-part-2/index.html",
    "title": "The Basic Building blocks of Ratatui - Part 2",
    "section": "",
    "text": "Ratatui is a crate for building terminal user interfaces in Rust.\nIn this post, we’ll discuss the Rect and Layout primitives of ratatui.\n\n\nCode\n:dep ratatui = \"0.26.2\"\n:dep ratatui-macros = \"0.4.0\"\n\nfn span_to_html(s: ratatui::text::Span) -&gt; String{\n    let mut html = String::new();\n    html.push_str(\"&lt;span style=\\\"\");\n\n    // Set foreground color\n    if let Some(color) = &s.style.fg {\n        html.push_str(&format!(\"color: {};\", color));\n    }\n\n    // Set background color\n    if let Some(color) = &s.style.bg {\n        html.push_str(&format!(\"background-color: {};\", color));\n    }\n\n    // Add modifiers\n    match s.style.add_modifier {\n        ratatui::style::Modifier::BOLD =&gt; html.push_str(\"font-weight: bold;\"),\n        ratatui::style::Modifier::ITALIC =&gt; html.push_str(\"font-style: italic;\"),\n        ratatui::style::Modifier::UNDERLINED =&gt; html.push_str(\"text-decoration: underline;\"),\n        _ =&gt; {}\n    }\n    html.push_str(\"\\\"&gt;\");\n    html.push_str(&s.content);\n    html.push_str(\"&lt;/span&gt;\");\n    html\n}\n\nfn buffer_to_html(buf: &ratatui::buffer::Buffer) -&gt; String {\n    fn escape_special_html_characters(text: &str) -&gt; String {\n        text.replace(\"&\", \"&amp;\")\n            .replace(\"&lt;\", \"&lt;\")\n            .replace(\"&gt;\", \"&gt;\")\n            .replace(\"\\\"\", \"&quot;\")\n            .replace(\"'\", \"&#39;\")\n    }\n\n    let mut html = String::from(\"&lt;pre&gt;&lt;code&gt;\");\n\n    let w = buf.area.width;\n    let h = buf.area.height;\n\n    for y in 0..h {\n        for x in 0..w {\n            let s = buf.get(x, y).symbol();\n            \n            let escaped = escape_special_html_characters(s); \n\n            let style = buf.get(x, y).style();\n\n            let span = ratatui::text::Span::styled(s, style);\n            \n            html.push_str(&span_to_html(span));\n        }\n        html.push('\\n');\n    }\n\n    html.push_str(\"&lt;/code&gt;&lt;/pre&gt;\");\n\n    html \n}\n    \nfn show_html&lt;D&gt;(content: D) where D: std::fmt::Display {\n    println!(r#\"EVCXR_BEGIN_CONTENT text/html\n&lt;div style=\"display: flex; justify-content:start; gap: 1em; margin: 1em\"&gt;\n{}\n&lt;/div&gt;\nEVCXR_END_CONTENT\"#, content);\n}\n\n\n\nLayout primitives\nWe already saw that Rect is one of the primitives for rendering a widget.\nWe can create a Rect using Rect::new(x, y, width, height):\n\nuse ratatui::widgets::Widget;\n\nlet (x, y, width, height) = (0, 0, 50, 5); \nlet area = ratatui::layout::Rect::new(x, y, width, height);\nlet mut buf = ratatui::buffer::Buffer::empty(area);\nratatui::widgets::Block::bordered().render(area, &mut buf);\n\nshow_html(buffer_to_html(&buf))\n\n\n┌────────────────────────────────────────────────┐\n│                                                │\n│                                                │\n│                                                │\n└────────────────────────────────────────────────┘\n\n\n\n\nYou can create inner Rects by using the Rect::inner method:\n\nlet mut buf = ratatui::buffer::Buffer::empty(area);\n\nlet (horizontal, vertical) = (5, 1);\nlet inner_area = area.inner(&ratatui::layout::Margin::new(horizontal, vertical));\n\nratatui::widgets::Block::bordered().render(inner_area, &mut buf);\n\nshow_html(buffer_to_html(&buf))\n\n\n                                                  \n     ┌──────────────────────────────────────┐     \n     │                                      │     \n     └──────────────────────────────────────┘     \n                                                  \n\n\n\n\nRatatui also has a layout solver using the cassowary algorithm.\n\nuse ratatui::layout::{Layout, Constraint};\n\nlet [first, second] = ratatui::layout::Layout::horizontal([Constraint::Length(10), Constraint::Length(10)]).areas(area);\n\nlet mut buf = ratatui::buffer::Buffer::empty(area);\nratatui::widgets::Block::bordered().title(\"first\").render(first, &mut buf);\nratatui::widgets::Block::bordered().title(\"second\").render(second, &mut buf);\n\nshow_html(buffer_to_html(&buf))\n\n\n┌first───┐┌second──┐                              \n│        ││        │                              \n│        ││        │                              \n│        ││        │                              \n└────────┘└────────┘                              \n\n\n\n\nratatui-macros has a couple of macros to make some of this boilerplate simpler.\n\nlet [first, second] = ratatui::layout::Layout::horizontal([Constraint::Length(10), Constraint::Length(10)]).areas(area);\n// OR\nlet [first, second] = ratatui_macros::horizontal![==10, ==10].areas(area);\n\nHere’s an example of combining a vertical and horizontal layout:\n\nuse ratatui_macros::{horizontal, vertical};\n\nlet (x, y, width, height) = (0, 0, 50, 6); \nlet area = ratatui::layout::Rect::new(x, y, width, height);\n\nlet mut buf = ratatui::buffer::Buffer::empty(area);\n\nlet [top, middle, bottom] = vertical![*=1, *=1, *=1].areas(area);\n\nlet [first, second] = horizontal![==10, ==10].areas(top);\nratatui::widgets::Block::bordered().title(\"first\").render(first, &mut buf);\nratatui::widgets::Block::bordered().title(\"second\").render(second, &mut buf);\n\nlet [first, second] = horizontal![==10, ==10].flex(ratatui::layout::Flex::Center).areas(middle);\nratatui::widgets::Block::bordered().title(\"first\").render(first, &mut buf);\nratatui::widgets::Block::bordered().title(\"second\").render(second, &mut buf);\n\nlet [first, second] = horizontal![==10, ==10].flex(ratatui::layout::Flex::End).areas(bottom);\nratatui::widgets::Block::bordered().title(\"first\").render(first, &mut buf);\nratatui::widgets::Block::bordered().title(\"second\").render(second, &mut buf);\n\nshow_html(buffer_to_html(&buf))\n\n\n┌first───┐┌second──┐                              \n└────────┘└────────┘                              \n               ┌first───┐┌second──┐               \n               └────────┘└────────┘               \n                              ┌first───┐┌second──┐\n                              └────────┘└────────┘\n\n\n\n\n\n\nPopular layouts\n\nCenter a block\n10 px wide\n\nuse ratatui_macros::{horizontal, vertical};\n\nlet (x, y, width, height) = (0, 0, 50, 6); \nlet area = ratatui::layout::Rect::new(x, y, width, height);\n\nlet mut buf = ratatui::buffer::Buffer::empty(area);\n\nlet [middle] = horizontal![==10].flex(ratatui::layout::Flex::Center).areas(area);\nratatui::widgets::Block::bordered().title(\"center\").render(middle, &mut buf);\n\nshow_html(buffer_to_html(&buf))\n\n\n                    ┌center──┐                    \n                    │        │                    \n                    │        │                    \n                    │        │                    \n                    │        │                    \n                    └────────┘                    \n\n\n\n\n50% wide\n\nuse ratatui_macros::{horizontal, vertical};\n\nlet (x, y, width, height) = (0, 0, 50, 6); \nlet area = ratatui::layout::Rect::new(x, y, width, height);\n\nlet mut buf = ratatui::buffer::Buffer::empty(area);\n\nlet [middle] = horizontal![==50%].flex(ratatui::layout::Flex::Center).areas(area);\nratatui::widgets::Block::bordered().title(\"center\").render(middle, &mut buf);\n\nshow_html(buffer_to_html(&buf))\n\n\n             ┌center─────────────────┐            \n             │                       │            \n             │                       │            \n             │                       │            \n             │                       │            \n             └───────────────────────┘            \n\n\n\n\n\n\nSidebar\nMinMax(20px, 50%)\n\nuse ratatui_macros::{horizontal, vertical};\n\nlet (x, y, width, height) = (0, 0, 50, 6); \nlet area = ratatui::layout::Rect::new(x, y, width, height);\n\nlet mut buf = ratatui::buffer::Buffer::empty(area);\n\nlet [sidebar, main] = horizontal![&lt;= (area.width / 2), *=1].areas(area);\n\nratatui::widgets::Block::bordered().title(\"sidebar\").render(sidebar, &mut buf);\nratatui::widgets::Block::bordered().title(\"main\").render(main, &mut buf);\n\nshow_html(buffer_to_html(&buf))\n\n\n┌sidebar────────────────┐┌main───────────────────┐\n│                       ││                       │\n│                       ││                       │\n│                       ││                       │\n│                       ││                       │\n└───────────────────────┘└───────────────────────┘\n\n\n\n\n\nuse ratatui_macros::{horizontal, vertical};\n\nlet (x, y, width, height) = (0, 0, 30, 6); \nlet area = ratatui::layout::Rect::new(x, y, width, height);\n\nlet mut buf = ratatui::buffer::Buffer::empty(area);\n\nlet [sidebar, main] = horizontal![&gt;=20, *=1].areas(area);\n\nratatui::widgets::Block::bordered().title(\"sidebar\").render(sidebar, &mut buf);\nratatui::widgets::Block::bordered().title(\"main\").render(main, &mut buf);\n\nshow_html(buffer_to_html(&buf))\n\n\n┌sidebar───────────┐┌main────┐\n│                  ││        │\n│                  ││        │\n│                  ││        │\n│                  ││        │\n└──────────────────┘└────────┘\n\n\n\n\nYou can combine this behavior to make dynamic layouts:\n\nlet [sidebar, main] = if area.width &gt; 30 {\n    horizontal![&lt;= (area.width / 2), *=1].areas(area)\n} else {\n    horizontal![&gt;=20, *=1].areas(area)\n};\n\nOr even:\n\nlet [sidebar, main] = horizontal![&lt;= (area.width / 2), *=1].areas(area);\n\nlet [sidebar, main] = if sidebar.width &lt; 20 {\n    horizontal![&gt;=20, *=1].areas(area)    \n} else {\n    [sidebar, main]\n};\n\n\n\n\nConclusion\nIn the next post, we’ll examine how text primitives work.\n\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2024,\n  author = {Krishnamurthy, Dheepak},\n  title = {The {Basic} {Building} Blocks of {Ratatui} - {Part} 2},\n  date = {2024-05-16},\n  url = {https://kdheepak.com/blog/the-basic-building-blocks-of-ratatui-part-2/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “The Basic Building blocks of Ratatui - Part\n2,” May 16, 2024. https://kdheepak.com/blog/the-basic-building-blocks-of-ratatui-part-2/."
  },
  {
    "objectID": "blog/using-tikz-with-pandoc/index.html",
    "href": "blog/using-tikz-with-pandoc/index.html",
    "title": "Using Tikz with Pandoc",
    "section": "",
    "text": "This is a demo of integrating Tikz as part of the blog.\n\\begin{tikzpicture}\n\n\\def \\n {5}\n\\def \\radius {3cm}\n\\def \\margin {8} % margin in angles, depends on the radius\n\n\\foreach \\s in {1,...,\\n}\n{\n  \\node[draw, circle] at ({360/\\n * (\\s - 1)}:\\radius) {$\\s$};\n  \\draw[-&gt;, &gt;=latex] ({360/\\n * (\\s - 1)+\\margin}:\\radius)\n    arc ({360/\\n * (\\s - 1)+\\margin}:{360/\\n * (\\s)-\\margin}:\\radius);\n}\n\\end{tikzpicture}\n\n\nCode\nusing Markdown\nusing TikzPictures\ntp = TikzPicture(L\"\"\"\n\\def \\n {5}\n\\def \\radius {3cm}\n\\def \\margin {8} % margin in angles, depends on the radius\n\n\\foreach \\s in {1,...,\\n}\n{\n  \\node[draw, circle] at ({360/\\n * (\\s - 1)}:\\radius) {$\\s$};\n  \\draw[-&gt;, &gt;=latex] ({360/\\n * (\\s - 1)+\\margin}:\\radius)\n    arc ({360/\\n * (\\s - 1)+\\margin}:{360/\\n * (\\s)-\\margin}:\\radius);\n}\n\"\"\")\nsave(SVG(\"test\"), tp)\nmd\"\"\"![](./test.svg)\"\"\"\n\n\n\n[ Info: Precompiling TikzPictures [37f6aa50-8035-52d0-81c2-5a1d08754b2d]\n\n[ Info: Precompiling Poppler_jll [9c32591e-4766-534b-9725-b71a8799265b]\n\n┌ Warning: test.svg already exists, overwriting!\n\n└ @ TikzPictures ~/.julia/packages/TikzPictures/9WzZq/src/TikzPictures.jl:432\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2022,\n  author = {Krishnamurthy, Dheepak},\n  title = {Using {Tikz} with {Pandoc}},\n  date = {2022-02-19},\n  url = {https://kdheepak.com/blog/using-tikz-with-pandoc/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Using Tikz with Pandoc,” Feb. 19, 2022. https://kdheepak.com/blog/using-tikz-with-pandoc/."
  },
  {
    "objectID": "blog/mac-osx-productivity-apps/index.html",
    "href": "blog/mac-osx-productivity-apps/index.html",
    "title": "Mac OSX productivity apps",
    "section": "",
    "text": "Alfred\n\nhttps://www.alfredapp.com/\n\nBetterTouchTool\n\nhttps://bettertouchtool.net/BetterTouchTool.zip\n\nThe Unarchiver\n\nhttps://apps.apple.com/au/app/the-unarchiver/id425424353?mt=12\n\nGeektool\n\nhttps://kdheepak.com/blog/geektool-and-desktop-widgets-in-osx/\n\nhttps://projects.tynsoe.org/en/geektool/\n\nRetinizer\n\nhttps://retinizer.mikelpr.com/\n\nf.lux\n\nhttps://justgetflux.com/\n\nMacVim\n\nhttps://github.com/macvim-dev/macvim\n\nHazel\n\nhttps://www.noodlesoft.com/\n\nFlycut\n\nhttps://apps.apple.com/us/app/flycut-clipboard-manager/id442160987?mt=12\n\nClipMenu\n\nhttps://www.clipmenu.com/\n\nXtraFinder\n\nhttps://www.trankynam.com/xtrafinder/\n\nDisk Inventory X\n\nhttps://www.derlien.com/\n\nHomebrew\n\n$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2015,\n  author = {Krishnamurthy, Dheepak},\n  title = {Mac {OSX} Productivity Apps},\n  date = {2015-04-02},\n  url = {https://kdheepak.com/blog/mac-osx-productivity-apps/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Mac OSX productivity apps,” Apr. 02, 2015.\nhttps://kdheepak.com/blog/mac-osx-productivity-apps/."
  },
  {
    "objectID": "blog/compiling-firmware-for-the-moonlander-keyboard-with-qmk/index.html",
    "href": "blog/compiling-firmware-for-the-moonlander-keyboard-with-qmk/index.html",
    "title": "Compiling firmware for the Moonlander keyboard with QMK",
    "section": "",
    "text": "First, clone the qmk_firmware GitHub repo, and make a fork to maintain your custom keyboard firmware. This is what my remotes look like:\ncd qmk_firmware\ngit remote -v\n\norigin  git@github.com:kdheepak/qmk_firmware.git (fetch)\norigin  git@github.com:kdheepak/qmk_firmware.git (push)\nqmk git@github.com:qmk/qmk_firmware.git (fetch)\nqmk git@github.com:qmk/qmk_firmware.git (push)\n\nThen, compile the firmware using the following from the root of the repository:\nmake moonlander:kdheepak:flash\nThe keymaps are located here:\nls keyboards/moonlander/keymaps/kdheepak\n\nPermissions Size Date Modified Git Name\n.rw-r--r--   250 21 Mar 03:54   -- config.h\n.rw-r--r--  5.7k 21 Mar 03:54   -- keymap.c\n.rw-r--r--   292 21 Mar 03:54   -- rules.mk\n\nModify keymap.c based on your preferences.\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2022,\n  author = {Krishnamurthy, Dheepak},\n  title = {Compiling Firmware for the {Moonlander} Keyboard with {QMK}},\n  date = {2022-03-20},\n  url = {https://kdheepak.com/blog/compiling-firmware-for-the-moonlander-keyboard-with-qmk/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Compiling firmware for the Moonlander keyboard\nwith QMK,” Mar. 20, 2022. https://kdheepak.com/blog/compiling-firmware-for-the-moonlander-keyboard-with-qmk/."
  },
  {
    "objectID": "blog/how-to-set-up-a-pelican-blog-with-github-pages/index.html",
    "href": "blog/how-to-set-up-a-pelican-blog-with-github-pages/index.html",
    "title": "How to set up a Pelican blog with Github pages",
    "section": "",
    "text": "I’ve been quite vocal about the benefits of blogging using Markdown, and using a static page generator with Pandoc instead of the conventional CMS. But a lot of people I’ve spoken to have expressed their doubts about the simplicity of the process. I figured if I could fit it in one blog post I could claim it were simple, right?"
  },
  {
    "objectID": "blog/how-to-set-up-a-pelican-blog-with-github-pages/index.html#markdown",
    "href": "blog/how-to-set-up-a-pelican-blog-with-github-pages/index.html#markdown",
    "title": "How to set up a Pelican blog with Github pages",
    "section": "Markdown",
    "text": "Markdown\nAdvantages\n\nEasy to learn - It has almost no syntax. You can learn how to format like a pro in half an hour.\nFast - You don’t have to deal with HTML tags or WYSIWYG editors.\nPlatform independent - You can edit your blog posts from anywhere, be it on your PC, tablet or mobile device. You can even use your favourite text editor. (which is obviously VIM, right?)\nMarkdown handles all of the following beautifully:\n\nlists\nlinks\nheaders\nblockquotes\nbold and emphasized text\nblockquotes\ncode blocks\n\n\nThis is what this post looks like in Markdown.\n\nIt really is that simple."
  },
  {
    "objectID": "blog/how-to-set-up-a-pelican-blog-with-github-pages/index.html#static-pages",
    "href": "blog/how-to-set-up-a-pelican-blog-with-github-pages/index.html#static-pages",
    "title": "How to set up a Pelican blog with Github pages",
    "section": "Static pages",
    "text": "Static pages\nAdvantages\n\nFast - It loads extremely quickly.\nPortable - You can easily move from a server space and deploy it elsewhere.\nCheaper - It is cost effective for a small website / personal blogs.\n\nDisadvantages\n\nTypically required web development experience to make changes to website.\nComplicated and a lot of work when you have a lot of pages e.g. a personal blog."
  },
  {
    "objectID": "blog/how-to-set-up-a-pelican-blog-with-github-pages/index.html#enter-github-pages-and-pelican",
    "href": "blog/how-to-set-up-a-pelican-blog-with-github-pages/index.html#enter-github-pages-and-pelican",
    "title": "How to set up a Pelican blog with Github pages",
    "section": "Enter Github pages and Pelican",
    "text": "Enter Github pages and Pelican\nGithub pages takes away from all the disadvantages of static pages, and adds a few pros as well. Version control was a big plus for me. And static site generators like Jekyll and Pelican make it extremely easy to create web content without any actual web development. I choose Pelican because it was Python based, and it seemed to have a good selection of themes."
  },
  {
    "objectID": "blog/how-to-set-up-a-pelican-blog-with-github-pages/index.html#install-required-packages",
    "href": "blog/how-to-set-up-a-pelican-blog-with-github-pages/index.html#install-required-packages",
    "title": "How to set up a Pelican blog with Github pages",
    "section": "Install required packages",
    "text": "Install required packages\npip install pelican\npip install markdown\npip install ghp-import\nghp-import is a cli that allows you to easily push your changes to your github repository\nThese are optional packages to install that may come in handy later\npip install Pillow beautifulsoup4 cssmin cssprefixer cssutils pretty six smartypants typogrify webassets"
  },
  {
    "objectID": "blog/how-to-set-up-a-pelican-blog-with-github-pages/index.html#create-a-github-account-and-a-user-or-project-page",
    "href": "blog/how-to-set-up-a-pelican-blog-with-github-pages/index.html#create-a-github-account-and-a-user-or-project-page",
    "title": "How to set up a Pelican blog with Github pages",
    "section": "Create a Github account and a User or Project page",
    "text": "Create a Github account and a User or Project page\nGithub pages has instructions on how to create a User or Project page, and will in fact walk you through the process. If you create a User page, your website will be live at $GHUSERNAME.github.io and a Project page will go up at $GHUSERNAME.github.io/$PROJECTNAME. The rest of this blog assumes you want to create a User page."
  },
  {
    "objectID": "blog/how-to-set-up-a-pelican-blog-with-github-pages/index.html#create-a-directory-for-your-website",
    "href": "blog/how-to-set-up-a-pelican-blog-with-github-pages/index.html#create-a-directory-for-your-website",
    "title": "How to set up a Pelican blog with Github pages",
    "section": "Create a directory for your website",
    "text": "Create a directory for your website\nAssuming $GHUSERNAME is your github username, run the following commands. You can rename the website folder to anything you want.\ngit clone https://github.com/$GHUSERNAME/$GHUSERNAME.github.io/ website\ncd website"
  },
  {
    "objectID": "blog/how-to-set-up-a-pelican-blog-with-github-pages/index.html#run-pelican-quickstart",
    "href": "blog/how-to-set-up-a-pelican-blog-with-github-pages/index.html#run-pelican-quickstart",
    "title": "How to set up a Pelican blog with Github pages",
    "section": "Run Pelican quickstart",
    "text": "Run Pelican quickstart\npelican-quickstart\nThis is what you might get. Answer all the questions\n➜  website  pelican-quickstart\n\nWelcome to pelican-quickstart v3.5.0.\n\nThis script will help you create a new Pelican-based website.\n\nPlease answer the following questions so this script can generate the files\nneeded by Pelican.\n\n\n&gt; Where do you want to create your new web site? [.]\n&gt; What will be the title of this web site? Dheepak Krishnamurthy\n&gt; Who will be the author of this web site? Dheepak Krishnamurthy\n&gt; What will be the default language of this web site? [en]\n&gt; Do you want to specify a URL prefix? e.g., https://example.com   (Y/n) Y\n&gt; What is your URL prefix? (see above example; no trailing slash) https://kdheepak.com\n&gt; Do you want to enable article pagination? (Y/n) Y\n&gt; How many articles per page do you want? [10]\n&gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) Y\n&gt; Do you want an auto-reload & simpleHTTP script to assist with theme and site development? (Y/n) Y\n&gt; Do you want to upload your website using FTP? (y/N) N\n&gt; Do you want to upload your website using SSH? (y/N) N\n&gt; Do you want to upload your website using Dropbox? (y/N) N\n&gt; Do you want to upload your website using S3? (y/N) N\n&gt; Do you want to upload your website using Rackspace Cloud Files? (y/N) N\n&gt; Do you want to upload your website using GitHub Pages? (y/N) Y\n&gt; Is this your personal page (username.github.io)? (y/N) Y\nDone. Your new project is available at /path/to/website\n\n➜  website"
  },
  {
    "objectID": "blog/how-to-set-up-a-pelican-blog-with-github-pages/index.html#content-of-your-blog",
    "href": "blog/how-to-set-up-a-pelican-blog-with-github-pages/index.html#content-of-your-blog",
    "title": "How to set up a Pelican blog with Github pages",
    "section": "Content of your blog",
    "text": "Content of your blog\nCreate an sample post.\nvim content/example.md\nType in the following and save it.\nTitle: My First Post\nDate: 2015-11-23 10:20\nCategory: Example\n\nHello world.\nType the following to convert all your markdown or ReST posts to HTML.\nmake html\nYou can also type the following to serve a local version of your site to view the output of your hardwork\nmake serve\nThis will be visible at localhost:8000 by default."
  },
  {
    "objectID": "blog/how-to-set-up-a-pelican-blog-with-github-pages/index.html#push-your-content-to-github",
    "href": "blog/how-to-set-up-a-pelican-blog-with-github-pages/index.html#push-your-content-to-github",
    "title": "How to set up a Pelican blog with Github pages",
    "section": "Push your content to Github",
    "text": "Push your content to Github\nIf you installed everything correctly, you can type the following to push your website to your Github repository. You need to have ghp-import installed for this to work.\nmake github\nYou are done! If you have any questions regarding any of this, you can shoot me questions in the comments below."
  },
  {
    "objectID": "blog/tasker-projects/index.html",
    "href": "blog/tasker-projects/index.html",
    "title": "Tasker projects",
    "section": "",
    "text": "This page contains information about the profile that uses Tasker to get contextual information from Google Calendar and react based on it."
  },
  {
    "objectID": "blog/tasker-projects/index.html#google-calendar",
    "href": "blog/tasker-projects/index.html#google-calendar",
    "title": "Tasker projects",
    "section": "",
    "text": "This page contains information about the profile that uses Tasker to get contextual information from Google Calendar and react based on it."
  },
  {
    "objectID": "blog/tasker-projects/index.html#tell-me-a-joke",
    "href": "blog/tasker-projects/index.html#tell-me-a-joke",
    "title": "Tasker projects",
    "section": "Tell me a Joke",
    "text": "Tell me a Joke\nThis profile reads a random joke from here"
  },
  {
    "objectID": "blog/tasker-projects/index.html#whatsapp-client",
    "href": "blog/tasker-projects/index.html#whatsapp-client",
    "title": "Tasker projects",
    "section": "WhatsApp Client",
    "text": "WhatsApp Client\nThis profile interacts with WhatsApp and allows you to send messages using your desktop\n\n\n\nTasker"
  },
  {
    "objectID": "blog/publish-documents-with-quarto/index.html",
    "href": "blog/publish-documents-with-quarto/index.html",
    "title": "Publishing documents with Quarto",
    "section": "",
    "text": "8 years ago, I made this diagram tongue-in-cheek to show my colleagues that it was possible to write academic papers with Pandoc Markdown.\n\nSince then, there’s been a lot of improvements to the Pandoc Markdown workflow for writing papers. Pandoc went from 1.15.2 to 3.1.9, adding an extraordinary number of features. Of note, panflute was created as a better and more fun way to write Python Pandoc filters. And Pandoc embedded lua filters to allow writing pandoc filters directly in lua to prevent any marshalling of data.\n\n\n\n\n\n\nI am continuously amazed and deeply impressed by the remarkable feat of software engineering that Pandoc represents, a sentiment echoed by everyone I know who has incorporated Pandoc into their workflow.\n\n\n\nYet, Pandoc has not achieved widespread popularity in the academic sphere.\nCollaborative academic writing often gravitates towards using Microsoft Word with OneDrive support. WYSIWYG is a powerful paradigm and provides immediate ease of use. Word’s robust commenting and review tools are second to none. Outside of Word, OverLeaf or ShareLaTeX seem to have the most mindshare. I reckon when people choose \\(\\LaTeX\\), they tend to do so because it is a safe bet. As a markup language, it is older than I am. That means there are resources online to address pretty much any problem you will come across1 , there are templates everywhere for all kinds of publications, and text editor support is high quality.\n1 Pour one out if you’ve tasked a graduate student to figure out why your paper isn’t compiling.I still believe Pandoc is a phenomenal piece of software for writing academic papers (or any technical content for that matter). Being able to version control through git, and to produce outputs in diverse formats like PDF, Word, and HTML, adds immense value for me. But is it really going to be easier for everyone I’m collaborating with?\nEnter Quarto, a potential game-changer in persuading researchers to transition from Word or \\(\\LaTeX\\).\nIf this is the first time you’ve heard of Quarto, you are probably not alone. Quarto is a nascent open-source publishing system from the creators of RMarkdown and RStudio that builds upon Pandoc and Jupyter.\nQuarto can embed Jupyter Notebook cells straight into the publication output. This allows for seamless integration of research and data analysis into the publication process. As most scientific research increasingly relies on interactive environments like RStudio and Jupyter Notebooks, Quarto’s ability to incorporate this work into publishing workflows is immensely productive. And since it builds on top of Pandoc, Quarto supports extensions that are basically Lua filters to enhance the output. Quarto’s VSCode extension makes it easier for even non-technical contributors to collaborate on writing.\nFor technical publications where you want to show results inline, I believe using Quarto is a no-brainer. If you are already using Jupyter Notebooks, using Quarto is incredibly seamless.  But even without using any of Quarto’s computational features, I think it is a compelling alternative to many static site generation tools (e.g. Docsaurus, mkdocs, mdbook, hugo, sphinx, etc) as a means to develop high quality technical documentation. Over the past year, every report, paper, presentation, and tutorial I’ve created has used Quarto in one way or another. At the time of writing this post, Quarto is even the backbone of my blog.If you are interested in a static site generator written in Julia with a similar feature set, you should check out Franklin.jl.\nQuarto isn’t without its fair share of issues, and I do think for highly custom layouts or professional typesetting, directly working in \\(\\LaTeX\\) is probably easier. But for such a young project, it shows real promise (in my humble opinion) and is worthy of giving it a shot.\nGiven that I’ve been using Quarto extensively for a while, I figured it was appropriate to revise the earlier diagram to reflect my experience:\n\n\nCode\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nALPHA = 0.25\n\nwith plt.xkcd():\n    plt.rcParams.update({'font.size': 22})\n    x = np.arange(0, 1, 0.1)\n    word_y = 40 * x**2 + 2\n    latex_y = 2 * x**2 + 5\n    markdown_y = np.array([3, 3.1, 3.2, 1.5, 1.6, 3, 3.7, 7.5, 7.75, 8, 100])\n    markdown_x = np.array([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.61, 0.7, 0.8, 0.9])\n    quarto_y = 22.5 * (x-0.3)**2 + 0.75\n    fig, axs = plt.subplots(1, 1, figsize=(16, 10))\n    ax = axs\n\n    segment_positions = [0.25, 0.5, 0.75]\n\n    segment_labels = ['Basic Reports OR\\nStandard Documents', 'Papers with Figures\\nbased on Results', 'Per-Page Layout\\nOR Web Content', 'Professional\\nBook Layout']\n\n    range_starts = [0, 0.25, 0.5, 0.75]\n    range_ends = [0.25, 0.5, 0.75, 0.9]\n\n    y_pos_annotations = -0.15\n    y_pos_arrows = -0.1\n\n    for start, end, label in zip(range_starts, range_ends, segment_labels):\n        ax.annotate('',\n                    xy=(start, y_pos_arrows), xycoords=('data', 'axes fraction'),\n                    xytext=(end, y_pos_arrows), textcoords=('data', 'axes fraction'),\n                    arrowprops=dict(arrowstyle='&lt;-&gt;', color='black'))\n\n    for i, position in enumerate(segment_positions):\n        ax.axvline(x=position, color='black', linestyle='-.', linewidth=0.5, alpha = 0.5)\n\n        ax.annotate(segment_labels[i],\n                    xy=(position, 0), xycoords=('data', 'axes fraction'),\n                    xytext=(-125, -50), textcoords='offset points',\n                    ha='center', va='baseline', alpha = 0.5)\n\n    ax.annotate(segment_labels[-1],\n                xy=(1, 0), xycoords=('axes fraction', 'axes fraction'),\n                xytext=(-75, -50), textcoords='offset points',\n                ha='center', va='baseline', alpha = 0.5)\n\n    word_line, = ax.plot(x, word_y, label=\"Word\")\n    latex_line, = ax.plot(x, latex_y, label=\"LaTeX\")\n    markdown_line, = ax.plot(markdown_x, markdown_y, alpha=ALPHA, label=\"Markdown\")\n    quarto_line, = ax.plot(x, quarto_y, linewidth=5, label=\"Quarto\")\n\n    ax.legend(handles=[word_line, latex_line, markdown_line, quarto_line], loc=\"upper left\")\n\n    ax.set_ylim(0, 10)\n    ax.set_xlim(0, 0.9)\n\n    arrowprops = dict(arrowstyle=\"-&gt;\", alpha=ALPHA)\n    ax.annotate(\"WHEN YOU START\\n USING MAKEFILES\", xy=(0.2, 3.3), arrowprops=arrowprops, xytext=(0.025, 3.75), alpha = ALPHA/5)\n    ax.annotate(\"WHEN YOU START USING\\n UNSUPPORTED SYNTAX\", xy=(0.6, 3.7), arrowprops=arrowprops, xytext=(0.30, 4), alpha = ALPHA/5)\n    ax.annotate(\"WHEN YOU DISCOVER\\n    PANDOCFILTERS\", xy=(0.61, 7.5), arrowprops=arrowprops, xytext=(0.375, 6.25), alpha = ALPHA/5)\n    ax.annotate(\"WHEN YOU REALIZE YOU \\nHAVE TO LEARN HASKELL\", xy=(0.8, 8), arrowprops=arrowprops, xytext=(0.45, 8.5), alpha=ALPHA/5)\n\n    ax.get_xaxis().set_ticks([])\n    ax.get_yaxis().set_ticks([])\n\n    ax.set_xlabel(\"DOCUMENT COMPLEXITY\")\n    ax.xaxis.set_label_position('top')\n    ax.set_ylabel(\"IMPLEMENTATION DIFFICULTY\")\n\n\n\n\nI hope this brief exploration into Quarto’s and Pandoc’s capabilities has been insightful. I’m happy to any questions in the comments below.\n\n\nVersions\n\n\nimport matplotlib\nimport sys\nimport numpy as np\n\nprint(\"Matplotlib version:\", matplotlib.__version__)\nprint(\"NumPy version:\", np.__version__)\nprint(\"Python version:\", sys.version)\n\n\n\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2023,\n  author = {Krishnamurthy, Dheepak},\n  title = {Publishing Documents with {Quarto}},\n  date = {2023-11-20},\n  url = {https://kdheepak.com/blog/publish-documents-with-quarto/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Publishing documents with Quarto,” Nov. 20,\n2023. https://kdheepak.com/blog/publish-documents-with-quarto/."
  },
  {
    "objectID": "blog/using-conda-to-manage-packages/index.html",
    "href": "blog/using-conda-to-manage-packages/index.html",
    "title": "Using conda to manage packages",
    "section": "",
    "text": "The following quote is from Conda’s github page [1]\n\nConda is a cross-platform, Python-agnostic binary package manager. It is the package manager used by Anaconda installations, but it may be used for other systems as well. Conda makes environments first-class citizens, making it easy to create independent environments even for C libraries. Conda is written entirely in Python, and is BSD licensed open source.\n\nThe main advantage of using conda to manage your packages and environment is that it will work across platforms. Conda also uses hard linking, so it is inexpensive to create multiple copies of the same package"
  },
  {
    "objectID": "blog/using-conda-to-manage-packages/index.html#why-use-conda",
    "href": "blog/using-conda-to-manage-packages/index.html#why-use-conda",
    "title": "Using conda to manage packages",
    "section": "",
    "text": "The following quote is from Conda’s github page [1]\n\nConda is a cross-platform, Python-agnostic binary package manager. It is the package manager used by Anaconda installations, but it may be used for other systems as well. Conda makes environments first-class citizens, making it easy to create independent environments even for C libraries. Conda is written entirely in Python, and is BSD licensed open source.\n\nThe main advantage of using conda to manage your packages and environment is that it will work across platforms. Conda also uses hard linking, so it is inexpensive to create multiple copies of the same package"
  },
  {
    "objectID": "blog/using-conda-to-manage-packages/index.html#how-to",
    "href": "blog/using-conda-to-manage-packages/index.html#how-to",
    "title": "Using conda to manage packages",
    "section": "How to",
    "text": "How to\nOne simple way to start is to first specify a environment.yml file\n# environment.yml\nname: psst-env\ndependencies:\n  - python\n  - nose\n  - numpy\n  - pandas\n  - pip:\n      - pyomo\nThe name of the environment can be changed. Activate the environment by using the following.\nsource activate psst-env\nThen you can create the environment by\nconda env create\nYou can update the environment after adding a package to environment.yml by using the following\nconda env update\nAlternatively, you can create a new empty environment by using either one of the following\nconda create -n pelican-env python=2\nconda create --name pelican-env python=2\nIn this case, pelican-env is the name of the environment. You can follow the name of the environment with all the packages you want separated by spaces. You must have at least one package to create a environment.\nAfter the environment is created, you can source the environment :\nsource activate pelican-env\nYou can install packages here using one of the following :\nconda install &lt;PACKAGE-NAME&gt;\nWhen you have set up the environment and would like to share it, you can run the following to generate a .yml file\nconda env export\nI like to update by environment.yml by running the following\nconda env export &gt; environment.yml"
  },
  {
    "objectID": "blog/using-precommit-hooks/index.html",
    "href": "blog/using-precommit-hooks/index.html",
    "title": "Using pre-commit hooks",
    "section": "",
    "text": "Running git commit with pre-commit hooks"
  },
  {
    "objectID": "blog/using-precommit-hooks/index.html#setting-up-pre-commit-for-a-git-repo",
    "href": "blog/using-precommit-hooks/index.html#setting-up-pre-commit-for-a-git-repo",
    "title": "Using pre-commit hooks",
    "section": "Setting up pre-commit for a git repo",
    "text": "Setting up pre-commit for a git repo\nYou can run scripts before creating a commit in a git repo, i.e. pre-commit hooks, to verify that the files you are checking in meet a predefined standard. pre-commit is a Python package that let’s you manage and run pre-commit hooks in any git repository.\n\n\n\nPre-commit pipeline with black and flake8 [1]\n\n\nUsing pre-commit requires adding a .pre-commit-config.yaml file to the git repository, and running pre-commit install.\n\nAdd a file called .pre-commit-config.yaml to the root of your git repository, and add the hooks you want in that file. This is an example of a .pre-commit-config.yaml file:\n# cat /path/to/gitrepos/reponame/.pre-commit-hooks.yaml\nrepos:\n- repo: https://github.com/pre-commit/pre-commit-hooks\n  rev: v3.1.0\n  hooks:\n      - id: trailing-whitespace\n      - id: check-executables-have-shebangs\n      - id: check-json\n      - id: check-case-conflict\n      - id: check-toml\n      - id: check-merge-conflict\n      - id: check-xml\n      - id: check-yaml\n      - id: end-of-file-fixer\n      - id: check-symlinks\n      - id: fix-encoding-pragma\n      - id: mixed-line-ending\n      - id: pretty-format-json\n        args: [--autofix]\n - repo: https://gitlab.com/pycqa/flake8\n   rev: 3.8.3\n   hooks:\n       - id: flake8\n         args: [\n             '--max-line-length=150',\n             '--ignore=E203,E402,E501,E800,W503,W391,E261',\n             '--select=B,C,E,F,W,T4,B9'\n             ]\n- repo: https://github.com/ambv/black\n  rev: 19.10b0\n  hooks:\n      - id: black\n        args: [--line-length=150, --safe]\nInstall pre-commit and run pre-commit install.\npip install pre-commit\npre-commit install"
  },
  {
    "objectID": "blog/using-precommit-hooks/index.html#using-setup.py-to-install-pre-commit-hooks",
    "href": "blog/using-precommit-hooks/index.html#using-setup.py-to-install-pre-commit-hooks",
    "title": "Using pre-commit hooks",
    "section": "Using setup.py to install pre-commit hooks",
    "text": "Using setup.py to install pre-commit hooks\nYou can have setup.py automatically run precommit install when setting up a developer environment.\nTo do this, add a PostDevelopCommand hook to setup.py. Here’s a minimal example:\nimport os\nimport logging\nfrom codecs import open\nfrom setuptools import setup, find_packages\nfrom setuptools.command.develop import develop\nfrom subprocess import check_call\nimport shlex\n\n# Create post develop command class for hooking into the python setup process\n# This command will run after dependencies are installed\nclass PostDevelopCommand(develop):\n    def run(self):\n        try:\n            check_call(shlex.split(\"pre-commit install\"))\n        except Exception as e:\n            logger.warning(\"Unable to run 'pre-commit install'\")\n        develop.run(self)\n\ninstall_requires = [\"networkx\"] # alternatively, read from `requirements.txt`\nextra_requires = [\"pandas\"]     # optional dependencies\ntest_requires = [\"pytest\"]      # test dependencies\ndev_requires = [\"pre-commit\"]   # dev dependencies\n\nsetup(\n    name=\"packagename\",\n    version=\"v0.1.0\",\n    install_requires=install_requires,\n    extras_require={\n        \"test\": test_requires,\n        \"extra\": extra_requires,\n        \"dev\": test_requires + extra_requires + dev_requires,\n    },\n    cmdclass={\"develop\": PostDevelopCommand},\n)\nThen, during the first time you want to start working on the project you can run the following to setup your development environment:\npip install -e \".[dev]\"\nThis will install install_requires, test_requires, extra_requires and dev_requires dependencies. This will also run pre-commit install in the git repository, which will add the hooks from the .pre-commit-config.yaml file.\nIf you don’t want to automatically run pre-commit install, remove the cmdclass={\"develop\": PostDevelopCommand} line in the setup(...) function arguments."
  },
  {
    "objectID": "blog/using-precommit-hooks/index.html#using-pre-commit-hooks-for-all-git-repos",
    "href": "blog/using-precommit-hooks/index.html#using-pre-commit-hooks-for-all-git-repos",
    "title": "Using pre-commit hooks",
    "section": "Using pre-commit-hooks for all git repos",
    "text": "Using pre-commit-hooks for all git repos\nIf you want to use pre-commit-hooks for all git repositories on your machine, you can set up a git-templates folder that is used as a templatedir when you run git init.\nAdd the following to your ~/.gitconfig file 1.\n1 On Windows, the file is located at C:\\Users\\USERNAME\\.gitconfig. Also, git will not create this file unless you ask for it. You can create it by running git config --global --edit.[init]\n  templatedir = ~/gitrepos/git-templates\nNow create a ~/gitrepos/dotfiles/git-templates folder with a single folder inside it called hooks, and with a single executable file inside the hooks folder called pre-commit.\ntree git-templates\ngit-templates\n└── hooks\n   ├── commit-msg\n   └── pre-commit\nYou can create a text file and make it executable by running chmod +x pre-commit. In that file, you can make pre-commit point to a .pre-commit-config.yaml file of your choosing.\nThis will make git init use the templatedir as a template when you create a new git repository.\nHere is what my git-templates/hooks/pre-commit file looks like:\n#!/bin/sh\npre-commit run --config ~/gitrepos/dotfiles/.pre-commit-config.yaml\nYou can place the .pre-commit-config.yaml wherever you like. I have mine in my ~/gitrepos/dotfiles repository. If you have set it up correctly, the next time you run git init the pre-commit hooks will be set up in your git repository based on the .pre-commit-config.yaml file you set up."
  },
  {
    "objectID": "blog/using-precommit-hooks/index.html#git-commit---no-verify",
    "href": "blog/using-precommit-hooks/index.html#git-commit---no-verify",
    "title": "Using pre-commit hooks",
    "section": "git commit --no-verify",
    "text": "git commit --no-verify\nFinally, if you want to bypass the pre-commit hooks in special circumstances, you can add the --no-verify flag to your git commit command.\ngit commit --no-verify\nThis will run git commit without any pre-commit hooks."
  },
  {
    "objectID": "blog/using-precommit-hooks/index.html#troubleshooting",
    "href": "blog/using-precommit-hooks/index.html#troubleshooting",
    "title": "Using pre-commit hooks",
    "section": "Troubleshooting",
    "text": "Troubleshooting\nYou can update the .git/hooks/pre-commit file if something goes wrong, to suit your configuration. For example, you may have to configure it to point to a specific version of Python on your machine if it doesn’t point to the correct version by default.\nYou also can change the flake8 errors and warnings that you’d like to ignore by changing the arguments to flake8. You can read about all the different flake8 errors and warning over here: https://www.flake8rules.com/."
  },
  {
    "objectID": "blog/patched-fonts-madness/index.html",
    "href": "blog/patched-fonts-madness/index.html",
    "title": "Patched fonts madness",
    "section": "",
    "text": "Getting patched fonts for a powerline in the terminal can be quite an adventure, especially when you are using vim and tmux. I almost gave up on it, but now that I’ve figured it out it seems extremely obvious.\n# pip install --user powerline-status\n# brew install fontforge --with-python\ngit clone https://github.com/powerline/fonts.git\ncd fonts\n./install.sh\nMost importantly, select the font with the word powerline in the name in the preferences option of your terminal.\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2015,\n  author = {Krishnamurthy, Dheepak},\n  title = {Patched Fonts Madness},\n  date = {2015-07-13},\n  url = {https://kdheepak.com/blog/patched-fonts-madness/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Patched fonts madness,” Jul. 13, 2015. https://kdheepak.com/blog/patched-fonts-madness/."
  },
  {
    "objectID": "blog/effect-of-type-inference-on-performance-in-julia/index.html",
    "href": "blog/effect-of-type-inference-on-performance-in-julia/index.html",
    "title": "Effect of type inference on performance in Julia",
    "section": "",
    "text": "To ensure that the code you write in Julia executes fast and efficiently, there’s a number of general tips and guidelines that you can follow. You can find a full list of useful tips the Performance Tips section in the official manual.\nIn this blog post, I want to touch on one specific performance tip: using containers with concrete type parameters and how type inference can affect that."
  },
  {
    "objectID": "blog/effect-of-type-inference-on-performance-in-julia/index.html#toy-problem",
    "href": "blog/effect-of-type-inference-on-performance-in-julia/index.html#toy-problem",
    "title": "Effect of type inference on performance in Julia",
    "section": "Toy problem",
    "text": "Toy problem\nLet’s define a toy problem to work with.\n\nabstract type Shape end\narea(::Shape) = 0.0\n\n@kwdef struct Square &lt;: Shape\n    side::Float64 = rand()\nend\narea(s::Square) = s.side * s.side\n    \n@kwdef struct Rectangle &lt;: Shape\n    width::Float64 = rand()\n    height::Float64 = rand()\nend\narea(r::Rectangle) = r.width * r.height\n    \n@kwdef struct Triangle &lt;: Shape\n    base::Float64 = rand()\n    height::Float64 = rand()\nend\narea(t::Triangle) = 1.0/2.0 * t.base * t.height\n\n@kwdef struct Circle &lt;: Shape\n    radius::Float64 = rand()\nend\narea(c::Circle) = π * c.radius^2\n\nWe can use the builtin Test module to check that the code we wrote is correct.\n\nusing Test\n@testset \"Areas\" begin\n    @test area(Square(2)) == 4\n    @test area(Rectangle(2,3)) == 6\n    @test area(Triangle(2,3)) == 3\n    @test area(Circle(2)) ≈ 4π\nend\n\n\nTest Summary: | Pass  Total  Time\n\nAreas         |    4      4  0.1s\n\n\n\n\nLet’s build 1 million random shapes:\n\nusing Random\nRandom.seed!(42)\n\nCOUNT = 1_000_000\nshapes = [rand((Square,Rectangle,Triangle,Circle))() for _ in 1:COUNT]\n\n\n\nCode\nusing Format\nusing Markdown\nlen = cfmt(\"%'d\", length(shapes))\nnumber_of(T) = cfmt(\"%'d\", count(s-&gt;isa(s, T), shapes))\n\ndisplay(Markdown.md\"The total number of shapes we have in the array is $len. In this array, there's $(number_of(Square)) squares, $(number_of(Rectangle)) rectangles, \n$(number_of(Triangle)) triangles, and $(number_of(Circle)) circles.\")\n\n\nThe total number of shapes we have in the array is 1,000,000. In this array, there’s 249,740 squares, 249,980 rectangles, 249,831 triangles, and 250,449 circles."
  },
  {
    "objectID": "blog/effect-of-type-inference-on-performance-in-julia/index.html#type-inference",
    "href": "blog/effect-of-type-inference-on-performance-in-julia/index.html#type-inference",
    "title": "Effect of type inference on performance in Julia",
    "section": "Type inference",
    "text": "Type inference\nHere’s the type trees for the Shape:\n\n\nCode\nfor s in subtypes(Shape)\n    println(join(string.(supertypes(s)), \" &lt;: \"))\nend\n\n\nCircle &lt;: Shape &lt;: Any\nRectangle &lt;: Shape &lt;: Any\nSquare &lt;: Shape &lt;: Any\nTriangle &lt;: Shape &lt;: Any\n\n\nBy default, Julia will infer the generic type for a container as close to the bottom of the tree that fits all the data in that container.\nFor example, if we just built a vector with the just Squares, Julia will infer the container to be Vector{Square}. But if there are different elements Julia will infer the generic type parameter as a Shape.\n\n@show typeof([Square() for _ in 1:COUNT])\n@show typeof([rand((Square,Rectangle))() for _ in 1:COUNT])\n\ntypeof([Square() for _ = 1:COUNT]) = Vector{Square}\ntypeof([(rand((Square, Rectangle)))() for _ = 1:COUNT]) = Vector{Shape}\n\n\nLet’s filter out shapes of a specific kind so that each array contains data of the same type. You might think to write this function like so:\n\nbad_shapes_by_type(::Type{T}, shapes) where T&lt;:Shape = filter(s -&gt; isa(s, T), shapes)\n\nHowever, while this function works, it has a subtle issue. It returns a type of Vector{Shape}.\nJulia is a dynamic language. And it can be easy to accidentally construct a container with an abstract type for the type parameter of a generic type, even if there is only one type in container.\n\nshape_arr1 = bad_shapes_by_type(Square, shapes)\nshape_arr2 = bad_shapes_by_type(Rectangle, shapes)\nshape_arr3 = bad_shapes_by_type(Triangle, shapes)\nshape_arr4 = bad_shapes_by_type(Circle, shapes)\n\n@show typeof(shape_arr1)\n@show typeof(shape_arr2)\n@show typeof(shape_arr3)\n@show typeof(shape_arr4)\n\ntypeof(shape_arr1) = Vector{Shape}\ntypeof(shape_arr2) = Vector{Shape}\ntypeof(shape_arr3) = Vector{Shape}\ntypeof(shape_arr4) = Vector{Shape}\n\n\nThis can happen if the Julia compiler cannot infer the types at the compile time of the function.\nHere, Shape is an abstract type, even if Vector{Shape} is concrete.\n\n@show isconcretetype(Shape)\n@show isconcretetype(Vector{Shape})\n\nisconcretetype(Shape) = false\nisconcretetype(Vector{Shape}) = true\n\n\nFor better performance in Julia, it helps to have concrete types in the generic parameters for a container. We can do this by helping the compiler by in this case explicitly listing the generic type parameter before the brackets for constructing the array, i.e. T[...].\n\ngood_shapes_by_type(::Type{T}, shapes) where T&lt;:Shape = T[shape for shape in filter(s -&gt; isa(s, T), shapes)]\n\nWith this function, we get Vector{Square} for an array with only squares in it.\n\nsquare_arr = good_shapes_by_type(Square, shapes)\nrectangle_arr = good_shapes_by_type(Rectangle, shapes)\ntriangle_arr = good_shapes_by_type(Triangle, shapes)\ncircle_arr = good_shapes_by_type(Circle, shapes)\n\n@show typeof(square_arr)\n@show typeof(rectangle_arr)\n@show typeof(triangle_arr)\n@show typeof(circle_arr)\n\ntypeof(square_arr) = Vector{Square}\ntypeof(rectangle_arr) = Vector{Rectangle}\ntypeof(triangle_arr) = Vector{Triangle}\ntypeof(circle_arr) = Vector{Circle}\n\n\nAs we’ll see in the next section, this can have significant impacts on performance."
  },
  {
    "objectID": "blog/effect-of-type-inference-on-performance-in-julia/index.html#benchmarks",
    "href": "blog/effect-of-type-inference-on-performance-in-julia/index.html#benchmarks",
    "title": "Effect of type inference on performance in Julia",
    "section": "Benchmarks",
    "text": "Benchmarks\nLet’s combine these arrays back into different vectors that have different type parameters for illustration purposes:\n\nsorted_shapes_shape = vcat(square_arr, rectangle_arr, triangle_arr, circle_arr);\nsorted_shapes_any = Any[s for s in sorted_shapes_shape];\nsorted_shapes_union = Union{Square, Rectangle, Triangle, Circle}[s for s in sorted_shapes_shape];\n\n@show typeof(sorted_shapes_shape)\n@show typeof(sorted_shapes_any)\n@show typeof(sorted_shapes_union)\n\ntypeof(sorted_shapes_shape) = Vector{Shape}\ntypeof(sorted_shapes_any) = Vector{Any}\ntypeof(sorted_shapes_union) = Vector{Union{Circle, Rectangle, Square, Triangle}}\n\n\nWe can benchmark the performance of these different types using BenchmarkTools:\n\nusing BenchmarkTools\n\nLet’s define a main1 function that calculates the sum over all the areas of every element in an array.\n\nmain1(arr) = sum(area, arr)\n\nmain1 (generic function with 1 method)\n\n\nAnd let’s run a benchmark for sorted_shapes_shape and sorted_shapes_any.\n\n\nCode\n@show typeof(sorted_shapes_shape)\n@benchmark main1($sorted_shapes_shape)\n\n\ntypeof(sorted_shapes_shape) = Vector{Shape}\n\n\n\nBenchmarkTools.Trial: 149 samples with 1 evaluation.\n Range (min … max):  30.965 ms … 39.555 ms  ┊ GC (min … max): 0.00% … 15.18%\n Time  (median):     31.960 ms              ┊ GC (median):    0.00%\n Time  (mean ± σ):   33.628 ms ±  3.074 ms  ┊ GC (mean ± σ):  5.43% ±  7.30%\n  █▇ ▁ ▁                                                       \n  ██▆███▆▆▆▄▇▃▃▃▁▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃▁▃▃▁▅▆▅▆▄█▄▃▃▁▃▁▃ ▃\n  31 ms           Histogram: frequency by time        39.5 ms &lt;\n Memory estimate: 30.52 MiB, allocs estimate: 1999999.\n\n\n\n\n\nCode\n@show typeof(sorted_shapes_any)\n@benchmark main1($sorted_shapes_any)\n\n\ntypeof(sorted_shapes_any) = Vector{Any}\n\n\n\nBenchmarkTools.Trial: 145 samples with 1 evaluation.\n Range (min … max):  31.421 ms … 41.560 ms  ┊ GC (min … max): 0.00% … 15.62%\n Time  (median):     32.909 ms              ┊ GC (median):    0.00%\n Time  (mean ± σ):   34.479 ms ±  3.233 ms  ┊ GC (mean ± σ):  5.20% ±  7.07%\n  ▇██ ▂▃ ▂▄ ▃                                                  \n  ███▅██▄██▆█▆▅▅▃▁▃▁▃▄▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▄▇▁▄▅▄▇▇▃▁▃▅▃▃▁▅▄▄▁▄▁▄ ▃\n  31.4 ms         Histogram: frequency by time        41.3 ms &lt;\n Memory estimate: 30.52 MiB, allocs estimate: 1999999.\n\n\n\nBoth benchmarks for Vector{Shape} and Vector{Any} are similar in performance to each other.\nThe Julia manual has the following to say:\n\nIf you cannot avoid containers with abstract value types, it is sometimes better to parametrize with Any to avoid runtime type checking. E.g. IdDict{Any, Any} performs better than IdDict{Type, Vector}\n\nWhat is interesting is that Union{Circle, Rectangle, Square, Triangle} can perform better than Shape or Any when used as a concrete type parameter.\nYou can see difference show up clearly in the performance benchmark:\n\n\nCode\n@show typeof(sorted_shapes_union)\n@benchmark main1($sorted_shapes_union)\n\n\ntypeof(sorted_shapes_union) = Vector{Union{Circle, Rectangle, Square, Triangle}}\n\n\n\nBenchmarkTools.Trial: 5289 samples with 1 evaluation.\n Range (min … max):  928.875 μs …  1.078 ms  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     940.084 μs              ┊ GC (median):    0.00%\n Time  (mean ± σ):   942.846 μs ± 10.779 μs  ┊ GC (mean ± σ):  0.00% ± 0.00%\n       ▂▄▆██▇█▆▃▃▂ ▁                                           ▂\n  ▅▅▆▇████████████████████▇█▇▇▇▆▆▇▆▅▆▆▅▅▅▅▆▆▆▅▃▅▆▅▆▅▅▇▇▆▃▅▅▄▅▄ █\n  929 μs        Histogram: log(frequency) by time       995 μs &lt;\n Memory estimate: 0 bytes, allocs estimate: 0.\n\n\n\n\n\nVector{Union{Circle, Rectangle, Square, Triangle}} is faster than Vector{Shape} by roughly a factor of 36 times.\n\n\nIt’s possible to get even better performance by calculating the sums for the individual arrays and summing them up at the end.\n\nmain2(arrs...) = sum(main1, arrs)\n\n@benchmark main2($square_arr, $rectangle_arr, $triangle_arr, $circle_arr)\n\n\nBenchmarkTools.Trial: 10000 samples with 1 evaluation.\n Range (min … max):  273.625 μs … 357.208 μs  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     279.583 μs               ┊ GC (median):    0.00%\n Time  (mean ± σ):   281.245 μs ±   5.297 μs  ┊ GC (mean ± σ):  0.00% ± 0.00%\n          ▂▇█▇▄▂▄▅▄▂ ▁▁                                         ▂\n  ▂▂▂▂▄▄▆▆█████████████▇▇▇█▇▇▆▆▆▆▆▇▇▆▆▆▇▇▆▇▇▇▆▆▆▆▆▆▅▄▆▇▅▆▆▄▅▅▅▄ █\n  274 μs        Histogram: log(frequency) by time        307 μs &lt;\n Memory estimate: 0 bytes, allocs estimate: 0.\n\n\n\nThis performance is almost equivalent to having a uniform type (e.g. just Squares).\n\nsquares = [Square() for _ in 1:COUNT]\n\n@benchmark main1($squares)\n\n\nBenchmarkTools.Trial: 10000 samples with 1 evaluation.\n Range (min … max):  236.958 μs … 342.708 μs  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     237.542 μs               ┊ GC (median):    0.00%\n Time  (mean ± σ):   239.297 μs ±   4.834 μs  ┊ GC (mean ± σ):  0.00% ± 0.00%\n  ▆█▅▃▂▁▁▅▄▂   ▁                                                ▁\n  ███████████▇▇██▆▆▆▆▇█▇▇▅▆▆▆▆▆▅▅▅▅▄▄▆▇██▇▇▆▇▆▆▅▆▅▅▅▄▅▄▄▅▃▄▅▄▄▅ █\n  237 μs        Histogram: log(frequency) by time        262 μs &lt;\n Memory estimate: 0 bytes, allocs estimate: 0.\n\n\n\nKeep in mind that we would only get this kind of performance if the type parameter is concrete. If we used Vector{Shape} values instead, we’d get poor performance results:\n\n@benchmark main2($shape_arr1, $shape_arr2, $shape_arr3, $shape_arr4)\n\n\nBenchmarkTools.Trial: 111 samples with 1 evaluation.\n Range (min … max):  41.965 ms … 54.020 ms  ┊ GC (min … max): 0.00% … 15.22%\n Time  (median):     43.359 ms              ┊ GC (median):    0.00%\n Time  (mean ± σ):   45.287 ms ±  3.798 ms  ┊ GC (mean ± σ):  4.51% ±  6.46%\n  █▄  ▁▅  ▁                                                    \n  ██▆▅███▇█▃▅▁▃▅▄▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃▁▄▃▄▁▅▁▅▄▄▃▁▁▃▄▅▁▄▄▄▁▃ ▃\n  42 ms           Histogram: frequency by time        53.2 ms &lt;\n Memory estimate: 30.52 MiB, allocs estimate: 2000002."
  },
  {
    "objectID": "blog/effect-of-type-inference-on-performance-in-julia/index.html#struct-with-type-parameters",
    "href": "blog/effect-of-type-inference-on-performance-in-julia/index.html#struct-with-type-parameters",
    "title": "Effect of type inference on performance in Julia",
    "section": "Struct with type parameters",
    "text": "Struct with type parameters\nIn Julia, structs can have untyped fields.\n\nstruct Foo\n    a\nend\n\n# is equivalent to this\n\nstruct Foo\n    a::Any\nend\n\nIf you want performant code, you have to ensure fields are specified with concrete types, like so:\n\nstruct FooSpecialized\n    a::Float64\nend\n\nstructs can also have generic type parameters\n\nstruct Bar{T}\n    a::T\nend\n\nIn this case, when constructing the type, you want to ensure that concrete types are used to instantiate the type. e.g. Bar{AbstractFloat}(1.0) is going to perform less efficiently compared to Bar{Float64}(1.0).\nBar(x) will use type inference to decide what the value of the type parameter should be.\n\n@show typeof(Bar(sorted_shapes_shape))\n@show typeof(Bar(sorted_shapes_any))\n@show typeof(Bar(sorted_shapes_union))\n\ntypeof(Bar(sorted_shapes_shape)) = Bar{Vector{Shape}}\ntypeof(Bar(sorted_shapes_any)) = Bar{Vector{Any}}\ntypeof(Bar(sorted_shapes_union)) = Bar{Vector{Union{Circle, Rectangle, Square, Triangle}}}\n\n\nThere’s a lot more useful information in Type Declarations section of the performance tips."
  },
  {
    "objectID": "blog/effect-of-type-inference-on-performance-in-julia/index.html#conclusion",
    "href": "blog/effect-of-type-inference-on-performance-in-julia/index.html#conclusion",
    "title": "Effect of type inference on performance in Julia",
    "section": "Conclusion",
    "text": "Conclusion\nThe key takeaway is that if you care about performance in Julia, you have to be mindful of types and type inference! Keeping types as concrete as possible is important because when type inference fails, it can propogate through your program. Even small changes to your code can improve performance significantly.\nMany thanks to the helpful Julia community on Discourse for always offering insightful comments and advice."
  },
  {
    "objectID": "blog/spotify-and-tmux/index.html",
    "href": "blog/spotify-and-tmux/index.html",
    "title": "Spotify and tmux",
    "section": "",
    "text": "Create a file named tmux-spotify-info and place it in a directory that in your $PATH. Add the following snippet of code into the file and make sure it is executable.\n#!/usr/bin/env osascript\n# Returns the current playing song in Spotify for OSX\n\ntell application \"Spotify\"\n  if it is running then\n    if player state is playing then\n      set track_name to name of current track\n      set artist_name to artist of current track\n\n      \"#[fg=colour39,nobold]#[fg=colour16, bg=colour39, nobold] \" & artist_name & \" - \" & track_name & \" #[bg=colour39]\"\n    end if\n  end if\nend tell\nAdd this to the end of ~/.tmux.conf\n# Bad Wolf by Steve Losh\n# Modified by Dheepak Krishnamurthy\n# =====================\nset -g status-fg white\nset -g status-bg colour234\n# set -g status-bg default #set for transparent background\nset -g window-status-activity-attr bold\nset -g pane-border-fg colour245\nset -g pane-active-border-fg colour39\nset -g message-fg colour16\nset -g message-bg colour221\nset -g message-attr bold\n# Custom status bar\n# Powerline\nset -g status-left-length 32\nset -g status-right-length 150\nset -g status-interval 5\n# Lets add the current weather to our status bar—why? Well Why the french-toast not?\nset -g status-left '#[fg=colour16,bg=colour254,bold] #S #[fg=colour254,bg=colour238,nobold]#[fg=colour15,bg=colour238,bold] #(weathermajig boulder --short) #[fg=colour238,bg=colour234,nobold]'\nset -g status-right '%R #[fg=colour238,nobold]#[fg=colour254, bg=colour238] %d %b #(tmux-spotify-info)#[fg=colour254,nobold]#[fg=colour16,bg=colour254,bold] #h '\nset -g window-status-format \"#[fg=white,bg=colour234] #I #W \"\nset -g window-status-current-format \"#[fg=colour234,bg=colour39]#[fg=colour16,bg=colour39,noreverse,bold] #I ❭ #W #[fg=colour39,bg=colour234,nobold]\"\nAnd your favourite song will be listed in your tmux powerline! You can change the colours by playing the values above.\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2015,\n  author = {Krishnamurthy, Dheepak},\n  title = {Spotify and Tmux},\n  date = {2015-09-20},\n  url = {https://kdheepak.com/blog/spotify-and-tmux/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Spotify and tmux,” Sep. 20, 2015. https://kdheepak.com/blog/spotify-and-tmux/."
  },
  {
    "objectID": "blog/jupyter-prelude/index.html",
    "href": "blog/jupyter-prelude/index.html",
    "title": "Jupyter prelude",
    "section": "",
    "text": "uv\n# This will create a new Python environment in the current directory\nuv init --app\n\n# This will add the specified packages to the environment\nuv add \"ibis-framework[duckdb,geospatial]\" ipykernel panel hvplot holoviews matplotlib pandas param lonboard folium\n\n\nprelude\nCopy the following to the top of your Jupyter Notebook to load the prelude:\n\n################################################################################\n\n# autoreload all modules every time before executing the Python code\n%reload_ext autoreload\n%autoreload 2\n\n################################################################################\n\nfrom IPython.core.interactiveshell import InteractiveShell\n\n# `ast_node_interactivity` is a setting that determines how the return value of the last line in a cell is displayed\n# with `last_expr_or_assign`, the return value of the last expression is displayed unless it is assigned to a variable\nInteractiveShell.ast_node_interactivity = \"last_expr_or_assign\"\n\n################################################################################\n\nimport pandas as pd\n\n# `copy_on_write` is a performance improvement\n# This will be the default in a future version of pandas\n# Refer to https://pandas.pydata.org/pandas-docs/stable/user_guide/copy_on_write.html\npd.options.mode.copy_on_write = True\npd.options.future.no_silent_downcasting = True\n\n################################################################################\n\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\n%matplotlib inline\n\nmpl.use(\"agg\")\n\n# `constrained_layout` helps avoid overlapping elements\n# Refer to https://matplotlib.org/stable/tutorials/intermediate/constrainedlayout_guide.html\nmpl.pyplot.rcParams['figure.constrained_layout.use'] = True\n\n# helper function to create a grid layout for subplots\ndef make_grid(labels=None, ncols=None, nrows=None, placeholder=\".\"):\n    \"\"\"\n    Create a grid layout suitable for matplotlib's subplot_mosaic.\n\n    If `labels` is None, auto-generate labels like 'A1', 'A2', ..., 'B1', 'B2', etc.\n\n    Args:\n        labels (list of str or None): Subplot labels. If None, generate from ncols and nrows.\n        ncols (int or None): Number of columns in the grid (required).\n        nrows (int or None): Number of rows (required if labels is None).\n        placeholder (str): Placeholder for empty grid cells.\n\n    Returns:\n        list of list of str: A 2D list representing the grid layout.\n    \"\"\"\n    import string\n    import itertools\n\n    if ncols is None or ncols &lt;= 0:\n        raise ValueError(\"ncols must be a positive integer\")\n\n    if labels is None:\n        if nrows is None:\n            raise ValueError(\"If labels is None, nrows must be specified.\")\n\n        def _excel_style_names():\n            for size in itertools.count(1):\n                for chars in itertools.product(string.ascii_uppercase, repeat=size):\n                    yield \"\".join(chars)\n\n        row_names = itertools.islice(_excel_style_names(), nrows)\n        labels = [f\"{row}{col + 1}\" for row in row_names for col in range(ncols)]\n\n    grid = [labels[i : i + ncols] for i in range(0, len(labels), ncols)]\n\n    if len(grid[-1]) &lt; ncols:\n        grid[-1].extend([placeholder] * (ncols - len(grid[-1])))\n\n    return grid\n\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2024,\n  author = {Krishnamurthy, Dheepak},\n  title = {Jupyter Prelude},\n  date = {2024-12-16},\n  url = {https://kdheepak.com/blog/jupyter-prelude/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Jupyter prelude,” Dec. 16, 2024. https://kdheepak.com/blog/jupyter-prelude/."
  },
  {
    "objectID": "blog/programmers-preferences-for-package-names/index.html",
    "href": "blog/programmers-preferences-for-package-names/index.html",
    "title": "Programmers’ preferences for package names",
    "section": "",
    "text": "Are there trends in choosing package names in various programming ecosystems? Do package authors choose names for their packages that are alliterated with the name of the programming language? Let’s venture to find out.\nFirst let’s install a couple of useful packages.\n\n\nCode\nusing Pkg\nPkg.activate(@__DIR__)\n# Pkg.add(\"Plots\")\n# Pkg.add(\"StatsPlots\")\n# Pkg.add(\"DataStructures\")\n# Pkg.add(\"HTTP\")\n# Pkg.add(\"JSON3\")\n# Pkg.add(\"DataFrames\")\n# Pkg.add(\"CSV\")\n# Pkg.add(\"CodecZlib\")\n# Pkg.add(\"Tar\")\n\n\nWe can bucket the package names by their starting letter and count the number of packages in each bucket, i.e. a frequency plot.\n\n\nCode\nusing Plots\nusing DataStructures\nusing HTTP\nusing Markdown\n\nfunction get_buckets(items)\n  buckets = DefaultDict(0)\n  items = strip.(items)\n  for item in items\n    buckets[lowercase(first(item))] += 1\n  end\n  total = sum(values(buckets))\n  for (k, v) in buckets\n    buckets[k] = v / total\n  end\n  (buckets, total)\nend\n\nfunction frequency_plot((buckets, total); lang, kind=\"packages\")\n  fig_size = (800, 600)\n  names = [k for k in sort(collect(keys(buckets)))]\n  colors = DefaultDict(\"grey\")\n  percent = DefaultDict(\"\")\n  starting_letter = first(lowercase(lang))\n  if kind == \"packages\"\n    colors[starting_letter] = \"orange\"\n    for (k, v) in buckets\n      p = round((buckets[k] - WORD_BUCKETS[k]) * 100, digits=1)\n      percent[k] = \"\\n($(sign(p) &gt; 0 ? '+' : '-')$(p)%)\"\n    end\n  end\n  ax = bar([buckets[n] for n in names], xticks=(1:length(names), names), fillcolor=[colors[n] for n in names], size=(1600, 1000), legend=false, yaxis=false)\n  annotate!(1:length(names), [buckets[n] + (1 / (kind == \"packages\" ? 350 : 500)) for n in names], [(\"$(round(buckets[n] * 100, digits=1))%$(percent[n])\", 8) for n in names])\n  title!(\"Frequency of $kind in $lang (Total: $total)\")\n\n  summary = if kind == \"packages\"\n    \"\"\"\n    The difference in percent of names of $lang packages starting with \"$starting_letter\" and words in the English language starting with \"$starting_letter\" is $(replace(strip(percent[starting_letter]), \")\" =&gt; \"\", \"(\" =&gt; \"\")).\n    \"\"\"\n  else\n    \"\"\n  end\n  (ax, summary)\nend\n\nnothing\n\n\n\n[ Info: Precompiling IJuliaExt [2f4121a4-3b3a-5ce6-9c5e-1f2673ce168a]\n\n\n\n\n\nEnglish\nFor a reference case, let’s plot the distribution of words in the English language, per the list in /usr/share/dict/words on my MacOS 12.5.\n\n\nCode\nwords = open(\"/usr/share/dict/words\") do f\n  readlines(f)\nend\nWORD_BUCKETS, WORD_TOTAL = get_buckets(words)\nax, summary = frequency_plot((WORD_BUCKETS, WORD_TOTAL), lang=\"/usr/share/dict/words\", kind=\"words\")\ndisplay(ax)\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPython\nFor Python, we can get the list of packages on PyPi using https://pypi.org/simple and get the names of all packages from the links.\n\n\nCode\nr = HTTP.get(\"https://pypi.org/simple\")\ndata = String(r.body)\nlines = strip.(split(data, \"\\n\"));\nlinks = filter(startswith(\"&lt;a href=\\\"\"), lines); # filter all the lines that start with a link\npackages = first.(match.(r\"&gt;(.*)&lt;/a&gt;\", links)); # get the contents of these links, using a regex match\npackages = filter(name -&gt; isletter(first(name)), packages); # get only packages that start with a letter.\n\nPYTHON_BUCKETS, PYTHON_TOTAL = get_buckets(packages)\nax, summary = frequency_plot((PYTHON_BUCKETS, PYTHON_TOTAL), lang=\"Python\")\ndisplay(ax)\ndisplay(\"text/markdown\", summary)\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe difference in percent of names of Python packages starting with p and words in the English language starting with p is +3.1%.\n\n\nPersonally, I’m surprised this difference isn’t higher.\n\n\nJulia\nWhen you install a package using Julia, it downloads a general registry into your home directory, and we can traverse that directory only one level deep to figure out all the names of the packages in the registry.\n\n\nCode\ngeneral_folder = expanduser(\"~/.julia/registries/General\")\nfor (root, folders, files) in walkdir(general_folder)\n  for folder in folders\n    if length(folder) &gt; 1 && length(split(replace(root, general_folder =&gt; \"\"), \"/\")) == 2 && !endswith(folder, \"_jll\")\n      push!(packages, folder)\n    end\n  end\nend\n\nJULIA_BUCKETS, JULIA_TOTAL = get_buckets(packages)\nax, summary = frequency_plot((JULIA_BUCKETS, JULIA_TOTAL), lang=\"Julia\", kind=\"packages\")\ndisplay(ax)\ndisplay(\"text/markdown\", summary)\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe difference in percent of names of Julia packages starting with j and words in the English language starting with j is +0.9%.\n\n\n\n\nRust\nhttps://crates.io conveniently has a data-access page that links to the latest dump which contains a csv file with the names of all the packages.\n\n\nCode\nusing DataFrames\nusing CSV\nusing Tar\nusing CodecZlib\ntmp = tempname()\ndownload(\"https://static.crates.io/db-dump.tar.gz\", tmp)\nfolder = open(tmp) do file\n  Tar.extract(GzipDecompressorStream(file))\nend\nfilename = joinpath(folder, only(readdir(folder)), \"data/crates.csv\")\npackages = DataFrame(CSV.File(filename))[!, :name]\n\nRUST_BUCKETS, RUST_TOTAL = get_buckets(packages)\nax, summary = frequency_plot((RUST_BUCKETS, RUST_TOTAL), lang=\"Rust\")\ndisplay(ax)\ndisplay(\"text/markdown\", summary)\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe difference in percent of names of Rust packages starting with r and words in the English language starting with r is +3.6%.\n\n\n\n\nR\nFor R, similar to Python, we can parse the HTML from https://cran.r-project.org/web/packages/available_packages_by_name.html:\n\n\nCode\nr = HTTP.get(\"https://cran.r-project.org/web/packages/available_packages_by_name.html\")\ndata = String(r.body)\nlines = split(data, \"\\n\")\nlines = filter(line -&gt; startswith(line, \"&lt;td&gt;&lt;a href=\\\"\"), lines)\npackages = first.(match.(r\"&gt;(.*)&lt;/a&gt;\", links))\npackages = filter(name -&gt; isletter(first(name)), packages)\n\nR_BUCKETS, R_TOTAL = get_buckets(packages)\nax, summary = frequency_plot((R_BUCKETS, R_TOTAL), lang=\"R\")\ndisplay(ax)\ndisplay(\"text/markdown\", summary)\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe difference in percent of names of R packages starting with r and words in the English language starting with r is –0.6%.\n\n\nThis is also a rather surprising result.\n\n\nNPM\nFor NPM packages, https://replicate.npmjs.com/_all_docs contains a 228 MB json that contains all the packages.\n\n\nCode\nusing JSON3\nartifact_npm = Pkg.Artifacts.ensure_artifact_installed(\"npm\", joinpath(@__DIR__, \"Artifacts.toml\"))\ndata = open(joinpath(artifact_npm, \"_all_docs\")) do f\n  JSON3.read(f)\nend\npackages = map(data[:rows]) do elem\n  last(split(elem[:id], \"/\"))\nend\npackages = filter(name -&gt; isletter(first(name)), packages)\n\nNPM_BUCKETS, NPM_TOTAL = get_buckets(packages)\nax, summary = frequency_plot((NPM_BUCKETS, NPM_TOTAL), lang=\"NPM\")\ndisplay(ax)\ndisplay(\"text/markdown\", summary)\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe difference in percent of names of NPM packages starting with n and words in the English language starting with n is +2.3%.\n\n\n\n\nComparison\nHere’s a plot comparing the normalized values:\n\n\nCode\nusing StatsPlots\n\ngroupedbar(repeat('a':'z', inner=6), hcat([\n    [WORD_BUCKETS[letter] for letter in 'a':'z'],\n    [PYTHON_BUCKETS[letter] for letter in 'a':'z'],\n    [JULIA_BUCKETS[letter] for letter in 'a':'z'],\n    [RUST_BUCKETS[letter] for letter in 'a':'z'],\n    [R_BUCKETS[letter] for letter in 'a':'z'],\n    [NPM_BUCKETS[letter] for letter in 'a':'z'],\n  ]...), title=\"Comparison of English words, Python, Julia, Rust, R and NPM packages\", group=repeat([\"English\", \"Python\", \"Julia\", \"Rust\", \"R\", \"NPM\"], outer=26), yaxis=false, size=(1600, 1000))\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConclusion\nEven though there is a greater percentage of packages whose name starts with the same letter as the name of the programming language compared to the average distribution of words in the English language, it is not by as big a margin as I was expecting.\n\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2022,\n  author = {Krishnamurthy, Dheepak},\n  title = {Programmers’ Preferences for Package Names},\n  date = {2022-07-29},\n  url = {https://kdheepak.com/blog/programmers-preferences-for-package-names/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Programmers’ preferences for package\nnames,” Jul. 29, 2022. https://kdheepak.com/blog/programmers-preferences-for-package-names/."
  },
  {
    "objectID": "blog/drawing-in-ascii/index.html",
    "href": "blog/drawing-in-ascii/index.html",
    "title": "Drawing in ASCII",
    "section": "",
    "text": "We can define a lua filter for pandoc that takes a code block that has the language defined as render_svgbob, and passes the text inside that code block to svgbob.\nHere is a simple 3-bus circuit diagram using text / ascii:\n\nsvgbob\"\"\"\n           |           +-----------+           |\n           +-----------+           +-----------+\n           |           +-----------+           |\n     +-----+1               y12               2+------+\n     |     |                                   |      |\n     |     +-+                               +-+      |\n   .-+-.   |  \\                             /  |    .-+-.\n   |   |       \\                           /        |   |\n   |   |y1    .-+-.                     .-+-.     y2|   |\n   '-+-'       \\   \\ y13          y23  /   /        '-+-'\n     |          \\   \\                 /   /           |\n     |           '-+-'               '-+-'            |\n  -------           \\                 /            -------\n    ---              +               +               ---\n     -               |        3      |                -\n                  ---+-------+-------+---\n                             |\n                           .-+-.\n                           |   |\n                           |   |y3\n                           '-+-'\n                             |\n                             |\n                          -------\n                           -----\n                             -\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2020,\n  author = {Krishnamurthy, Dheepak},\n  title = {Drawing in {ASCII}},\n  date = {2020-06-05},\n  url = {https://kdheepak.com/blog/drawing-in-ascii/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Drawing in ASCII,” Jun. 05, 2020. https://kdheepak.com/blog/drawing-in-ascii/."
  },
  {
    "objectID": "cv/index.html",
    "href": "cv/index.html",
    "title": "Curriculum vitae",
    "section": "",
    "text": "Terminal User Interfaces in Julia\nCrash Course in Energy Systems Modeling & Analysis with Julia\nWhy writing C interfaces in Julia is so easy\nOpen Source Power System Production Cost Modeling in Julia\nScalable Power System Modeling and Analysis\nhttps://github.com/NREL-SIIP/SIIP-Tutorial/\nhttps://github.com/kdheepak/Python-Tutorial/\nhttps://github.com/GMLC-TDC/pesgm-2019-helics-tutorial/\nhttps://github.com/kdheepak/openmod-2019-helics-tutorial/\nhttps://kdheepak.com/think-git/\nhttps://kdheepak.com/interactive-data-visualizations-with-bokeh/"
  },
  {
    "objectID": "cv/index.html#talks-and-tutorials",
    "href": "cv/index.html#talks-and-tutorials",
    "title": "Curriculum vitae",
    "section": "",
    "text": "Terminal User Interfaces in Julia\nCrash Course in Energy Systems Modeling & Analysis with Julia\nWhy writing C interfaces in Julia is so easy\nOpen Source Power System Production Cost Modeling in Julia\nScalable Power System Modeling and Analysis\nhttps://github.com/NREL-SIIP/SIIP-Tutorial/\nhttps://github.com/kdheepak/Python-Tutorial/\nhttps://github.com/GMLC-TDC/pesgm-2019-helics-tutorial/\nhttps://github.com/kdheepak/openmod-2019-helics-tutorial/\nhttps://kdheepak.com/think-git/\nhttps://kdheepak.com/interactive-data-visualizations-with-bokeh/"
  },
  {
    "objectID": "cv/index.html#projects",
    "href": "cv/index.html#projects",
    "title": "Curriculum vitae",
    "section": "Projects",
    "text": "Projects\ntaskwarror-tui: A terminal user interface for taskwarrior written in Rust.\nHELICS: A co-simulation framework as a C/C++ library.\npyhelics: A CFFI interface to HELICS written in Python, with a CLI for process runner, and web client to python server based user interface for better UX.\nOpenDSSDirect.py: A CFFI interface to OpenDSS, a distribution system solver in Delphi/Pascal.\nTerminalUserInterfaces.jl: A terminal user interface library written in Julia.\nlazygit.nvim: A Lua based neovim plugin for interfacing with lazygit."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hello!",
    "section": "",
    "text": "I’m Dheepak!\nI’m a research engineer and software developer. I have experience running energy system models and simulations, such as transmission production cost models and power distribution system analyses, and have developed bespoke models for energy system analysis. I’m proficient with Python, Julia, Rust, and Javascript, and am well versed in scientific data analysis and extract-transform-load workflows. I also enjoy working on open source projects and learning new technologies."
  },
  {
    "objectID": "index.html#contact",
    "href": "index.html#contact",
    "title": "Hello!",
    "section": "Contact",
    "text": "Contact\nYou can contact me through my email (me at kdheepak dot com), GitHub or LinkedIn."
  },
  {
    "objectID": "blog/the-basic-building-blocks-of-ratatui-part-5/index.html",
    "href": "blog/the-basic-building-blocks-of-ratatui-part-5/index.html",
    "title": "The Basic Building blocks of Ratatui - Part 5",
    "section": "",
    "text": "Ratatui is a crate for building terminal user interfaces in Rust.\nIn this post we’ll show how to build custom widgets.\n\n\nCode\n:dep ratatui = \"0.26.2\"\n:dep ratatui-macros = \"0.4.0\"\n    \nfn span_to_html(s: ratatui::text::Span) -&gt; String{\n    let mut html = String::new();\n    html.push_str(\"&lt;span style=\\\"\");\n\n    // Set foreground color\n    if let Some(color) = &s.style.fg {\n        html.push_str(&format!(\"color: {};\", color));\n    }\n\n    // Set background color\n    if let Some(color) = &s.style.bg {\n        html.push_str(&format!(\"background-color: {};\", color));\n    }\n\n    // Add modifiers\n    match s.style.add_modifier {\n        ratatui::style::Modifier::BOLD =&gt; html.push_str(\"font-weight: bold;\"),\n        ratatui::style::Modifier::ITALIC =&gt; html.push_str(\"font-style: italic;\"),\n        ratatui::style::Modifier::UNDERLINED =&gt; html.push_str(\"text-decoration: underline;\"),\n        _ =&gt; {}\n    }\n    html.push_str(\"\\\"&gt;\");\n    html.push_str(&s.content);\n    html.push_str(\"&lt;/span&gt;\");\n    html\n}\n\nfn buffer_to_html(buf: &ratatui::buffer::Buffer) -&gt; String {\n    fn escape_special_html_characters(text: &str) -&gt; String {\n        text.replace(\"&\", \"&amp;\")\n            .replace(\"&lt;\", \"&lt;\")\n            .replace(\"&gt;\", \"&gt;\")\n            .replace(\"\\\"\", \"&quot;\")\n            .replace(\"'\", \"&#39;\")\n    }\n\n    let mut html = String::from(\"&lt;pre&gt;&lt;code&gt;\");\n\n    let w = buf.area.width;\n    let h = buf.area.height;\n\n    for y in 0..h {\n        for x in 0..w {\n            let s = buf.get(x, y).symbol();\n            \n            let escaped = escape_special_html_characters(s); \n\n            let style = buf.get(x, y).style();\n\n            let span = ratatui::text::Span::styled(s, style);\n            \n            html.push_str(&span_to_html(span));\n        }\n        html.push('\\n');\n    }\n\n    html.push_str(\"&lt;/code&gt;&lt;/pre&gt;\");\n\n    html \n}\n    \nfn show_html&lt;D&gt;(content: D) where D: std::fmt::Display {\n    println!(r#\"EVCXR_BEGIN_CONTENT text/html\n&lt;div style=\"display: flex; justify-content:start; gap: 1em; margin: 1em\"&gt;\n{}\n&lt;/div&gt;\nEVCXR_END_CONTENT\"#, content);\n}\n\n\n\nBuffer\nWe saw from an earlier part that frame has a buffer_mut() method:\n\nlet backend = ratatui::backend::TestBackend::new(80, 5);\nlet mut terminal = ratatui::terminal::Terminal::new(backend).unwrap();\nterminal.draw(|frame| {\n    let mut buffer = frame.buffer_mut();\n    dbg!(buffer);\n});\n\n[src/lib.rs:169:5] buffer = Buffer {\n    area: Rect { x: 0, y: 0, width: 80, height: 5 },\n    content: [\n        \"                                                                                \",\n        \"                                                                                \",\n        \"                                                                                \",\n        \"                                                                                \",\n        \"                                                                                \",\n    ],\n    styles: [\n        x: 0, y: 0, fg: Reset, bg: Reset, underline: Reset, modifier: NONE,\n    ]\n}\n\n\nWe saw how to draw to the Buffer using predefined widgets.\n\nuse ratatui::widgets::Widget;\n\nlet backend = ratatui::backend::TestBackend::new(80, 5);\nlet mut terminal = ratatui::terminal::Terminal::new(backend).unwrap();\nterminal.draw(|frame| {\n    let area = frame.size();\n    let mut buffer = frame.buffer_mut();\n    ratatui::widgets::Block::bordered().render(area, &mut buffer);\n    dbg!(buffer);\n});\n\n[src/lib.rs:172:5] buffer = Buffer {\n    area: Rect { x: 0, y: 0, width: 80, height: 5 },\n    content: [\n        \"┌──────────────────────────────────────────────────────────────────────────────┐\",\n        \"│                                                                              │\",\n        \"│                                                                              │\",\n        \"│                                                                              │\",\n        \"└──────────────────────────────────────────────────────────────────────────────┘\",\n    ],\n    styles: [\n        x: 0, y: 0, fg: Reset, bg: Reset, underline: Reset, modifier: NONE,\n    ]\n}\n\n\nBut it is also possible to draw to the Buffer manually:\n\n\nlet backend = ratatui::backend::TestBackend::new(80, 5);\nlet mut terminal = ratatui::terminal::Terminal::new(backend).unwrap();\nterminal.draw(|frame| {\n    let area = frame.size();\n    let mut buffer = frame.buffer_mut();\n\n    ratatui::widgets::Block::bordered().render(area, &mut buffer);\n\n    let x = 15;\n    let y = 2;\n    let string = \"The quick brown fox jumps over the lazy dog.\";\n    let style = ratatui::style::Style::default();\n    buffer.set_string(x, y, string, style);\n    \n    show_html(buffer_to_html(buffer));\n});\n\n\n┌──────────────────────────────────────────────────────────────────────────────┐\n│                                                                              │\n│              The quick brown fox jumps over the lazy dog.                    │\n│                                                                              │\n└──────────────────────────────────────────────────────────────────────────────┘\n\n\n\n\n\n\nWidget\nThe Widget trait in ratatui allows you to define what you want to draw to a Buffer:\n\nstruct MyCustomWidget {\n    counter: usize\n}\n\nimpl Widget for MyCustomWidget {\n\n    fn render(self, area: ratatui::prelude::Rect, buf: &mut ratatui::prelude::Buffer) {\n            let x = 15;\n            let y = 2;\n            let string = format!(\"The quick brown fox jumps over the lazy dog - {}\", self.counter);\n            let style = ratatui::style::Style::default();\n            buf.set_string(x, y, string, style);\n    }\n    \n}\n\n\nlet backend = ratatui::backend::TestBackend::new(80, 5);\nlet mut terminal = ratatui::terminal::Terminal::new(backend).unwrap();\nterminal.draw(|frame| {\n    let area = frame.size();\n    let mut buffer = frame.buffer_mut();\n\n    ratatui::widgets::Block::bordered().render(area, &mut buffer);\n\n    MyCustomWidget{ counter: 2 }.render(area, &mut buffer);\n    \n    show_html(buffer_to_html(buffer));\n});\n\n\n┌──────────────────────────────────────────────────────────────────────────────┐\n│                                                                              │\n│              The quick brown fox jumps over the lazy dog - 2                 │\n│                                                                              │\n└──────────────────────────────────────────────────────────────────────────────┘\n\n\n\n\nHere’s an example of filling the entire buffer with the symbol ▒:\n\nstruct Hatcher;\n\nimpl Widget for Hatcher {\n    fn render(self, area: ratatui::prelude::Rect, buf: &mut ratatui::prelude::Buffer) {\n        for x in area.left()..area.right() {\n            for y in area.top()..area.bottom() {\n                buf.set_string(x, y, \"▒\", ratatui::style::Style::default());\n            }\n        };\n    }\n    \n}\n\nHere’s the output of a Hatcher being rendered:\n\nlet backend = ratatui::backend::TestBackend::new(80, 5);\nlet mut terminal = ratatui::terminal::Terminal::new(backend).unwrap();\nterminal.draw(|frame| {\n    let area = frame.size();\n    let mut buffer = frame.buffer_mut();\n\n    Hatcher.render(area, &mut buffer);\n\n    show_html(buffer_to_html(buffer));\n});\n\n\n▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\n▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\n▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\n▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\n▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\n\n\n\n\nRendering multiple widgets renders to the buffer in the order they are called, and hence latter render calls can overwrite earlier renders.\n\nlet backend = ratatui::backend::TestBackend::new(80, 5);\nlet mut terminal = ratatui::terminal::Terminal::new(backend).unwrap();\nterminal.draw(|frame| {\n    let area = frame.size();\n    let mut buffer = frame.buffer_mut();\n\n    Hatcher.render(area, &mut buffer);\n\n    MyCustomWidget{ counter: 2 }.render(area, &mut buffer);\n\n    show_html(buffer_to_html(buffer));\n});\n\n\n▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\n▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\n▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒The quick brown fox jumps over the lazy dog - 2▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\n▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\n▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\n\n\n\n\n\n\nStatefulWidget\nSometimes you want to store information that is only known during render for later use. For this, you can use a StatefulWidget:\n\nuse ratatui::widgets::StatefulWidget;\n\n#[derive(Default, Debug)]\nstruct Data {\n    area: (usize, usize)\n}\n\nstruct MyCustomWidgetWithState;\n\nimpl StatefulWidget for MyCustomWidgetWithState {\n    type State = Data;\n    \n    fn render(self, area: ratatui::prelude::Rect, buf: &mut ratatui::prelude::Buffer, state: &mut Self::State) {\n        state.area = (area.width as usize, area.height as usize);\n    }\n}\n\n\nlet backend = ratatui::backend::TestBackend::new(80, 5);\nlet mut terminal = ratatui::terminal::Terminal::new(backend).unwrap();\n\nlet mut data = Data::default();\n\nprintln!(\"before: {:?}\", &data);\n\nterminal.draw(|frame| {\n    let area = frame.size();\n    let mut buffer = frame.buffer_mut();\n\n    MyCustomWidgetWithState.render(area, &mut buffer, &mut data);\n});\n\nprintln!(\"after: {:?}\", &data);\n\nbefore: Data { area: (0, 0) }\nafter: Data { area: (80, 5) }\n\n\n\n\nConclusion\nIn these series of posts, we examined how Ratatui works under the hood. For more information, check out the official tutorials and documentation.\n\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2024,\n  author = {Krishnamurthy, Dheepak},\n  title = {The {Basic} {Building} Blocks of {Ratatui} - {Part} 5},\n  date = {2024-05-19},\n  url = {https://kdheepak.com/blog/the-basic-building-blocks-of-ratatui-part-5/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “The Basic Building blocks of Ratatui - Part\n5,” May 19, 2024. https://kdheepak.com/blog/the-basic-building-blocks-of-ratatui-part-5/."
  },
  {
    "objectID": "blog/visualizing-roads-in-the-cities-of-canada/index.html",
    "href": "blog/visualizing-roads-in-the-cities-of-canada/index.html",
    "title": "Visualizing roads in the cities of Canada",
    "section": "",
    "text": "Let’s import some packages first.\n\nusing GeoMakie\nusing GeoInterfaceMakie\nusing GeoInterface\nusing CairoMakie\nusing Shapefile\nusing DataFrames\nusing DataFramesMeta\nusing StringEncodings\nusing Pkg.Artifacts\n\nIf you want to run this interactively, you can replace CairoMakie with GLMakie, i.e.\n- import CairoMakie\n+ import GLMakie\n\nData\nRepresentations of Canada’s national road network are available from Statistics Canada.\n\nartifact_roadnetwork = Pkg.Artifacts.ensure_artifact_installed(\"roadnetwork\", joinpath(@__DIR__, \"Artifacts.toml\"))\npath = joinpath(artifact_roadnetwork, \"lrnf000r21a_e.shp\")\n@time gdf = DataFrame(Shapefile.Table(path));\n@show size(gdf)\nfirst(gdf, 1)\n\n 35.535843 seconds (169.74 M allocations: 8.115 GiB, 23.57% gc time, 1.44% compilation time)\nsize(gdf) = (2242117, 26)\n\n\n1×26 DataFrame\n\n\n\nRow\ngeometry\nOBJECTID\nNGD_UID\nNAME\nTYPE\nDIR\nAFL_VAL\nATL_VAL\nAFR_VAL\nATR_VAL\nCSDDGUID_L\nCSDUID_L\nCSDNAME_L\nCSDTYPE_L\nCSDDGUID_R\nCSDUID_R\nCSDNAME_R\nCSDTYPE_R\nPRDGUID_L\nPRUID_L\nPRNAME_L\nPRDGUID_R\nPRUID_R\nPRNAME_R\nRANK\nCLASS\n\n\n\nPolyline\nInt64?\nString?\nString?\nString?\nString?\nString?\nString?\nString?\nString?\nString?\nString?\nString?\nString?\nString?\nString?\nString?\nString?\nString?\nString?\nString?\nString?\nString?\nString?\nString?\nString?\n\n\n\n\n1\nPolyline(Rect(7.65014e6, 1.27149e6, 7.65038e6, 1.2717e6), Int32[0], Point[Point(7.65014e6, 1.27149e6), Point(7.65017e6, 1.2715e6), Point(7.6502e6, 1.27152e6), Point(7.65023e6, 1.27153e6), Point(7.65024e6, 1.27154e6), Point(7.65027e6, 1.27156e6), Point(7.6503e6, 1.27158e6), Point(7.65031e6, 1.27159e6), Point(7.65033e6, 1.27162e6), Point(7.65035e6, 1.27164e6), Point(7.65036e6, 1.27166e6), Point(7.65037e6, 1.27169e6), Point(7.65038e6, 1.2717e6)])\n1\n5792582\ndes 60\nRANG\nmissing\n195\n195\n182\n194\n2021A00052457050\n2457050\nSaint-Marc-sur-Richelieu\nM\\xc9\n2021A00052457050\n2457050\nSaint-Marc-sur-Richelieu\nM\\xc9\n2021A000224\n24\nQuebec / Qu\\xe9bec\n2021A000224\n24\nQuebec / Qu\\xe9bec\n4\n23\n\n\n\n\n\n\nThe documentation says CSDNAME is the Census subdivision name, which seems to map to cities.\nLet’s convert it to a proper encoding first:\n\nlatin1_to_utf8(s) = decode(Vector{UInt8}(String(coalesce(s, \"\"))), \"Windows-1252\")\n@time @rtransform! gdf begin\n  :CSDNAME_L_UTF8 = latin1_to_utf8(:CSDNAME_L)\n  :CSDNAME_R_UTF8 = latin1_to_utf8(:CSDNAME_R)\nend\n\n 17.307230 seconds (107.98 M allocations: 9.264 GiB, 31.09% gc time, 1.18% compilation time: 7% of which was recompilation)\n\n\n\n\nVisualizations\nWe can now create a plot for each city using Makie:\n\nCairoMakie.activate!(pt_per_unit=1.0, type = \"svg\")\n\n\n\nCode\nfunction plot_city(gdf, city_name, province = nothing)\n  if isnothing(province)\n    df = @rsubset gdf (:CSDNAME_L_UTF8 == city_name || :CSDNAME_R_UTF8 == city_name)\n  else\n    df = @rsubset gdf (( :CSDNAME_L_UTF8 == city_name || :CSDNAME_R_UTF8 == city_name ) && contains(:PRNAME_L, province))\n  end\n  # if province\n  #   df = @rsubset df \n  # end\n  empty_theme = Theme(\n    fonts=(; weird=\"Blackchancery\"),\n    fontsize=32,\n    Axis=(\n      backgroundcolor=:transparent,\n      leftspinevisible=false,\n      rightspinevisible=false,\n      bottomspinevisible=false,\n      topspinevisible=false,\n      xticklabelsvisible=false,\n      yticklabelsvisible=false,\n      xgridcolor=:transparent,\n      ygridcolor=:transparent,\n      xminorticksvisible=false,\n      yminorticksvisible=false,\n      xticksvisible=false,\n      yticksvisible=false,\n      xautolimitmargin=(0.0, 0.0),\n      yautolimitmargin=(0.0, 0.0),\n      titlefont=:weird,\n    ),\n  )\n  with_theme(empty_theme) do\n    fig = Figure()\n    ax = Axis(fig[1, 1])\n    poly!.(GeoInterface.convert.(Ref(CairoMakie.GeometryBasics), df[:, :geometry]); strokewidth=0.1, strokecolor=:black, color=:black)\n    ax.title = city_name\n    fig\n  end\nend;\n\n\n\nplot_city(gdf, \"Toronto\")\n\n\n\n\n\n\n\n\n\nplot_city(gdf, \"Montréal\")\n\n\n\n\n\n\n\n\n\nplot_city(gdf, \"Vancouver\")\n\n\n\n\n\n\n\n\n\nplot_city(gdf, \"Ottawa\")\n\n\n\n\n\n\n\n\n\nplot_city(gdf, \"Calgary\")\n\n\n\n\n\n\n\n\n\nplot_city(gdf, \"Edmonton\")\n\n\n\n\n\n\n\n\n\nplot_city(gdf, \"Winnipeg\")\n\n\n\n\n\n\n\n\n\nplot_city(gdf, \"Victoria\", \"British Columbia\")\n\n\n\n\n\n\n\n\n\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2023,\n  author = {Krishnamurthy, Dheepak},\n  title = {Visualizing Roads in the Cities of {Canada}},\n  date = {2023-04-29},\n  url = {https://kdheepak.com/blog/visualizing-roads-in-the-cities-of-canada/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Visualizing roads in the cities of Canada,”\nApr. 29, 2023. https://kdheepak.com/blog/visualizing-roads-in-the-cities-of-canada/."
  },
  {
    "objectID": "blog/how-to-add-line-numbers-for-code-blocks-in-pelican/index.html",
    "href": "blog/how-to-add-line-numbers-for-code-blocks-in-pelican/index.html",
    "title": "How to add line numbers for code blocks in Pelican",
    "section": "",
    "text": "I’ve found that line numbering with word wrap could only be achieved in Pelican by a certain set of steps. I’ve listed the CSS and the Plugin I’ve used to get that to work.\nUpdate: I’ve removed line numbers because it is selected along with the code if someone wants to copy. I’ll post here if I find a better solution.\nAdd the following lines in your theme.css:\n/* For use with the code_line-number_word-wrap_switcher_jquery.js Pelican plugin */\ncode {\n  overflow: auto;\n  /* This uses `white-space: pre-wrap` to get elements within &lt;pre&gt; tags to wrap.\n    Python, for code chunks within three backticks (```), doesn't wordwrap code lines by default,\n    because they're within &lt;pre&gt; tags, which don't wrap by default.\n    See https://github.com/github/markup/issues/168,\n    which is specifically about this parsing issue,\n    even though that link's discussion is talking about GitHub. */\n  white-space: pre-wrap; /* css-3 */\n  white-space: -moz-pre-wrap; /* Mozilla, since 1999 */\n  white-space: -pre-wrap; /* Opera 4-6 */\n  white-space: -o-pre-wrap; /* Opera 7 */\n  word-wrap: break-word; /* Internet Explorer 5.5+ */\n}\n\n/* Following https://bililite.com/blog/2012/08/05/line-numbering-in-pre-elements/,\nuse CSS to add line numbers to all spans that have the class 'code-line' */\n\n.highlight pre {\n  counter-reset: linecounter;\n  padding-left: 2em;\n}\n.highlight pre span.code-line {\n  counter-increment: linecounter;\n  padding-left: 1em;\n  text-indent: -1em;\n  display: inline-block;\n}\n.highlight pre span.code-line:before {\n  content: counter(linecounter);\n  padding-right: 1em;\n  display: inline-block;\n  color: grey;\n  text-align: right;\n}\nThen, we turn off the default linenums in codehilite. Also add the following pelican-plugin.\nMD_EXTENSIONS = ['fenced_code', 'codehilite(css_class=highlight, linenums=False)', ]\n\nPLUGINS = ['better_codeblock_line_numbering']\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2015,\n  author = {Krishnamurthy, Dheepak},\n  title = {How to Add Line Numbers for Code Blocks in {Pelican}},\n  date = {2015-08-18},\n  url = {https://kdheepak.com/blog/how-to-add-line-numbers-for-code-blocks-in-pelican/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “How to add line numbers for code blocks in\nPelican,” Aug. 18, 2015. https://kdheepak.com/blog/how-to-add-line-numbers-for-code-blocks-in-pelican/."
  },
  {
    "objectID": "blog/loading-a-rust-library-as-a-lua-module-in-neovim/index.html",
    "href": "blog/loading-a-rust-library-as-a-lua-module-in-neovim/index.html",
    "title": "Loading a Rust library as a Lua module in Neovim",
    "section": "",
    "text": "I was curious if it would be possible to write a lua plugin in pure rust. It turns out this is quite straightforward.\nTLDR: You can use rust with a library like mlua to compile a cdylib shared library that is also a valid lua module which then can be loaded by neovim. The link to the git tree for all the code in this blog post is here."
  },
  {
    "objectID": "blog/loading-a-rust-library-as-a-lua-module-in-neovim/index.html#motivation",
    "href": "blog/loading-a-rust-library-as-a-lua-module-in-neovim/index.html#motivation",
    "title": "Loading a Rust library as a Lua module in Neovim",
    "section": "Motivation",
    "text": "Motivation\nNeovim v0.5.0 is out and has good support for using lua as an alternative to vimscript. You can now use a init.lua file instead of a .vimrc. There are now a bunch of really awesome plugins written in pure lua1.\n1 You can find curated lists of neovim plugins and related projects here and here.One reason I think there’s a lot of neat neovim plugins is that lua is a neat language: it is small and fast when using luajit, which neovim supports. Lua is also a clean and simple language, and has support for nice metaprogramming constructs and syntactic sugar that make code easy to read and write.\nHowever, there are a few things that can be quite odd or annoying when writing code in lua. There is no support for continue statements (although there is an acceptable workaround using repeat break until true). The standard library for string handling and manipulation is quite bare bones, and you have to heavily rely on using string:gsub with pattern matching. And as far as I can tell, there’s no Unicode support in the language. Neovim also uses lua 5.1, since that is the latest version of lua that works with luajit. And this means some of the improvements in lua 5.2 and lua 5.3 are not available to neovim users.\nAdmittedly, these are quite minor gripes in the language. And there are lots of awesome packages from LuaRocks that more than make up for the lack of a batteries included standard library in lua.\nAdditionally, there are programming languages like Fennel (a language that uses lisp syntax and provides a macro system), that compile to lua. Using fennel and the macro support provided by the language can make the configuration of your neovim settings concise and clean. Naturally, the neovim community have built excellent tools like Aniseed and hotpot.nvim to make it possible to write your entire configuration in fennel instead of lua. Alternatively, there’s even a TypeScript to lua transpiler, for those so inclined.\nI figured it would be nice to write a lua plugin in pure rust and I wanted to explore how to go about doing that. Rust has metaprogramming features like macros, has a batteries included standard library and a thriving package ecosystem to boot. And more importantly, I like writing code in rust.\nTraditionally, writing a neovim plugin in rust can be achieved by neovim’s RPC mechanism2. However I was curious to see what it would take to make it happen using a native lua module. This blog post is a summary of the scaffolding required to get a hello world lua plugin written in rust set up.\n2 https://github.com/KillTheMule/nvim-rs"
  },
  {
    "objectID": "blog/loading-a-rust-library-as-a-lua-module-in-neovim/index.html#how-it-works",
    "href": "blog/loading-a-rust-library-as-a-lua-module-in-neovim/index.html#how-it-works",
    "title": "Loading a Rust library as a Lua module in Neovim",
    "section": "How it works",
    "text": "How it works\nWhen a require 'mymodule' expression is encountered in lua, the lua interpreter searches for mymodule.lua and mymodule.so files in a bunch of predefined locations. This is the output of typing :lua require'mymodule' in neovim:\n\nE5108: Error executing lua [string \":lua\"]:1: module 'mymodule' not found:\n        no field package.preload['mymodule']\n        no file './mymodule.lua'\n        no file '/Users/runner/work/neovim/neovim/.deps/usr/share/luajit-2.1.0-beta3/mymodule.lua'\n        no file '/usr/local/share/lua/5.1/mymodule.lua'\n        no file '/usr/local/share/lua/5.1/mymodule/init.lua'\n        no file '/Users/runner/work/neovim/neovim/.deps/usr/share/lua/5.1/mymodule.lua'\n        no file '/Users/runner/work/neovim/neovim/.deps/usr/share/lua/5.1/mymodule/init.lua'\n        no file '/Users/USER/.cache/nvim/packer_hererocks/2.1.0-beta3/share/lua/5.1/mymodule.lua'\n        no file '/Users/USER/.cache/nvim/packer_hererocks/2.1.0-beta3/share/lua/5.1/mymodule/init.lua'\n        no file '/Users/USER/.cache/nvim/packer_hererocks/2.1.0-beta3/lib/luarocks/rocks-5.1/mymodule.lua'\n        no file '/Users/USER/.cache/nvim/packer_hererocks/2.1.0-beta3/lib/luarocks/rocks-5.1/mymodule/init.lua'\n        no file './mymodule.so'\n        no file '/usr/local/lib/lua/5.1/mymodule.so'\n        no file '/Users/runner/work/neovim/neovim/.deps/usr/lib/lua/5.1/mymodule.so'\n        no file '/usr/local/lib/lua/5.1/loadall.so'\n        no file '/Users/USER/.cache/nvim/packer_hererocks/2.1.0-beta3/lib/lua/5.1/mymodule.so'\n\nIf a mymodule.so file exists, lua checks if it can call luaopen_mymodule as a function using the C ABI3. This is the template one would follow to write a lua module in C:\n3  https://www.lua.org/pil/26.2.htmlstatic int l_dir (lua_State *L) {\n    ...\n}\n\nstatic const struct luaL_reg mylib [] = {\n  {\"dir\", l_dir},\n  {NULL, NULL}  /* sentinel */\n};\n\n...\n\nint luaopen_mymodule (lua_State *L) {\n  luaL_openlib(L, \"mymodule\", mymodule, 0);\n  return 1;\n}\nThis is not unlike how Python loads C shared libraries as Python modules.\nThis means any shared library that exposes the C ABI lua expects is also a valid lua module. And therefore you can create a lua module that can be imported in neovim’s built in lua interpreter from any programming language that allows you to create shared libraries.\nEnter rust. Rust can compile into a shared library exposing a C ABI. All one would have to do is expose the functions required for a valid lua module. However, without any third party support however, this will involve lots of unsafe code. Fortunately, there’s a actively maintained project called mlua that lets you create a lua module from a rust library (among other features supported by mlua) using rust’s metaprogramming constructs.\nFirst, you will need the following in your Cargo.toml:\n[lib]\ncrate-type = [\"cdylib\"]\n\n[dependencies]\nmlua = { version = \"*\", features = [\"luajit\", \"vendored\", \"module\", \"macros\"] }\nIt is important to use the features flag and add luajit, vendored, and module to the list.\nNow we can create a file src/lib.rs with the following contents:\nuse mlua::chunk;\nuse mlua::prelude::*;\n\nfn hello(lua: &Lua, name: String) -&gt; LuaResult&lt;LuaTable&gt; {\n    let t = lua.create_table()?;\n    t.set(\"name\", name.clone())?;\n    let _globals = lua.globals();\n    lua.load(chunk! {\n        print(\"hello, \" .. $name)\n    })\n    .exec()?;\n    Ok(t)\n}\n\n#[mlua::lua_module]\nfn moonshine(lua: &Lua) -&gt; LuaResult&lt;LuaTable&gt; {\n    let exports = lua.create_table()?;\n    exports.set(\"hello\", lua.create_function(hello)?)?;\n    Ok(exports)\n}\nThis is equivalent to the following lua code in a file called moonshine.lua:\nlocal M = {}\n\nfunction M.hello(name)\n  t = {name = name}\n  print(\"hello, \" .. name)\n  return t\nend\n\nreturn M\nThe name of the function that is annotated with the #[mlua::lua_module] must be the name of the lua module you intend to build. In my case, I called the function moonshine. This will allow me to use require'moonshine' in lua.\nFor MacOS, we also have to add the following to .cargo/config:\n[target.x86_64-apple-darwin]\nrustflags = [\"-C\", \"link-arg=-undefined\", \"-C\", \"link-arg=dynamic_lookup\"]\n\n[target.aarch64-apple-darwin]\nrustflags = [\"-C\", \"link-arg=-undefined\", \"-C\", \"link-arg=dynamic_lookup\"]\nWe need to do this because we need to tell the rust linker that the symbols used in the shared library may not be defined at link time, and will only be available when the shared library is loaded.\nFinally, we can create an instance of the shared library using cargo build --release. Neovim adds the lua folder of plugins to the runtimepath. So to follow convention, we can move libmoonshine.dylib to the lua folder. Lua looks for .so files even on a Mac, so we have to rename the file. Notice rust compiles the library to libmoonshine.dylib, but the lua module need to be moonshine.so.\n$ cargo build --release && mv target/release/libmoonshine.dylib lua/moonshine.so\nHere is a tree view of the folder structure.\n$ tree -a\n.\n├── .cargo\n│  └── config\n├── .git\n│  └── ...\n├── .gitignore\n├── Cargo.lock\n├── Cargo.toml\n├── lua\n│  ├── .gitkeep\n│  └── moonshine.so\n├── README.md\n└── src\n   └── lib.rs\nWe can add this folder manually to neovim’s runtimepath using the packadd or using the Packer package manager:\nlocal execute = vim.api.nvim_command\nlocal fn = vim.fn\n\nlocal install_path = fn.stdpath('data')..'/site/pack/packer/start/packer.nvim'\n\nif fn.empty(fn.glob(install_path)) &gt; 0 then\n  fn.system({'git', 'clone', 'https://github.com/wbthomason/packer.nvim', install_path})\n  execute 'packadd packer.nvim'\nend\n\nlocal packer = require('packer')\nlocal use = packer.use\n\npacker.startup({\n  function()\n    use {\n      '~/gitrepos/moonshine.nvim',\n    }\n  end\n})\nNow in neovim, after a PackerInstall and PackerCompiler you can run :lua print(vim.inspect(require'moonshine'.hello(\"rust\"))):\n\nTada!"
  },
  {
    "objectID": "blog/loading-a-rust-library-as-a-lua-module-in-neovim/index.html#why-is-this-useful",
    "href": "blog/loading-a-rust-library-as-a-lua-module-in-neovim/index.html#why-is-this-useful",
    "title": "Loading a Rust library as a Lua module in Neovim",
    "section": "Why is this useful",
    "text": "Why is this useful\nRust has well established libraries for parsing datetime, dealing with unicode, for concurrency and parallelism, and much much more. This can be useful in developing a lua plugin for neovim that wants to expose features available in a rust package.\nA similar approach can probably be used to write a lua plugin in nim using nimLUA or in Go using gopher-lua or in any language of your choice that can compile to a shared library.\nThis approach does have some downsides though. If you happen to segfault, whether it is due to an incorrect usage of the Lua C API or any other library or reason, you will take neovim down with you. And you will still have to learn the Lua C API to interact with tables and functions in Lua to access the neovim API for anything moderately complex. In theory, the performance of this approach to be better than using the RPC approach, however in practice it wouldn’t make any difference for most if not all real world use cases."
  },
  {
    "objectID": "blog/installing-homebrew-in-an-alternative-location/index.html",
    "href": "blog/installing-homebrew-in-an-alternative-location/index.html",
    "title": "Installing homebrew in an alternative location",
    "section": "",
    "text": "See https://gist.github.com/pudquick/29bc95b6c49703992981864e48f8e341\n\nInstall homebrew in ~/.local/homebrew.\ncd ~/.local/\nmkdir homebrew && curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C homebrew\nAdd the following to PATH:\nalias brew=~/.local/homebrew/bin/brew\n\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2022,\n  author = {Krishnamurthy, Dheepak},\n  title = {Installing `Homebrew` in an Alternative Location},\n  date = {2022-08-03},\n  url = {https://kdheepak.com/blog/installing-homebrew-in-an-alternative-location/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Installing `homebrew` in an alternative\nlocation,” Aug. 03, 2022. https://kdheepak.com/blog/installing-homebrew-in-an-alternative-location/."
  },
  {
    "objectID": "blog/understanding-variables-and-mutability-in-julia/index.html",
    "href": "blog/understanding-variables-and-mutability-in-julia/index.html",
    "title": "Understanding variables and mutability in Julia",
    "section": "",
    "text": "I would like to present a mental model for understanding the basics of variable assignment and mutability in Julia using an analogy involving books and bookshelves, from a complete beginner’s perspective.While analogies can be useful because they allow us to understand complex concepts by comparing them to something more familiar or simpler, they can also be oversimplified, leading to incorrect or incomplete understanding of the topic. To best understand any subject, I recommend using multiple different analogies to bolster your confidence and then dive deeper into the subject matter to harden your intuition.\nImagine you are at a library full of books on bookshelves, but they are all over the place and you can’t find what you want. Also, you can’t interact directly with the books or bookshelves.\nInstead, you have to ask a very smart and helpful librarian, who knows where all the books are and can help you find what you need, to retrieve or modify the books for you. But in order for them to help you, you are form a pact with the librarian to speak in a very specific language with certain rules and decrees.\nIn this mental model, you can think of a program’s memory as a number of bookshelves in a library. The librarian represents the Julia program (i.e. command line interface, the language semantics, the LLVM compiler, etc), and the text in the .jl files is how you communicate using the Julia language.\nTo interact with the bookshelf (i.e., the program’s memory), the Julia language, as part of its vocabulary, provides you with functions and variables among other things.\nFunctions in Julia are like a set of instructions that you give to the librarian, telling them what actions you’d like to take with the books.\nHere we have a simple function foo() that adds the numbers 1 and 2 together and returns the result.\nAnd variables in Julia are the labels the librarian gives you that are associated with specific books on the bookshelf, allowing you to refer to them later on.\nHere we assign the value 1 (also sometimes referred to as bind the value) to the label x, assign (or bind) the value 2 to label y and use the labels x and y to retrieve these values and add them together to get the result.\nBy thinking of code in this way, you can better understand how your program interacts with memory and how the different elements of your code work together."
  },
  {
    "objectID": "blog/understanding-variables-and-mutability-in-julia/index.html#assignment",
    "href": "blog/understanding-variables-and-mutability-in-julia/index.html#assignment",
    "title": "Understanding variables and mutability in Julia",
    "section": "Assignment",
    "text": "Assignment\nIn Julia, the = operator can be used to create a new label.\nLet’s look at a code example:\njulia&gt; x = [0.0, 0.0, 0.0, 0.0];\n\njulia&gt; x\n3-element Vector{Float64}:\n 0.0\n 0.0\n 0.0\n 0.0\nThis creates a new label x that is associated to an object in memory. You can retrieve a value that is bound to a label using the label itself.\n\n  \n  \n    \n      \n    \n    \n      \n    \n    \n      \n    \n    \n      \n    \n    \n      \n    \n  \n  \n  0x00\n  0x01\n  0x02\n  0x03\n  0x04\n  0x05\n  0x06\n  0x07\n  0x08\n  0x09\n  0x0A\n  0x0B\n  0x0C\n  0x0D\n  0x0E\n  0x0F\n  0.\n  0.\n  0.\n  0.\n  \n  0x00\n  0x10\n  0x20\n  0x30\n  0x40\n  0x50\n  0x60\n  x\n  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \n  \n    \n    \n    \n    \n    \n    \n    \n  \n\n\nWe can use existing labels in assignments in the Right Hand Side (RHS):\njulia&gt; y = x;\n\njulia&gt; y\n3-element Vector{Float64}:\n 0.0\n 0.0\n 0.0\n 0.0\nIf you see a = symbol and to the left of the = there is a simple name of a variable, that is an assignment operation. When you ask to perform this action, x = [0.0, 0.0, 0.0, 0.0], the [0.0, 0.0, 0.0, 0.0] object is created, and label called x that is bound to said created object.\nWhen you assign y = x, you are asking to create new label called y that is also bound to the same object as the x label.\n\n  \n  \n    \n      \n    \n    \n      \n    \n    \n      \n    \n    \n      \n    \n    \n      \n    \n  \n  \n  0x00\n  0x01\n  0x02\n  0x03\n  0x04\n  0x05\n  0x06\n  0x07\n  0x08\n  0x09\n  0x0A\n  0x0B\n  0x0C\n  0x0D\n  0x0E\n  0x0F\n  0.\n  0.\n  0.\n  0.\n  \n  0x00\n  0x10\n  0x20\n  0x30\n  0x40\n  0x50\n  0x60\n  x\n  y\n  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \n  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \n\n\nSo in our analogy, the x and y variables are two labels that you and the librarian agree point to the same book on the bookshelf (i.e. the same object in memory).\nIn Julia, you can check the location by using the pointer() function:The pointer function only works for mutable objects\njulia&gt; pointer(x)\nPtr{Float64} @0x0000000161c60d60\n\njulia&gt; pointer(y)\nPtr{Float64} @0x0000000161c60d60\nWhen you call this pointer function, you are passing in a label called x and Julia returns the memory address of the object that was bound to that label. You can see that x and y point to an object that has the same memory address.\nBecause x and y are bound to the same object, changes made to the object through x will also be visible through y.\njulia&gt; x\n3-element Vector{Float64}:\n 0.0\n 0.0\n 0.0\n 0.0\n\njulia&gt; y\n3-element Vector{Float64}:\n 0.0\n 0.0\n 0.0\n 0.0\n\njulia&gt; x[1] = 2.0;\n\njulia&gt; x\n3-element Vector{Float64}:\n 2.0\n 0.0\n 0.0\n 0.0\n\njulia&gt; y\n3-element Vector{Float64}:\n 2.0\n 0.0\n 0.0\n 0.0\nThis is like if the librarian changed a page in the book located at label x. If you came back later and asked for the book located at label y, you’d get the same book as you would have with label y, which would contain the same changes.\n\n  \n  \n    \n      \n    \n    \n      \n    \n    \n      \n    \n    \n      \n    \n    \n      \n    \n  \n  \n  0x00\n  0x01\n  0x02\n  0x03\n  0x04\n  0x05\n  0x06\n  0x07\n  0x08\n  0x09\n  0x0A\n  0x0B\n  0x0C\n  0x0D\n  0x0E\n  0x0F\n  2.\n  0.\n  0.\n  0.\n  \n  0x00\n  0x10\n  0x20\n  0x30\n  0x40\n  0x50\n  0x60\n  x\n  y\n  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \n  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \n\n\nWhen you modify x[1] = 2.0, you are telling Julia to make a change to the object bound to the x label, which in this case changes the first element of the vector to 2.0. And since y points to the same memory location as x, when you inspect the y variable, you will see that it also reflects the same changes made to the underlying memory location. Because both x and y are just different labels pointing to the same memory location, any changes made through one of the labels will be visible when you look at the contents through the other label.\nBut what if you did want to create a entirely new object instead? You can do that using the deepcopy() function:\njulia&gt; y = deepcopy(x)\n4-element Vector{Float64}:\n 2.0\n 0.0\n 0.0\n 0.0\n\njulia&gt; pointer(x)\nPtr{Float64} @0x0000000161c60d60\n\njulia&gt; pointer(y)\nPtr{Float64} @0x0000000107e4c880\nIn the analogy of the bookshelf, using deepcopy() would be like asking the librarian to make a photocopy of a book and place it at a new location on the shelf.\n\n  \n  \n    \n      \n    \n    \n      \n    \n    \n      \n    \n    \n      \n    \n    \n      \n    \n  \n  \n  0x00\n  0x01\n  0x02\n  0x03\n  0x04\n  0x05\n  0x06\n  0x07\n  0x08\n  0x09\n  0x0A\n  0x0B\n  0x0C\n  0x0D\n  0x0E\n  0x0F\n  2.\n  0.\n  0.\n  0.\n  \n  2.\n  0.\n  0.\n  0.\n  \n  0x00\n  0x10\n  0x20\n  0x30\n  0x40\n  0x50\n  0x60\n  x\n  y\n  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \n  \n    \n    \n    \n    \n    \n    \n    \n  \n  \n    \n    \n    \n    \n    \n    \n    \n  \n\n\nThe new object created is completely independent from the old, with its own unique address. Any changes made to the original object will not affect the copy and vice versa.\n\n\n\n\n\n\nAssignments always create labels, and may replace the value in an existing label with a new one."
  },
  {
    "objectID": "blog/understanding-variables-and-mutability-in-julia/index.html#mutability",
    "href": "blog/understanding-variables-and-mutability-in-julia/index.html#mutability",
    "title": "Understanding variables and mutability in Julia",
    "section": "Mutability",
    "text": "Mutability\nWe saw in the previous section that the = operator can be used to assign values to a label. But in Julia, it can also be used to mutate existing values that can be accessed through a label. The difference is what exists on the Left Hand Side (LHS) of the = operator.\nFor example, this is an assignment:\njulia&gt; x = [0.0, 0.0, 0.0, 0.0];\ni.e. if the LHS of the equals operator is a variable without any [] or . or @ symbols, it means an assignment has happened.\nHowever, if there’s a [] in the LHS, then it is not an assignment anymore, but a mutation instead.\njulia&gt; x[1] = 2.0;\n\njulia&gt; x\n3-element Vector{Float64}:\n 2.0\n 0.0\n 0.0\n 0.0\nHere, the equals operation changes the value at the specified index of the LHS, and in this case that is the first index of the object bound by the x label.\nThere’s another case where the equals operation does a mutation, and that is when you use the object notation in the LHS, i.e. object.field.\nIn Julia, you can create struct objects that have fields, and you can get the value of a field by using the object.field:\njulia&gt; mutable struct Book\n         title::String\n         price::Float64\n       end\n\njulia&gt; book = Book(\"The Hitchhiker's Guide to the Galaxy\", 9.99);\n\njulia&gt; book.price\n9.99\nYou can also set the value of the field by using the object.field = value notation. In this case, the field is reassigned or rebound to a new object, but the object is said to be mutated.\njulia&gt; pointer_from_objref(book)\nPtr{Nothing} @0x000000012b440f10\n\njulia&gt; book.price = 4.99;\n\njulia&gt; book\nBook(\"The Hitchhiker's Guide to the Galaxy\", 4.99)\n\njulia&gt; pointer_from_objref(book)\nPtr{Nothing} @0x000000012b440f10\nNotice how the pointer value of the book object did not change.\njulia&gt; pointer(book.title)\nPtr{UInt8} @0x000000012b30ad98\n\njulia&gt; book.title = \"The Hitchhiker's Guide to the Galaxy - Douglas Adams\";\n\njulia&gt; book\nBook(\"The Hitchhiker's Guide to the Galaxy - Douglas Adams\", 9.99)\n\njulia&gt; pointer_from_objref(book)\nPtr{Nothing} @0x000000012b440f10\n\njulia&gt; pointer(book.title)\nPtr{UInt8} @0x000000012b27d800\nMutability is an important concept in Julia because it determines whether or not an object can be modified. In general, mutable objects can be modified, and other objects cannot be modified.\nIn the analogy of the bookshelf, mutability would be like the ability to modify the contents of a book already on the bookshelf. It’s like erasing and re-writing some of the information on a page, without changing the location of the book on the shelf.\nIf a book is mutable, you can add or remove pages or modify existing pages, while if a book is not mutable, you cannot modify its contents and must create a new book with the desired changes.\n\n\n\n\n\n\nRemember, mutations never create new labels in the current scope. They only modify values of existing variables.\n\n\n\nThere are a number of types that represent immutable objects. For example, Ints and Float64s are immutable.\nInterestingly, you can also have a struct that is immutable that contains an instance of a mutable type. You can create a immutable struct by dropping the mutable keyword from the struct definition.\njulia&gt; struct ImmutableBook\n         title::String\n         price::Float64\n         meta::Dict{String, String}\n       end\n\njulia&gt; book = ImmutableBook(\"The Hitchhiker's Guide to the Galaxy\", 9.99, Dict());\n\njulia&gt; book.price = 4.99;\nERROR: setfield!: immutable struct of type ImmutableBook cannot be changed\nStacktrace:\n [1] setproperty!(x::ImmutableBook, f::Symbol, v::Float64)\n   @ Base ./Base.jl:39\n [2] top-level scope\n   @ REPL[3]:1\nThis is like if a book which was sealed or laminated had a reference in one of its pages to another notebook, diary, journal or binder. The first book which is immutable cannot be changed to point to a new second book, and will always have the same reference to the second book. The second book’s contents on the other hand can be modified.\nIn this code, we define a Book struct that has a title and price as before, and an additional meta dictionary. All three fields, title, price and meta point to their respective objects, and once assigned they cannot be reassigned to a new object. In Julia, for immutable structs, if you want to update the data that corresponds to a immutable object, you’ll essentially have to create a new instance of the struct.\njulia&gt; book = Book(\"The Hitchhiker's Guide to the Galaxy\", 9.99, Dict());\n\njulia&gt; book = Book(book.title, 4.99, book.meta);\n\njulia&gt; book\nBook(\"The Hitchhiker's Guide to the Galaxy\", 4.99, Dict{String, String}())\nThe meta dictionary, however, happens to be a mutable object. And that can be modified even though the Book instance itself is immutable.\njulia&gt; book.meta[\"id\"] = \"42\";\n\njulia&gt; book\nBook(\"The Hitchhiker's Guide to the Galaxy\", 4.99, Dict(\"id\" =&gt; \"42\"))\nTo use our analogy, the meta field is like a page inside the book that contains the address of another book on the bookshelf. We cannot change the address on the page, but we can still modify the contents of the book at that address."
  },
  {
    "objectID": "blog/understanding-variables-and-mutability-in-julia/index.html#special-cases",
    "href": "blog/understanding-variables-and-mutability-in-julia/index.html#special-cases",
    "title": "Understanding variables and mutability in Julia",
    "section": "Special cases",
    "text": "Special cases\nAs a sidebar, I want to touch on some special syntax that you will come across when using Julia.\n\nTuple unpacking\nJulia supports syntax that is called unpacking that can be used with Tuples:\njulia&gt; obj = (1, 2)\n(1, 2)\n\njulia&gt; obj[1]\n1\n\njulia&gt; obj[2]\n2\n\njulia&gt; (a, b) = obj\n(1, 2)\n\njulia&gt; a\n1\n\njulia&gt; b\n2\n\njulia&gt; (a, b, remaining...) = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n10-element Vector{Int64}:\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n\njulia&gt; a\n1\n\njulia&gt; b\n2\n\njulia&gt; remaining\n8-element Vector{Int64}:\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n\n\nNamed Tuple unpacking\nJulia also supports NamedTuple and unpacking, however you have to use a semicolon in the LHS in the unpacking syntax:\njulia&gt; obj = (a = 3, b = 4)\n(a = 3, b = 4)\n\njulia&gt; obj.a\n3\n\njulia&gt; obj.b\n4\n\njulia&gt; (; a, b) = (a = 3, b = 4)\n(a = 1, b = 2)\n\njulia&gt; a\n3\n\njulia&gt; b\n4\nEven though the above works fine, I like to be explicit and use ; in the construction of named tuples, like so:\njulia&gt; (; a, b) = (;a = 3, b = 4)\n(a = 3, b = 4)\n\n\nShorthand assignment\nSometimes you may see a character before the =, like += or -=.\na += 1; # a = a + 1\nb -= 2; # b = b - 1\nThese are called updating operations: https://docs.julialang.org/en/v1/manual/mathematical-operations/#Updating-operators\nUpdating operations are just a short hand for the longer assignment form.\n\n\nBroadcasting\nIn Julia there’s a special syntax that you can use (.) in front of normal operators (e.g. .=), which, instead of assignment, does a mutation operation. When you see .=, it is broadcasting the = operation on all elements of the LHS.\njulia&gt; x = [0.0, 0.0, 0.0, 0.0];\n\njulia&gt; pointer(x)\nPtr{Float64} @0x000000012d1bd000\n\njulia&gt; x .= 5.0;\n\njulia&gt; pointer(x)\nPtr{Float64} @0x000000012d1bd000\n\njulia&gt; x\n4-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\nIn Julia, the following:\nx .= 5.0\nis equivalent to\nfor i in eachindex(x)\n  x[i] = 5.0\nend\nThis .= is called broadcasting and you can read more about it in the Julia documentation.\nJulia also supports broadcasting over a subset of elements in an array:\njulia&gt; x[2:3] .= 1.0;\n\njulia&gt; x\n4-element Vector{Float64}:\n 5.0\n 1.0\n 1.0\n 5.0\n\njulia&gt; x[begin:2] .= 2.0;\n\njulia&gt; x[3:end] .= 4.0;\n\njulia&gt; x\n4-element Vector{Float64}:\n 2.0\n 2.0\n 4.0\n 4.0\nBroadcasting is always a mutation operation and will never create a new label.\n\n\nChained = operations\nJulia also supports chained = operations which may do an assignment or mutation depending on what is on the LHS of that operation:\njulia&gt; x = [0.0, 0.0, 0.0, 0.0];\n\njulia&gt; c = x[1] = 2.0;\n2.0\n\njulia&gt; x\n4-element Vector{Float64}:\n 2.0\n 0.0\n 0.0\n 0.0\n\njulia&gt; c\n2.0\nThis is because in Julia everything is an expression, even the = operation. This code:\nc = x[1] = 2.0;\nis equivalent to this:\nc = (x[1] = 2.0);\nwhich effectively does this:\ntmp = x[1] = 2.0\nc = tmp;\n\n\nStrings\nStrings cannot be modified using the array access.\njulia&gt; title = \"The Hitchhiker's Guide to the Galaxy\"\n\"The Hitchhiker's Guide to the Galaxy\"\n\njulia&gt; typeof(title)\nString\n\njulia&gt; title[1] = 't'\nERROR: MethodError: no method matching setindex!(::String, ::Char, ::Int64)\nStacktrace:\n [1] top-level scope\n   @ REPL[138]:1\nYou have to create a new String that contains the content you want:\njulia&gt; title_author = title * \" - Douglas Adams\" # you can concat strings together in Julia using `*`\n\"The Hitchhiker's Guide to the Galaxy - Douglas Adams\"\n\njulia&gt; pointer(title)\nPtr{UInt8} @0x0000000160f687f8\n\njulia&gt; pointer(title_author)\nPtr{UInt8} @0x0000000107ea82a0\nAlternatively, you can use string formatting:\njulia&gt; title_author = \"$title - Douglas Adams\"\n\"The Hitchhiker's Guide to the Galaxy - Douglas Adams\""
  },
  {
    "objectID": "blog/understanding-variables-and-mutability-in-julia/index.html#pass-by-sharing",
    "href": "blog/understanding-variables-and-mutability-in-julia/index.html#pass-by-sharing",
    "title": "Understanding variables and mutability in Julia",
    "section": "Pass by sharing",
    "text": "Pass by sharing\nIn Julia, arguments to functions are always passed by sharing. This means that when a function is called with an argument, the function receives a reference to the object that the argument refers to, rather than a copy of the object. The function can modify the object if it is mutable, but the modifications will also be visible to the caller.\njulia&gt; function add_one(V)\n  for i in eachindex(V)\n    V[i] += 1\n  end\nend\n\njulia&gt; arr = [1, 2, 3];\n\njulia&gt; add_one(arr);\n\njulia&gt; arr\n3-element Vector{Int64}:\n 2\n 3\n 4\nIn the analogy, passing an argument to a function is like reference’s a book’s location and handing that address over to the function. The function can read the content of the book using this location address and make changes to it, but it cannot change the location address itself that was given to it. If the book is mutable, any changes made by the function will also be visible to anyone else holding the same address.\nThe function add_one is like someone taking a book from the shelf, incrementing every number in it by one, and putting it back in the same location. Any object that is holding a reference to the address of the book will be able to see the updated content.\nA function cannot modify the address that the label points to in the call site.\njulia&gt; arr = [1, 2, 3];\n\njulia&gt; function incorrect_replace_with_zeros(arr)\n  arr = [0.0 for _ in eachindex(arr)]\nend\n\njulia&gt; incorrect_replace_with_zeros(arr);\n\njulia&gt; arr\n3-element Vector{Int64}:\n 1\n 2\n 3\nThis may be more obvious if we add calls to the pointer() function:\njulia&gt; arr = [1, 2, 3];\n\njulia&gt; pointer(arr)\nPtr{Int64} @0x000000010d156070\n\njulia&gt; function incorrect_replace_with_zeros(arr)\n  println(\"Before assignment: \", pointer(arr))\n  arr = [0.0 for _ in eachindex(arr)]\n  println(\"After assignment: \", pointer(arr))\nend\n\njulia&gt; incorrect_replace_with_zeros(arr);\nBefore assignment: Ptr{Int64} @0x000000010d156070\nAfter assignment: Ptr{Float64} @0x000000012de42b60\n\njulia&gt; arr\n3-element Vector{Int64}:\n 1\n 2\n 3\n\njulia&gt; pointer(arr)\nPtr{Int64} @0x000000010d156070\nThe function incorrect_replace_with_zeros is like someone taking a book from the shelf, creating a new book, and putting the new book in a different location on the shelf and leaving the old book in the same location. Therefore, the caller still has the original book, and the original book was unaffected by this function. The function also doesn’t return any reference to the new book, and the new book is effectively lost forever.\nYou can only modify the values of the object shared from the call site using the [], .= or .fieldname syntax.\nIf you wanted to write a version that correctly replaces the values of the arr with zeros, you can do the following:\njulia&gt; arr\n3-element Vector{Int64}:\n 1\n 2\n 3\n\njulia&gt; pointer(arr)\nPtr{Int64} @0x000000010d156070\n\njulia&gt; function replace_with_zeros!(arr)\n          println(\"Before assignment: \", pointer(arr))\n          arr .= [0.0 for _ in eachindex(arr)]\n          println(\"After assignment: \", pointer(arr))\n       end\nreplace_with_zeros! (generic function with 1 method)\n\njulia&gt; replace_with_zeros!(arr);\nBefore assignment: Ptr{Int64} @0x000000010d156070\nAfter assignment: Ptr{Int64} @0x000000010d156070\n\njulia&gt; arr\n3-element Vector{Int64}:\n 0\n 0\n 0\n\njulia&gt; pointer(arr)\nPtr{Int64} @0x000000010d156070\nThe function replace_with_zeros! is like someone taking a book from the shelf, erasing its content, and putting it back in the same location. Since the location address is not changed, anyone else holding the same address will see the updated content.\nBy convention, the ! at the end of the function name is a convention in Julia to indicate that the function modifies its argument in place.\n\nDefault keyword arguments\nBoth Python and Julia support keyword arguments with default values for functions, but their behavior is subtly different.\nIn [1]: def append_to_arr(*, arr=[]):\n   ...:   arr.append(1)\n   ...:   return arr\n   ...:\n\nIn [2]: append_to_arr()\nOut[2]: [1]\n\nIn [3]: append_to_arr()\nOut[3]: [1, 1]\n\nIn [4]: append_to_arr()\nOut[4]: [1, 1, 1]\n\nIn [5]: append_to_arr()\nOut[5]: [1, 1, 1, 1]\n\nIn [6]: append_to_arr()\nOut[6]: [1, 1, 1, 1, 1]\njulia&gt; function append_to_arr(; arr = [])\n         push!(arr, 1)\n         return arr\n       end\nappend_to_arr (generic function with 1 method)\n\njulia&gt; append_to_arr()\n1-element Vector{Any}:\n 1\n\njulia&gt; append_to_arr()\n1-element Vector{Any}:\n 1\n\njulia&gt; append_to_arr()\n1-element Vector{Any}:\n 1\n\njulia&gt; append_to_arr()\n1-element Vector{Any}:\n 1\n\njulia&gt; append_to_arr()\n1-element Vector{Any}:\n 1\nIn Python, a function like this:\ndef append_to_arr(*, arr=[]):\n  arr.append(1)\n  return arr\nis equivalent to the following:\nGLOBAL_ARR = []\ndef append_to_arr(*, arr=None):\n  if arr is None\n    arr = GLOBAL_ARR\n  arr.append(1)\n  return arr\nSo every time you call append_to_arr, you are modifying the global array.\nBut in Julia, a function like this:\nfunction append_to_arr(; arr = [])\n  push!(arr, 1)\n  return arr\nend\nis essentially equivalent to:\nfunction append_to_arr(; arr = nothing)\n  if isnothing(arr)\n    arr = []\n  end\n  push!(arr, 1)\n  return arr\nend\nSo every time you call the function, the default value is recreated.\nOther than that, the pass by sharing semantics are the same in Python and Julia. If you passed an keyword argument into these functions in Python and Julia, you’ll get the same behavior.\nIn Python:\nIn [1]: def append_to_arr(*, arr=[]):\n          arr.append(1)\n          return arr\n\nIn [2]: arr = []\n\nIn [3]: append_to_arr(arr = arr)\nOut[3]: [1]\n\nIn [4]: append_to_arr(arr = arr)\nOut[4]: [1, 1]\n\nIn [5]: append_to_arr(arr = arr)\nOut[5]: [1, 1, 1]\n\nIn [6]: arr\nOut[6]: [1, 1, 1]\nIn Julia:\njulia&gt; function append_to_arr(; arr = [])\n           push!(arr, 1)\n           return arr\n       end\nappend_to_arr (generic function with 1 method)\n\njulia&gt; arr = []\nAny[]\n\njulia&gt; append_to_arr(; arr = arr)\n1-element Vector{Any}:\n 1\n\njulia&gt; append_to_arr(; arr)\n2-element Vector{Any}:\n 1\n 1\n\njulia&gt; append_to_arr(; arr)\n3-element Vector{Any}:\n 1\n 1\n 1\n\njulia&gt; arr\n3-element Vector{Any}:\n 1\n 1\n 1\nYou may have noticed that we skipped the = arr in the latter two function calls.\nFor keyword arguments written after a ;, if the variable name is the same as the keyword argument name, Julia lets you use a shorthand syntax that lets you skip writing the same variable name twice.\nThe following are identical:\njulia&gt; append_to_arr(; arr = arr);\n\njulia&gt; append_to_arr(; arr);\nIf the variable name is different from the keyword argument name, you’ll have to use the explicit syntax."
  },
  {
    "objectID": "blog/understanding-variables-and-mutability-in-julia/index.html#const-variables",
    "href": "blog/understanding-variables-and-mutability-in-julia/index.html#const-variables",
    "title": "Understanding variables and mutability in Julia",
    "section": "const variables",
    "text": "const variables\nIn Julia, you can use the const keyword before declaring a variable for the first time in the global scope.\njulia&gt; const CONFIG = Dict()\nIn our analogy, this is like if the librarian handed back a label that would always be bound to the same object for the life of the program.\n\n  \n  \n    \n      \n    \n    \n      \n    \n    \n      \n    \n    \n      \n    \n    \n      \n    \n  \n  \n  \n  CONFIG\n  0x00\n  0x01\n  0x02\n  0x03\n  0x04\n  0x05\n  0x06\n  0x07\n  0x08\n  0x09\n  0x0A\n  0x0B\n  0x0C\n  0x0D\n  0x0E\n  0x0F\n  2.\n  0.\n  0.\n  0.\n  \n  2.\n  0.\n  0.\n  0.\n  \n  Dict\n  \n  \n  0x00\n  0x10\n  0x20\n  0x30\n  0x40\n  0x50\n  0x60\n  x\n  y\n  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \n  \n    \n    \n    \n    \n    \n    \n    \n  \n  \n    \n    \n    \n    \n    \n    \n    \n  \n  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \n  \n    \n    \n    \n    \n  \n\n\nFor the duration of the program, the CONFIG label will point to location 0x6009.\nTrying to redefine a const variable to bind to a different value is an error:\njulia&gt; const CONFIG = []\nERROR: invalid redefinition of constant CONFIG\nStacktrace:\n [1] top-level scope\n   @ REPL[172]:1\nIt is important to remember that even though the variable is const, the object is still mutable.\njulia&gt; CONFIG[\"debug\"] = false;\n\njulia&gt; CONFIG\nDict{Any, Any} with 1 entry:\n  \"debug\" =&gt; false"
  },
  {
    "objectID": "blog/understanding-variables-and-mutability-in-julia/index.html#conclusions",
    "href": "blog/understanding-variables-and-mutability-in-julia/index.html#conclusions",
    "title": "Understanding variables and mutability in Julia",
    "section": "Conclusions",
    "text": "Conclusions\nThinking of programming memory as a bookshelf in a library can help you understand how your program interacts with memory and how mutation works in languages like Julia with shared references.\nThe Julia official documentation is great at formally explaining these concepts and I highly recommend reading the manual to learn more."
  },
  {
    "objectID": "blog/vim-tmux-zsh/index.html",
    "href": "blog/vim-tmux-zsh/index.html",
    "title": "Vim, tmux and zsh — the productivity trio",
    "section": "",
    "text": "I’ve not found a greater combination of tools than vim, tmux and zsh. I’ve detailed below some of the configuration to get it working the way I want it to.\n\n\n\nvim-tmux-zsh\n\n\n# Change prefix key to `\nunbind C-b\nset -g prefix `\nbind-key ` send-prefix\nbind-key C-a set-option -g prefix C-a\nbind-key C-b set-option -g prefix `\n\n# we might need ` at some point, allow switching\nbind-key C-a set-option -g prefix C-a\nbind-key C-b set-option -g prefix `\n\nsetw -g monitor-activity on\nset -g visual-activity on\n\nset-window-option -g window-status-current-bg yellow\n\nset -g mouse-resize-pane on\nset-option -g mouse-select-pane on\nset-option -g mouse-select-window on\nset-window-option -g mode-mouse on\n\nsetw -g mode-mouse on\nset -g terminal-overrides 'xterm*:smcup@:rmcup@'\n\n# set-option -g default-command \"reattach-to-user-namespace -l zsh\"\n\n# Use vim keybindings in copy mode\nsetw -g mode-keys vi\n\nbind-key -t vi-copy v begin-selection\nbind-key -t vi-copy y copy-pipe \"reattach-to-user-namespace pbcopy\"\n\nunbind -t vi-copy Enter\nbind-key -t vi-copy Enter copy-pipe \"reattach-to-user-namespace pbcopy\"\n\n## Keep your finger on ctrl, or don't\nbind-key ^D detach-client\n\n## Pane resize in all four directions using vi bindings.\n## Can use these raw but I map them to shift-ctrl-&lt;h,j,k,l&gt; in iTerm.\nbind -r H resize-pane -L 5\nbind -r J resize-pane -D 5\nbind -r K resize-pane -U 5\nbind -r L resize-pane -R 5\n\n## Smart pane switching with awareness of vim splits.\n## Source: https://github.com/christoomey/vim-tmux-navigator\nbind -n C-h run \"(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\\/)g?(view|vim?)(diff)?$' && tmux send-keys C-h) || tmux select-pane -L\"\nbind -n C-j run \"(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\\/)g?(view|vim?)(diff)?$' && tmux send-keys C-j) || tmux select-pane -D\"\nbind -n C-k run \"(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\\/)g?(view|vim?)(diff)?$' && tmux send-keys C-k) || tmux select-pane -U\"\nbind -n C-l run \"(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\\/)g?(view|vim?)(diff)?$' && tmux send-keys C-l) || tmux select-pane -R\"\nbind -n C-\\ run \"(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\\/)g?(view|vim?)(diff)?$' && tmux send-keys 'C-\\\\') || tmux select-pane -l\"\n\nset -g default-terminal \"xterm\"\n\n## No escape time for vi mode\nset -sg escape-time 0\n\n## Screen like binding for last window\nunbind l\nbind C-a last-window\n\n## Bigger history\nset -g history-limit 10000\n\n## New windows/pane in $PWD\nbind c new-window -c \"#{pane_current_path}\"\n\n## force a reload of the config file\nunbind r\nbind r source-file ~/.tmux.conf \\; display \"Reloaded!\"\n\n## Easy bindings for split\nunbind %\nbind | split-window -h -c \"#{pane_current_path}\"\nbind - split-window -v -c \"#{pane_current_path}\"\n\n#bind y run 'tmux save-buffer - | reattach-to-user-namespace pbcopy '\n#bind C-y run 'tmux save-buffer - | reattach-to-user-namespace pbcopy '\n\n# start window numbering at 1\nset -g base-index 1\n\n# start pane numbering at 1\nset -g pane-base-index 1\n\nbind-key -n C-S-Left swap-window -t -1\nbind-key -n C-S-Right swap-window -t +1\n\n## Here is a jewel of a bind which does the task of flipping the orientation of the current pane with the pane before it (in the ordering) -- I had a SO question on this and nobody answered.\nbind -n M-f move-pane -t '.-'\nbind M-f move-pane -t '.-'\nbind -n M-r move-pane -h -t '.-'\nbind M-r move-pane -h -t '.-'\n\n### Join windows: &lt;prefix&gt; s, &lt;prefix&gt; j\nbind-key j command-prompt -p \"join pane from:\" \"join-pane -s '%%'\"\nbind-key s command-prompt -p \"send pane to:\" \"join-pane -t '%%'\"\n\nzsh\n# Path to your oh-my-zsh installation.\nexport ZSH=/Users/dheepakkrishnamurthy/.oh-my-zsh\n\nZSH_THEME=\"rawsyntax\"\n\nalias vim='mvim -v'\n\nexport TERM=xterm-256color\n\nsource $ZSH/oh-my-zsh.sh\n\n\nvim\nPlugin 'altercation/vim-colors-solarized'\nPlugin 'bling/vim-airline'\nPlugin 'christoomey/vim-tmux-navigator'\nPlugin 'fholgado/minibufexpl.vim'\nPlugin 'honza/vim-snippets'\nPlugin 'jeffkreeftmeijer/vim-numbertoggle'\nPlugin 'morhetz/gruvbox'\nPlugin 'plasticboy/vim-markdown'\nPlugin 'scrooloose/nerdcommenter'\nPlugin 'scrooloose/nerdtree'\nPlugin 'searchcomplete'\nPlugin 'sjl/gundo.vim'\nPlugin 'tomasr/molokai'\nPlugin 'tpope/vim-repeat'\nPlugin 'tpope/vim-surround'\n\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2015,\n  author = {Krishnamurthy, Dheepak},\n  title = {Vim, Tmux and Zsh — the Productivity Trio},\n  date = {2015-05-09},\n  url = {https://kdheepak.com/blog/vim-tmux-zsh/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Vim, tmux and zsh — the productivity trio,”\nMay 09, 2015. https://kdheepak.com/blog/vim-tmux-zsh/."
  },
  {
    "objectID": "blog/using-makie-with-quarto/index.html",
    "href": "blog/using-makie-with-quarto/index.html",
    "title": "Using Makie with Quarto",
    "section": "",
    "text": "Here’s an example of a static image generated using CairoMakie:\n\n\nCode\nusing CairoMakie, Random\n\nRandom.seed!(123)\nn = 200\nx, y, color = randn(n) / 2, randn(n), randn(n)\nfig = Figure(size=(600, 400))\nax1 = Axis(fig[1, 1])\nax2 = Axis(fig[2, 1])\nax3 = Axis(fig[2, 2])\nhist!(ax1, x; color=(:orangered, 0.5), strokewidth=0.5)\nscatter!(ax2, x, y; color=color, markersize=10, strokewidth=0)\nhist!(ax3, y; direction=:x, color=(:dodgerblue, 0.5),\n  strokewidth=0.5)\nxlims!(ax1, -4, 4)\nlimits!(ax2, -4, 4, -3, 3)\nylims!(ax3, -3, 3)\nhideydecorations!(ax3, ticks=false, grid=false)\nhidexdecorations!(ax1, ticks=false, grid=false)\ncolsize!(fig.layout, 1, Relative(2 / 3))\nrowsize!(fig.layout, 1, Relative(1 / 3))\ncolgap!(fig.layout, 10)\nrowgap!(fig.layout, 10)\ncurrent_figure()\n\n\n\n\n\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2023,\n  author = {Krishnamurthy, Dheepak},\n  title = {Using {Makie} with {Quarto}},\n  date = {2023-04-27},\n  url = {https://kdheepak.com/blog/using-makie-with-quarto/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Using Makie with Quarto,” Apr. 27, 2023. https://kdheepak.com/blog/using-makie-with-quarto/."
  },
  {
    "objectID": "blog/create-emacsclientapp-using-applescript/index.html",
    "href": "blog/create-emacsclientapp-using-applescript/index.html",
    "title": "Create Emacsclient.app using AppleScript",
    "section": "",
    "text": "Open Automator and go to File-&gt;New. Click on Application.\n\nThen search for Run AppleScript and drag it to the window on the right.\n\nCopy paste the following gist to the window\non run {input}\n    try\n        set emacs_client_path to \"usr/local/bin/\"\n        set pathtofile to quoted form of POSIX path of input\n\n        set frameVisible to do shell script emacs_client_path & \"emacsclient -e '(&lt;= 2 (length (visible-frame-list)))'\"\n        if frameVisible is \"t\" then\n            do shell script emacs_client_path & \"emacsclient -n \" & pathtofile\n        else\n            -- there is a not a visible frame, launch one\n            do shell script emacs_client_path & \"emacsclient -c -n \" & pathtofile\n        end if\n\n    on error\n        set emacs_client_path to \"usr/local/bin/\"\n        do shell script emacs_client_path & \"emacsclient -c -n \"\n    end try\n\n    -- bring the visible frame to the front\n    tell application \"Emacs\" to activate\n\nend run\nSave the application in /Applications or /Users/$USER/Applications. Now you can quickly open emacsclient from Alfred.\nAlso check out Alfred workflows in the link below\nhttps://github.com/franzheidl/alfred-workflows#open-with-emacs\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2015,\n  author = {Krishnamurthy, Dheepak},\n  title = {Create {Emacsclient.app} Using {AppleScript}},\n  date = {2015-07-18},\n  url = {https://kdheepak.com/blog/create-emacsclientapp-using-applescript/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Create Emacsclient.app using AppleScript,”\nJul. 18, 2015. https://kdheepak.com/blog/create-emacsclientapp-using-applescript/."
  },
  {
    "objectID": "blog/neovim-and-tmux/index.html",
    "href": "blog/neovim-and-tmux/index.html",
    "title": "Neovim and Tmux",
    "section": "",
    "text": "These instructions are OSX specific. On Windows machines, I tend to use Sublime Text or Atom. On Linux machines, I use Vim when my local machine is OSX running tmux.\nI’ve found that with Neovim and tmux, I rarely have to leave the terminal to get something done. I wanted to save here some of the commands required to set up Neovim and tmux.\nFirst update brew. If you don’t have brew, you can install it from here.\nbrew update\nAfter updating brew, you can install Neovim from HEAD using the following.\n# https://github.com/neovim/homebrew-neovim/blob/master/README.md\nbrew install --HEAD neovim\nbrew reinstall --HEAD neovim\nInstall tmux using the following\nbrew install tmux\nThe following allows you to use copy paste instead tmux on OSX.\nbrew install reattach-to-user-namespace\nThis changes the cursor inside vim in the terminal when you change from NORMAL to INSERT and back.\ninfocmp $TERM | sed 's/kbs=^[hH]/kbs=\\\\177/' &gt; $TERM.ti\ntic $TERM.ti\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2016,\n  author = {Krishnamurthy, Dheepak},\n  title = {Neovim and {Tmux}},\n  date = {2016-02-06},\n  url = {https://kdheepak.com/blog/neovim-and-tmux/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Neovim and Tmux,” Feb. 06, 2016. https://kdheepak.com/blog/neovim-and-tmux/."
  },
  {
    "objectID": "blog/advent-of-code-2020-retrospective/index.html",
    "href": "blog/advent-of-code-2020-retrospective/index.html",
    "title": "Advent of Code 2020 Retrospective",
    "section": "",
    "text": "It is Christmas night, and it is the first time this month that I haven’t had to plan my schedule for the evening around a programming puzzle contest. For the last 25 days this month, I participated in Advent of Code 2020, and I managed to collect all 50 stars!\nI solved all the puzzles in the Julia programming language, and my solutions are available here.\nIn this post, I wanted to share why I think you should do Advent of Code and idiomatic solutions to all 25 days in the Julia programming language."
  },
  {
    "objectID": "blog/advent-of-code-2020-retrospective/index.html#why-advent-of-code",
    "href": "blog/advent-of-code-2020-retrospective/index.html#why-advent-of-code",
    "title": "Advent of Code 2020 Retrospective",
    "section": "Why Advent of Code",
    "text": "Why Advent of Code\nAdvent of Code is a lot of fun. I think there’s a few reasons I find it quite enjoyable.\nFirstly, there’s the competitive aspect of it.\nA single puzzle unlocks every night at midnight Eastern Time, and the time when you submit a solution is recorded. There’s a global leaderboard that highlights the top 100 fastest times but you also have the ability to make a private leaderboard that you can share with anyone you like, and you can use that to track your time and challenge your friends or peers.\nFor straightforward puzzles, it is a lot of fun to see who can read, grok and type out a bug-free working program the fastest. A bunch of people also upload recordings of their attempts, and it is humbling to see how fast they can whip out a correct solution to a problem.\nSecondly, unlike most other competitive programming challenges, the puzzles are mainly designed to be a teaching / learning experience.\nEvery puzzle has two parts, where the first part introduces a prompt, and requires you to solve it before viewing the second part. The first part tends to set up an idea or check that you are on the right track, and the second part tends to extend the idea or subvert an obvious decision you made in the first part.\nAlmost all the problems require parsing text input of various formats. In some of the latter puzzles, the puzzle inputs may be designed to hedge against certain naive solutions. Some puzzle inputs will only work with certain data structures or certain algorithms. There are a lot of ah ha moments when you figure what you should use and when, which makes for a very satisfying solve.\nMost problems are based on standard computer science programming concepts, but are never presented as such. Some problems have a mathematics tilt to it, which can make finding those solutions quite rewarding. But also, every problem is designed such that even if you don’t know the theory behind it you’ll be able to stumble your way into solving it if you persevere. Reading other people’s one liners after you hacked it together is quite enlightening.\nAnd since various programming language communities discuss their solutions in dedicated forums, there tends to be a lot of discussion about the tips and tricks you can use in your favourite programming language to express the problem more elegantly. Even after having used Python and Julia for years now, I still learn new things when I read other people’s solutions.\nAnd finally, that brings me to the community.\nThe /r/adventofcode subreddit and the Julia Zulip and Slack channel have been a joy to visit every day after solving the puzzles. I’ve particularly enjoyed seeing all the neat visualizations that come out of Advent of Code by the community.\nThat’s the really neat thing about Advent of Code. The problems are short enough to be solved in less than an hour, the solutions are small enough to be written in just one file, puzzles tend to tackle just one concept or idea, and there is a large enough community around it. Consequently, a lot of people tend to share their solutions, and you get to see a lot of discussion around each puzzle, including a number of different ways to approach the same problem.\nIf you’ve never heard of Advent of Code, I highly recommend you try it out. Below I’ll be discussing solutions in Julia that were shared on Zulip, Slack and Reddit. This will contain spoilers for all days in Advent of Code 2020."
  },
  {
    "objectID": "blog/advent-of-code-2020-retrospective/index.html#solutions",
    "href": "blog/advent-of-code-2020-retrospective/index.html#solutions",
    "title": "Advent of Code 2020 Retrospective",
    "section": "Solutions",
    "text": "Solutions\n\nReport Repair\nPassword Philosophy\nToboggan Trajectory\nPassport Processing\nBinary Boarding\nCustom Customs\nHandy Haversacks\nHandheld Halting\nEncoding Error\nAdapter Array\nSeating System\nRain Risk\nShuttle Search\nDocking Data\nRambunctious Recitation\nTicket Translation\nConway Cubes\nOperation Order\nMonster Messages\nJurassic Jigsaw\nAllergen Assessment\nCrab Combat\nCrab Cups\nLobby Layout\nCombo Breaker\n\n\nDay 1: Report Repair\nDay 1 of advent of code is basically intended to check that you have a programming language installed, and you know how to use simple features it in (e.g. for loops).\nYou can solve the first day with just multiple for loops. However, a more idiomatic solution can be expressed using the combinations function from the Combinatorics.jl1:\n1 aside: Python has a similar function in the standard library: https://docs.python.org/3/library/itertools.html#itertools.combinationsusing Combinatorics\n\nreadInput() = sort(parse.(Int, split(strip(read(joinpath(@__DIR__, \"./input.txt\"), String)))))\n\nexpense_report(data, n) = only(prod(items) for items in combinations(data, n) if sum(items) == 2020)\n\npart1(data = readInput()) = expense_report(data, 2)\npart2(data = readInput()) = expense_report(data, 3)\nIn Julia, small functions are usually made into their single line form. Here’s how you would write it if you would like to do it in the multi-line form.\nfunction part1(data = readInput())\n    expense_report(data, 2)\nend\nFunctions also implicitly return the last expression evaluated as part of the function body, if an explicit return is not present.\n\n\nDay 2: Password Philosophy\nDay 2 is a simple case of parsing, counting characters in a string and knowing that exactly one can be expressed using the xor operation.\nThe solution below is based on Sukera’s.\nreadInput() = split(strip(read(joinpath(@__DIR__, \"./input.txt\"), String)), '\\n')\n\nfunction parseInput(data)\n    d = split.(data, \": \")\n    map(d) do (policy,password)\n        rule, letter = split(policy, ' ')\n        low, high = parse.(Int, split(rule, '-'))\n        (low, high, only(letter), strip(password))\n    end\nend\n\nfunction part1(data = readInput())\n    count(parseInput(data)) do (low, high, letter, password)\n        low &lt;= count(==(letter), password) &lt;= high\n    end\nend\n\nfunction part2(data = readInput())\n    count(parseInput(data)) do (low, high, letter, password)\n        (password[low] == letter) ⊻ (password[high] == letter)\n    end\nend\nJulia supports an infix operator for xor: ⊻.\nIf a function f takes another function as the first argument, you can use the f(c) do ... end block syntax to map over every element in the collection c and apply the anonymous function defined by the do ... end block, the result of which is processed by the function f.\nFor example, if you would like to do the following:\njulia&gt; is_a(letter) = letter == \"a\"\n\njulia&gt; count(is_a, [\"a\", \"b\", \"c\"])\n1\nyou can express it like so instead:\njulia&gt; count([\"a\", \"b\", \"c\"]) do letter\n    letter == \"a\"\nend\n1\nAlternatively, you can pass in an anonymous function as the first argument by using the thin arrow -&gt;:\njulia&gt; count(letter -&gt; letter == \"a\", [\"a\", \"b\", \"c\"])\n1\nIn Julia, you can use the only function to get the one and only element in a collection.\njulia&gt; only(\"h\")\n'h': ASCII/Unicode U+0068 (category Ll: Letter, lowercase)\n\n\nDay 3: Toboggan Trajectory\nA lot of advent of code problems have the puzzle input as text that represents a grid. Day 3 is our first introduction to a grid of trees.\nHaving a one liner to convert the text input to a Matrix can be very useful.\nreadInput() = permutedims(reduce(hcat, collect.(readlines(joinpath(@__DIR__, \"./input.txt\")))))\nHere’s what the input for this particular day looks like:\njulia&gt; A = readInput();\n\njulia&gt; typeof(A)\nMatrix{Char} (alias for Array{Char, 2})\n\njulia&gt; size(A)\n(323, 31)\n\njulia&gt; xy = findall(==('#'), A);\n\njulia&gt; using SparseArrays; sparse([p.I[1] for p in xy], [p.I[2] for p in xy], [1 for _ in xy])\n323×31 SparseMatrixCSC{Int64, Int64} with 2611 stored entries:\n⠟⣿⡿⡯⣮⣿⡇\n⡗⣿⣿⢿⢝⣽⡇\n⡞⡾⣟⢏⣭⢯⡂\n⣷⣿⣿⢽⣟⣻⠇\n⢺⣯⣗⠽⣟⣿⡂\n⡬⡻⡯⡿⣯⣵⡇\n⠾⣟⣿⡺⣽⣫⠅\n⣿⡿⡏⣯⡈⣻⠅\n⢫⢯⣿⣻⡻⡏⡁\n⠭⡟⣻⡿⢽⣿⠇\n⣝⣽⣷⡑⣟⢽⠇\n⢗⣛⣱⣝⠯⡟⡇\n⣌⣷⡛⢯⣿⡗⠇\n⢷⠿⡍⢶⡯⣟⡅\n⡝⣿⡻⣿⣿⢿⡂\n⢜⠽⢯⣿⣻⣇⠁\n⠹⢿⢻⡯⡟⡛⡅\n⣷⣮⣽⣿⡿⡻⡃\n⣻⡯⣞⣷⣿⡏⠆\n⣮⡗⣟⢫⣵⣿⡆\n⣌⣶⣾⣢⣿⣷⡅\n⣜⡷⡿⠷⣿⣛⡁\n⣶⣽⣮⣾⣏⡋⡅\n⣭⣽⣃⣧⣾⣳⡃\n⣟⣿⡿⣯⣿⡽⡀\n⣼⣪⣗⣯⡖⡿⡃\n⣯⢿⡹⣻⣯⣇⡇\n⣵⣟⡝⢾⢽⣳⠅\n⡿⣯⡿⣻⣿⣿⡃\n⣇⣿⣟⣶⣿⣦⡇\n⡺⣝⣷⣎⢟⣛⡅\n⣻⢏⣯⣟⣎⣓⡅\n⡕⣿⣿⣵⣕⢽⡇\n⡿⣟⣿⣮⣯⣷⡃\n⣟⡃⣇⡻⣿⣯⡇\n⣠⣧⣾⣟⣞⢿⠀\nThis solution is based on Henrique Ferrolho’s solution.\nfunction solve(trees, slope)\n    n = cld(size(trees, 1), slope.y)\n    rs = range(1, step=slope.y, length=n)\n    cs = range(1, step=slope.x, length=n)\n    cs = map(c -&gt; mod1(c, size(trees, 2)), cs)\n    idxs = CartesianIndex.(rs, cs)\n    count(==('#'), trees[idxs])\nend\n\npart1(data = readInput()) = solve(data, (x = 3, y = 1))\npart2(data = readInput()) = prod(solve.(Ref(data), [(x=1,y=1),(x=5,y=1),(x=3,y=1),(x=7,y=1),(x=1,y=2)]))\nIn Julia, you ==(e) returns a fixed function which partially applies over the value of e and accepts one argument which you can use to test equality.\njulia&gt; ==('#')('#')\ntrue\n\njulia&gt; ==('#')('.')\nfalse\nJulia has mod1 for 1 based mod, which is useful for indexing in these type of situations. Julia also has ceiling division (cld) and floor division (fld) which happen to be handy here.\nJulia has support for broadcasting using the f.(c) syntax, which allows for the element by element application of the method f on every element in the collection c, i.e. f(e) for e in c. This tends to be very handy in Advent of Code.\njulia&gt; c = [1, 2, 3, 4, 5];\n\njulia&gt; f(x::Int) = x + 1;\n\njulia&gt; println(f.(c))\n[2, 3, 4, 5, 6]\nAdditionally, you can use Ref(data) to tell Julia that it is a singleton that shouldn’t be broadcast over. Alternatively, you can use (data,) to get the same behavior.\n\n\nDay 4: Passport Processing\nSince the input has passports separated by an empty line, you can split on \"\\n\\n\" to get each passport into an element of a Vector.\nreadInput() = split(read(joinpath(@__DIR__, \"./input.txt\"), String), \"\\n\\n\")\nThis is what the first 5 passports look like:\njulia&gt; readInput() |&gt; x -&gt; first(x, 3)\n5-element Vector{SubString{String}}:\n \"hgt:159cm\\npid:561068005 eyr:2025 iyr:2017 cid:139 ecl:blu hcl:#ceb3a1\\nbyr:1940\"\n \"iyr:2014\\nbyr:1986 pid:960679613 eyr:2025 ecl:hzl\"\n \"cid:211 ecl:blu hcl:#7d3b0c iyr:2011 pid:006632702\\nbyr:1982 eyr:2023 hgt:68in\"\nJulia allows piping the results of one function into another using |&gt;.\nLearning how to use regex well in your programming language of choice can make solutions concise and terse. Check out this solution by Pablo Zubieta:\nconst fields1 = (r\"byr\", r\"iyr\", r\"eyr\", r\"hgt\", r\"hcl\", r\"ecl\", r\"pid\")\nconst fields2 = (\n    r\"byr:(19[2-9][0-9]|200[0-2])\\b\",\n    r\"iyr:20(1[0-9]|20)\\b\",\n    r\"eyr:20(2[0-9]|30)\\b\",\n    r\"hgt:(1([5-8][0-9]|9[0-3])cm|(59|6[0-9]|7[0-6])in)\\b\",\n    r\"hcl:#[0-9a-f]{6}\\b\",\n    r\"ecl:(amb|blu|brn|gry|grn|hzl|oth)\\b\",\n    r\"pid:\\d{9}\\b\"\n)\n\npart1(data = readInput()) = count(p -&gt; all(t -&gt; contains(p, t), fields1), data)\npart2(data = readInput()) = count(p -&gt; all(t -&gt; contains(p, t), fields2), data)\nThere were a lot of puzzles this year where I would have been able to parse the input more easily by knowing just a little bit more regex.\n\n\nDay 5: Binary Boarding\nSometimes having a little insight into what the problem is asking can go a long way. For example, in this puzzle, the seat ID is just a binary representation of the input.\n\n  \n  \n    \n      \n    \n    \n      \n    \n    \n      \n    \n    \n      \n    \n    \n      \n    \n  \n  \n  FBFBBFFRLR\n  \n  \n  0101100101\n  \n  \n  357\n\n\nSo you can calculate the seat ID using binary shifting or by converting the input to 1s and 0s and parsing the input as a binary number directly.\nThis solution is based on Andrey Oskin’s:\nseatid(s) = reduce((x, y) -&gt; (x &lt;&lt; 1) | ((y == 'R') | (y == 'B')), s; init = 0)\n# OR\nseatid(s) = parse(Int, map(c -&gt; c ∈ ('R', 'B') ? '1' : '0', s), base = 2)\n\npart1() = mapreduce(seatid, max, eachline(joinpath(@__DIR__, \"./input.txt\")))\n\nfunction part2()\n    seats = sort(seatid.(eachline(joinpath(@__DIR__, \"./input.txt\"))))\n    prev = first(seats)\n    for seat in seats\n        (seat - prev == 2) && return prev + 1\n        prev = seat\n    end\nend\nThe eachline function is an alternative to readlines. It iteratively reads from a stream or IO.\n\n\nDay 6: Custom Customs\nDay 6 introduces set operations with the prompt asking you to identify any and every question, which can be expressed using union and intersect.\nreadInput() = split.(split(read(joinpath(@__DIR__, \"./input.txt\"), String), \"\\n\\n\"))\n\npart1(data = readInput()) = sum(q -&gt; length(∪(Set.(q)...)), data)\npart2(data = readInput()) = sum(q -&gt; length(∩(Set.(q)...)), data)\nIn Julia, you can use the unicode symbols of mathematical operations for union and intersect of sets, namely ∪ and ∩ respectively. In the Julia REPL or text editors with Julia plugins, you can use the name and tab complete to get the unicode symbol.\njulia&gt; \\cup&lt;TAB&gt;\n\njulia&gt; ∪\nunion (generic function with 5 methods)\n\njulia&gt; \\cap&lt;TAB&gt;\n\njulia&gt; ∩\nintersect (generic function with 19 methods)\nAlso, julia has methods on functions like sum that accept a function as the first argument, which is useful for mapping over every element in a collection.\nThe ... operator can be used to splat elements from a collection into arguments of a function.\njulia&gt; f(a, b, c) = @show a, b, c;\n\njulia&gt; x = [1, 2, 3];\n\njulia&gt; f(x...);\n(a, b, c) = (1, 2, 3)\n\n\nDay 7: Handy Haversacks\nDay 7 is the first introduction to graphs this year. While it is possible to find solutions to both parts of this puzzle using recursion, the problem can be well represented as a graph.\nThis code is based on Ali Hamed Moosavian’s and Andrey Oskin’s solutions and visualizations:\nusing LightGraphs\nusing SimpleWeightedGraphs\n\nreadInput() = build_graph(split(strip(read(joinpath(@__DIR__, \"./input.txt\"), String)), '\\n'))\n\nfunction build_graph(data)\n    edges = []\n    for line in data\n        outer_bag, inner_bags = split(line, \" contain \")\n        occursin(\"no other bags\", inner_bags) && continue\n        for bag in split(inner_bags, \", \")\n            counter, name = parse(Int, first(bag)), strip(bag[3:end], '.')\n            e = String(rstrip(outer_bag, 's')), String(rstrip(name, 's')), counter\n            push!(edges, e)\n        end\n    end\n\n    nodes = collect(Set(src for (src, _, _) in edges) ∪ Set(dst for (_, dst, _) in edges))\n    mapping = Dict(n =&gt; i for (i,n) in enumerate(nodes))\n\n    g = SimpleWeightedDiGraph(length(nodes))\n    for (src, dst, counter) in edges\n        add_edge!(g, mapping[src], mapping[dst], counter)\n    end\n    g, mapping, nodes\nend\nNow that you have built a graph, you can find the solution by just traversing the graph.\npart1(data = readInput()) = part1(data[1], data[2])\npart1(g, mapping) = count(!=(0), bfs_parents(g, mapping[\"shiny gold bag\"], dir = :in)) - 1\n\nfunction total_bags(g, v)\n    isempty(neighbors(g, v)) && return 1\n    1 + sum(neighbors(g, v)) do nb\n        Int(g.weights[nb, v]) * total_bags(g, nb)\n    end\nend\n\npart2(data = readInput()) = part2(data[1], data[2])\npart2(g, mapping) = total_bags(g, mapping[\"shiny gold bag\"]) - 1\n \nJulia allows for multiple dispatch based on the number of arguments and the type of each argument. This lets you define multiple methods of a function.\n\n\nDay 8: Handheld Halting\nDay 8 appears to be a straightforward op code interpreter.\nreadInput() = strip(read(joinpath(@__DIR__, \"./input.txt\"), String))\n\npart1(data = readInput()) = boot(split(data, '\\n'))\npart2(data = readInput()) = corrupt(split(data, '\\n'))\n\nfunction boot(instructions)\n    acc, i, s = 0, 1, Set{Int}()\n    while true\n        i ∈ s ? break : push!(s, i)\n        inst, n = split(instructions[i])\n        n = parse(Int, n)\n        inst == \"acc\" && ( i += 1; acc += n )\n        inst == \"jmp\" && ( i += n )\n        inst == \"nop\" && ( i += 1 )\n    end\n    acc\nend\n\nfunction corrupt(original_instructions)\n    for j in 1:length(original_instructions)\n        boot_loop_detected = false\n        acc, i, s = 0, 1, Set{Int}()\n        instructions = copy(original_instructions)\n        if occursin(\"jmp\", instructions[j])\n            instructions[j] = replace(instructions[j], \"jmp\" =&gt; \"nop\")\n        elseif occursin(\"nop\", instructions[j])\n            instructions[j] = replace(instructions[j], \"nop\" =&gt; \"jmp\")\n        end\n        while true\n            i ∈ s ? ( boot_loop_detected = true; break ) : push!(s, i)\n            i &gt; length(instructions) && break\n            inst, n = split(instructions[i])\n            n = parse(Int, n)\n            inst == \"acc\" && ( i += 1; acc += n )\n            inst == \"jmp\" && ( i += n )\n            inst == \"nop\" && ( i += 1 )\n        end\n        !boot_loop_detected && return acc\n    end\nend\nI believe this problem can also be represented as a graph and solved using memoized depth first search. I would like to re-write this solution using LightGraphs.jl.\n\n\nDay 9: Encoding Error\nDay 9 was also straightforward.\nreadInput() = parse.(Int, split(strip(read(joinpath(@__DIR__, \"./input.txt\"), String)), '\\n'))\n\nfunction check(numbers, n)\n    for i in numbers, j in numbers\n        i + j == n && return true\n    end\n    false\nend\n\nfunction part1(numbers = readInput())\n    preamble = 25\n    for i in (preamble + 1):length(numbers)\n        check(numbers[i-preamble:i-1], numbers[i]) && continue\n        return i, numbers[i]\n    end\nend\n\nfunction part2(numbers = readInput())\n    idx, num = part1(numbers)\n    for i in eachindex(numbers), j in i:lastindex(numbers)\n        sum(numbers[i:j]) == num && return sum(extrema(numbers[i:j]))\n    end\nend\nJulia has a function called extrema that computes the minimum and maximum element in a single pass.\njulia&gt; extrema([1,2,3,4,5])\n(1, 5)\nTeo ShaoWei’s solution using Combinatorics.jl is also quite elegant.\nusing Combinatorics\n\nreadInput() = parse.(Int, split(strip(read(joinpath(@__DIR__, \"./input.txt\"), String)), '\\n'))\n\nfunction bad_number(nums, k)\n    for i in (k + 1):length(nums)\n        if !any(num1 + num2 == nums[i] for (num1, num2) in combinations(nums[i-k:i-1], 2))\n            return (i, nums[i])\n        end\n    end\nend\n\nfunction rectify(nums, k)\n    v = bad_number(nums, k)\n    i = j = 1\n    while (s = sum(nums[i:j])) != v\n        s &lt; v ? j += 1 : i += 1\n    end\n    return minimum(nums[i:j]) + maximum(nums[i:j])\nend\n\ninput = readInput()\npart1 = bad_number(input, 25)\npart2 = rectify(input, 25)\n\n\nDay 10: Adapter Array\nPart 2 on this day asks to find the number of distinct ways to arrange the Jolt adapters to connect the charging outlet to the device.\nThis problem can be formulated as a dynamic programming problem. This is most straightforward to solve using recursion and memoization. Here’s Tom Kwong’s solution:\nfunction readInput()\n    data = parse.(Int, split(strip(read(joinpath(@__DIR__, \"./input.txt\"), String)), '\\n')) |&gt; sort\n    vcat(0, data, data[end]+3)\nend\n\npart1(data = readInput()) = count(==(1), diff(data)) * count(==(3), diff(data))\n\nfunction part2(data = readInput())\n    len = length(data)\n    dct = Dict{Int,Int}()\n    function helper(v, i)\n        haskey(dct, i) && return dct[i]\n        i == len && return 1\n        n1 =               v[i+1] - v[i] &lt;= 3 ? helper(v, i+1) : 0\n        n2 = i+2 &lt;= len && v[i+2] - v[i] &lt;= 3 ? helper(v, i+2) : 0\n        n3 = i+3 &lt;= len && v[i+3] - v[i] &lt;= 3 ? helper(v, i+3) : 0\n        val = n1 + n2 + n3\n        dct[i] = val\n        return val\n    end\n    helper(data, 1)\nend\nOne key insight here is that the data doesn’t contain jolt adapters that are only 1 or 3 apart.\njulia&gt; StatsBase.countmap(diff(readInput()))\nDict{Int64, Int64} with 2 entries:\n  3 =&gt; 32\n  1 =&gt; 71\nSince any adapter that is 3 away can’t be removed, the number of distinct ways is just the product of all the different ways you can choose two adapters from the set of 1 away adapters that are in between the 3 away adapters. Here’s a solution based on Jonnie Diegelman’s that takes advantage of that:\nfunction readInput()\n    data = parse.(Int, split(strip(read(joinpath(@__DIR__, \"./input.txt\"), String)), '\\n')) |&gt; sort\n    data = vcat(0, data, data[end]+3)\n    join(string.(diff(data)))\nend\n\npart1(data = readInput()) = count(==('1'), data) * count(==('3'), data)\npart2(data = readInput()) = prod(binomial.(length.(split(data, '3', keepempty=false)), 2) .+ 1)\nThis only works however when the set of 1 away adapters is not longer than 5 elements, which is the case in our puzzle inputs.\nAlternatively, because the steps needed are one, two or three, you can calculate all possible steps by using a tribonacci sum. The tribonacci sum gives us all ways to traverse a set of ones, i.e. 11111... by hopping from 1 to 1 in steps of size 1, 2 or 3.\nThanks to Sukera and Andrey Oskin for their code and insight into solving this puzzle.\nfunction readInput()\n    data = parse.(Int, split(strip(read(joinpath(@__DIR__, \"./input.txt\"), String)), '\\n')) |&gt; sort\n    data = vcat(0, data, data[end]+3)\n    split(join(string.(diff(data))), '3', keepempty = false)\nend\n\nfunction tribonacci(n)\n    n &lt;= 1 && return 1\n    n == 2 && return 2\n    tribonacci(n-1) + tribonacci(n-2) + tribonacci(n-3)\nend\n\npart2(data = readInput()) = prod(tribonacci.(length.(data)))\nThe tribonacci sequence can also be generalized:\nconst a1 = (19 + 3sqrt(33))^(1/3)\nconst a2 = (19 - 3sqrt(33))^(1/3)\nconst b = (586 + 102sqrt(33))^(1/3)\ntribonacci(n) = round(Int, (3b * (1/3 * (a1 + a2 + 1))^(n + 1))/(b^2 - 2b + 4))\nSee the Wikipedia article for more information.\n\n\nDay 11: Seating System\nThis is the first tribute in Advent of Code 2020 to John Conway, who passed away earlier this year. John Conway was an English mathematician, most notably famous for the invention of the cellular automation called the Game of Life.\nreadInput() = permutedims(reduce(hcat, collect.(split(strip(read(joinpath(@__DIR__, \"./input.txt\"), String)), '\\n'))))\n\npart1(data = readInput()) = simulate(data, 0, 1)\npart2(data = readInput()) = simulate(data, 1, size(data, 1) * 2)\n\nfunction simulate(grid, company, sight)\n    while true\n        old_grid = deepcopy(grid)\n        tick(grid, company, sight)\n        grid == old_grid && break\n    end\n    count(==('#'), grid)\nend\n\nfunction tick(grid, company, sight)\n    rows, cols = size(grid)\n    old_grid = deepcopy(grid)\n    for r in 1:rows, c in 1:cols\n        A = adjacent_seats(old_grid, r, c, sight)\n        grid[r, c] == 'L' && count(==('#'), A) == 0 && ( grid[r, c] = '#' )\n        grid[r, c] == '#' && count(==('#'), A) &gt;= 4 + company && ( grid[r, c] = 'L' )\n    end\nend\n\nfunction adjacent_seats(grid, i, j, sight)\n    A = []\n    for direction in CartesianIndex.([(-1,-1), (-1,+1), (+1,-1), (+1, +1), (-1,0), (+1,0), (0,-1), (0,+1)])\n        xy = CartesianIndex(i, j) + direction\n        counter = 1\n        while checkbounds(Bool, grid, xy) && grid[xy] == '.' && counter &lt; sight\n            xy += direction\n            counter += 1\n        end\n        checkbounds(Bool, grid, xy) && push!(A, grid[xy])\n    end\n    A\nend\nThe key thing to remember when implementing cellular automata is to copy the grid at each tick.\nJulia’s CartesianIndex makes it easier to deal with multi-dimensional indexing. Additionally, I found the checkbounds function quite handy for this problem.\n\n\nDay 12: Rain Risk\nThis was one of my better performances on the Julia leaderboard. Using complex numbers makes it quite straightforward to deal with problems involving rotation.\nreadInput() = split(strip(read(joinpath(@__DIR__, \"./input.txt\"), String)), '\\n')\n\nfunction part1(data = readInput())\n    data = map(data) do d\n        first(d), parse(Int, d[begin+1:end])\n    end\n    current = 0 + 0im\n    direction = 1 + 0im\n    for (action, move) in data\n        if     action == 'N' current += move * im\n        elseif action == 'S' current -= move * im\n        elseif action == 'E' current += move\n        elseif action == 'W' current -= move\n        elseif action == 'F' current += direction * move\n        elseif action == 'L' direction *= im^(move ÷ 90)\n        elseif action == 'R' direction *= (-im)^(move ÷ 90)\n        else   error(\"Unrecognized $action, $move\") end\n    end\n    abs(current.re) + abs(current.im)\nend\n\nfunction part2(data = readInput())\n    data = map(data) do d\n        first(d), parse(Int, d[begin+1:end])\n    end\n    waypoint = 10 + 1im\n    current = 0 + 0im\n    direction = 1 + 0im\n    for (action, move) in data\n        if     action == 'N' waypoint += move * im\n        elseif action == 'S' waypoint -= move * im\n        elseif action == 'E' waypoint += move\n        elseif action == 'W' waypoint -= move\n        elseif action == 'F' current += waypoint * move\n        elseif action == 'L' waypoint *= im^(move ÷ 90)\n        elseif action == 'R' waypoint *= (-im)^(move ÷ 90)\n        else   error(\"Unrecognized $action, $move\") end\n    end\n    abs(current.re) + abs(current.im)\nend\nThanks to Colin Caine for suggesting using if ... elseif ... end for minor performance improvements. Check out his other solutions for more optimized takes on the problems.\nMichael Krabbe Borregaard had some neat visualizations for this day.\n \n\n\nDay 13: Shuttle Search\nThis was one of the harder days for me. I had never heard of Chinese Remainder Theorem (CRT) and apparently that’s what this problem was based on.\nHere’s a solution by Micah Halter that uses the CRT function from Mods.jl package.\nusing Mods\n\nfunction readInput()\n    t_str, buses_str = readlines(joinpath(@__DIR__, \"./input.txt\"))\n    time = parse(Int, t_str)\n    buses = map(x-&gt;x==\"x\" ? nothing : parse(Int, x), split(buses_str, ','))\n    time, buses\nend\n\nfunction part1(data = readInput())\n    time, buses = data\n    wait, bus = min(map(x-&gt;(x*ceil(time / x), x), filter(!isnothing, buses))...)\n    (wait - time) * bus\nend\n\nfunction part2(data = readInput())\n    _, buses = data\n    mods = map(k-&gt;Mod{buses[k]}(-(k-1)), filter(k-&gt;!isnothing(buses[k]), keys(buses)))\n    CRT(mods...).val\nend\nHere’s another solution from Doug that finds the cycles using lcm much more elegantly than how I ended up doing it. The key bit of insight here is that the lcm(previous_bus_schedules, new_bus_schedule) will be the cycle at which the pattern repeats. Using this, you can break the problem down by iteratively and calculate the next cycle.\nfunction readInput()\n    input = readlines(joinpath(@__DIR__, \"./input.txt\"))\n    n = parse(Int, input[1])\n    schedule = parse.(Int, replace(split(input[2], \",\"), \"x\" =&gt; \"-1\"))\n    bus_n = filter(!=(-1), schedule)\n    bus_dt = (1:length(schedule))[schedule .!= -1] .- 1\n    bus_n, bus_dt, n\nend\n\nfunction part1(data = readInput())\n    bus_n, bus_dt, n = data\n    min_rem, min_rem_i = findmin(bus_n .- n .% bus_n)\n    bus_n[min_rem_i] * min_rem\nend\n\nfunction part2(data = readInput())\n    bus_n, bus_dt, n = data\n    inc = bus_n[1]\n    n = 0\n    for (i, offset) in zip(bus_n[2:end], bus_dt[2:end])\n        while (n + offset) % i != 0\n            n += inc\n        end\n        inc = lcm(inc, i)\n    end\n    return n\nend\n\n\nDay 14: Docking Data\nThis puzzle requires dealing with bit shifting and masking of bits.\nHere’s Pablo Zubieta’s solution:\nfunction parse_mask_ops(line)\n    mask, list = split(line, r\"\\n\"; limit = 2, keepempty = false)\n    instructions = Tuple{Int,Int}[]\n    for m in eachmatch(r\"mem.(\\d+). = (\\d+)\", list)\n        address, n = m.captures\n        push!(instructions, (parse(Int, address), parse(Int, n)))\n    end\n    return mask, instructions\nend\n\nreadInput() = parse_mask_ops.(split(read(joinpath(@__DIR__, \"./input.txt\"), String), r\"mask = \"; keepempty = false))\n\nstruct Part1 end\nstruct Part2 end\n\nfunction write!(::Part1, memory, mask, addr, n)\n    for (i, bit) in enumerate(mask)\n        if bit != 'X'\n            m = 1 &lt;&lt; (36 - i)\n            n = (bit == '1') ? (n | m) : (n & ~m)\n        end\n    end\n    memory[addr] = n\nend\n\nfunction write!(::Part2, memory, mask, addr, n)\n    inds = Int8[]\n    for (i, bit) in enumerate(mask)\n        if bit == '1'\n            addr |= (1 &lt;&lt; (36 - i))\n        elseif bit == 'X'\n            push!(inds, i)\n        end\n    end\n    l = length(inds)\n    for p in 0:(2^l - 1)\n        for (k, i) in enumerate(inds)\n            m = 1 &lt;&lt; (36 - i)\n            b = (p &gt;&gt; (l - k)) & 1\n            addr = b != 0 ? (addr | m) : (addr & ~m)\n        end\n        memory[addr] = n\n    end\nend\n\nfunction solve(p::Union{Part1,Part2}, input)\n    memory = Dict{Int,Int}()\n    for (mask, list) in input\n        for (address, n) in list\n            write!(p, memory, mask, address, n)\n        end\n    end\n    return sum(values(memory))\nend\n\npart1(data = readInput()) = solve(Part1(), data)\npart2(data = readInput()) = solve(Part2(), data)\nI liked this solution because it was clean and fast:\njulia&gt; @btime part1();\n  392.104 μs (2987 allocations: 251.47 KiB)\n\njulia&gt; @btime part2();\n  5.218 ms (4426 allocations: 5.96 MiB)\nFor comparison, these were the times from my original solution:\njulia&gt; @btime part1();\n  2.860 ms (75635 allocations: 4.77 MiB)\n\njulia&gt; @btime part2();\n  287.836 ms (6234948 allocations: 319.65 MiB)\nThere are more optimized solutions though, for example here are the timings for the solution posted by Colin Caine:\njulia&gt; @btime part1();\n  25.614 μs (14 allocations: 23.98 KiB)\n\njulia&gt; @btime part2();\n  3.354 ms (41 allocations: 5.67 MiB)\n\njulia&gt; @btime part2a();\n  2.865 ms (37 allocations: 5.67 MiB)\n\n\nDay 15: Rambunctious Recitation\nThis puzzle seemed to mainly focus on choosing the right data structure for the history of the memory game. Storing it as a mapping of number to list of indices works well for both parts. A mapping of indices to number will cause the code to be slow, and will make solving part 2 impractical.\nHere’s a solution by Sukera:\nreadInput() = parse.(Int, split(readline(joinpath(@__DIR__, \"./input.txt\")), ','))\n\nmakeArr() = Int[]\n\nfunction solve(input, goal=2020)\n    history = Dict{Int, Vector{Int}}()\n    for (idx, num) in enumerate(input)\n        history[num] = [idx]\n    end\n    turn = length(input) + 1\n    num = 0\n    for t in turn:goal-1\n        arr = get!(history, num, makeArr())\n        push!(arr, t)\n        if isone(length(arr))\n            num = 0\n        else\n            num = abs(arr[end-1] - arr[end])\n        end\n    end\n    num\nend\n\npart1(data = readInput()) = solve(data)\npart2(data = readInput()) = solve(data, 30000000)\nThis video is worth checking out too:\n\n\n\n\nDay 16: Ticket Translation\nCalculating which fields were invalid for part 1 was rather straightforward.\nfunction readInput()\n    data = strip(read(joinpath(@__DIR__, \"./input.txt\"), String))\n    rules, your_ticket, nearby_tickets = split(data, \"\\n\\n\")\n    rules = Dict(map(split(rules, '\\n')) do rule\n        rule, r1start, r1end, r2start, r2end = match(r\"([\\w ]+): (\\d+)-(\\d+) or (\\d+)-(\\d+)\", rule)\n        r1start, r1end, r2start, r2end = parse.(Int, [r1start, r1end, r2start, r2end])\n        rule =&gt; (r1start:r1end, r2start:r2end)\n    end)\n    your_ticket = parse.(Int, split(split(your_ticket, '\\n')[2], ','))\n    nearby_tickets = [parse.(Int, ticket) for ticket in split.(split(nearby_tickets, '\\n')[2:end], ',')]\n    rules, your_ticket, nearby_tickets\nend\n\nfunction part1(data = readInput())\n    rules, your_ticket, nearby_tickets = data\n    invalid_fields = Int[]\n    for ticket in nearby_tickets, field in ticket\n        !any([field ∈ rule for rule in Iterators.flatten(values(rules))]) && push!(invalid_fields, field)\n    end\n    sum(invalid_fields)\nend\nI believe part 2 is better expressed as a graph where you solve the max flow problem to find the maximum matching. However, this is not how I solved it below. I’m hoping to re-solve this problem using LightGraphs.jl.\nfunction part2(data = readInput())\n    rules, your_ticket, nearby_tickets = data\n\n    invalid_tickets = Int[]\n    for (i, ticket) in enumerate(nearby_tickets), field in ticket\n        !any([field ∈ rule for rule in Iterators.flatten(values(rules))]) && push!(invalid_tickets, i)\n    end\n    valid_tickets = deleteat!(nearby_tickets, invalid_tickets)\n\n    valid = ones(Bool, length(first(valid_tickets)), length(rules))\n    for ticket in valid_tickets, (i, field) in enumerate(ticket), (j, rule) in enumerate(rules)\n        _, (rule1, rule2) = rule\n        !(field ∈ rule1 || field ∈ rule2) && ( valid[i, j] = false )\n    end\n\n    final = [0 for _ in 1:length(rules)]\n    accounted_for = Set{Int}()\n    while length(accounted_for) != length(rules)\n        for i in 1:length(first(valid_tickets))\n            valid_rules = [j for j in 1:length(rules) if valid[i, j] && j ∉ accounted_for]\n            if length(valid_rules) == 1\n                final[i] = only(valid_rules)\n                push!(accounted_for, only(valid_rules))\n            end\n        end\n    end\n\n    answer = 1\n    for (interest, k) in enumerate(keys(rules))\n        !startswith(k, \"departure\") && continue\n        for (i, index) in enumerate(final)\n            index == interest && ( answer *= your_ticket[i] )\n        end\n    end\n    answer\nend\nMy learning from this day was that in Julia you can refactor the code with multiple nested for loops:\nfor ticket in valid_tickets\n    for (i, field) in enumerate(ticket)\n        for (j, rule) in enumerate(rules)\n            _, (rule1, rule2) = rule\n            !(field ∈ rule1 || field ∈ rule2) && ( valid[i, j] = false )\n        end\n    end\nend\ninto a single line like so:\nfor ticket in valid_tickets, (i, field) in enumerate(ticket), (j, rule) in enumerate(rules)\n    _, (rule1, rule2) = rule\n    !(field ∈ rule1 || field ∈ rule2) && ( valid[i, j] = false )\nend\nYou can even use the variable from the outer loop as the index in the inner loop, like you’d expect. This can help reduce the nesting level of your inner expressions.\n\n\nDay 17: Conway Cubes\nAnother homage to John Conway, this time in multiple dimensions.\nHere’s Michael Krabbe Borregaard’s succinct solution that takes advantage of CartesianIndices:\nfunction parsefield(lines, n, dims)\n    field = falses(fill(n, dims)...)\n    for (i,line) in enumerate(lines), (j, char) in enumerate(line)\n        char == '#' && (field[i + n÷2, j + n÷2, fill(n÷2, dims-2)...] = true)\n    end\n    field\nend\n\nfunction startup(lines, rounds, dims)\n    field = parsefield(lines, 2*(length(lines) + rounds + 2), dims)\n    newfield = copy(field)\n    for n in 1:rounds\n        for ind in CartesianIndices(field)[fill(2+rounds-n:size(field, 1)-rounds-1+n, dims)...]\n            counter = sum(field[((-1:1) .+ i for i in Tuple(ind))...]) - field[ind]\n            newfield[ind] = field[ind] ? counter in (2,3) : counter == 3\n        end\n        field .= newfield\n    end\n    sum(field)\nend\n\nreadInput() = readlines(joinpath(@__DIR__, \"./input.txt\"))\npart1(data = readInput()) = startup(data, 6, 3)\npart2(data = readInput()) = startup(data, 6, 4)\nCellular automata puzzles are always fun, and make for some neat visualizations. Here are a couple of multi dimensional visualizations by Tom Kwong:\n\n\n\nhttps://twitter.com/tomkwong/status/1339468003608387586\n\n\n\n\n\nhttps://twitter.com/tomkwong/status/1339735696194457600\n\n\n\n\nDay 18: Operation Order\nThe intended way to solve such problems is by implementing the Shunting-yard algorithm.\nHowever, you can hack the operator precedence in your programming language of choice and take advantage of the built in parser.\nHere is Doug’s that managed to get him a spot on the global leaderboard.\nreadInput() = readlines(joinpath(@__DIR__, \"./input.txt\"))\n\n⨦(a,b) = a * b  # define \"multiplication\" with same precedence as \"+\"\npart1(data = readInput()) = sum(l -&gt; eval(Meta.parse(replace(l, \"*\" =&gt; \"⨦\"))), data)\n\n⨱(a,b) = a + b  # define \"addition\" with precedence of \"*\"\npart2(data = readInput()) = sum(l -&gt; eval(Meta.parse(replace(replace(l, \"*\" =&gt; \"⨦\"), \"+\" =&gt; \"⨱\"))), data)\nThe key is to find the right operators in your programming language that have the precedence required as per the prompt.\n\n\nDay 19: Monster Messages\nThis was another hard day for me. First, I tried to implement a recursive algorithm. After failing to figure this out, I picked it up again on the next day with a clean slate, and I tried to build a regex that would match various messages. This worked for part 1 but I kept running out of memory for part 2. Finally, after changing some of the rules hard-coding them by hand I was able to solve part 2.\nSpecifically, I hard coded rules \"8\" and \"11\" to the following.\nrules[\"8\"] = \"(42)+\"\nrules[\"11\"] = \"42 31 | 42 ( 42 31 | 42 ( 42 31 | 42 ( 42 31 | 42 ( 42 31 ) 31 ) 31 ) 31 ) 31\"\nThis limits the depth of rule \"11\". One more step however and I was getting PCRE memory errors.\nHere’s a solution by Doug that does the same thing elegantly and programmatically.\nfunction readInput()\n  rules, messages = split.(split(strip(read(joinpath(@__DIR__, \"./input.txt\"), String)), \"\\n\\n\"), '\\n')\n  rules = Dict(map(rules) do line\n      m = match(r\"^(\\d+): (\\\"(\\w+)\\\"|([^|]+)|(.+))$\", line)\n      String(m[1]) =&gt; m[3] isa Nothing ? (m[4] isa Nothing ? \"(?:$(m[5]))\" : String(m[4])) : String(m[3])\n  end)\n  rules, messages\nend\n\nfunction resolve(rule, rules)\n    ns = [nsi.match for nsi = eachmatch(r\"\\b\\d+\\b\", rule)]\n    n_res = [Regex(\"\\\\b$nsi\\\\b\") for nsi = ns]\n    n_rep = [resolve(rules[nsi], rules) for nsi=ns]\n    replace(reduce(replace, n_res .=&gt; n_rep, init = rule), \" \" =&gt; \"\")\nend\n\nfunction part1(data = readInput())\n    rules, messages = data\n    count(contains(Regex(\"^$(resolve(rules[\"0\"], rules))\\$\")), messages)\nend\n\nfunction part2(data = readInput())\n    rules, messages = data\n    rule42 = resolve(rules[\"42\"], rules)\n    rule31 = resolve(rules[\"31\"], rules)\n    count(contains(Regex(\"^$rule42+($rule42(?1)?$rule31)\\$\")), messages)\nend\nAs noted by /u/furiousleep on /r/adventofcode (along with other valuable feedback), the intended solution for this would use the CYK algorithm. I would like to rewrite my solution using this algorithm instead.\n\n\nDay 20: Jurassic Jigsaw\nThis puzzle was really fun to figure out but also tedious to type out everything that you needed to type out. While I was able to solve the problem, I hard-coded many things in my solution. My code doesn’t even work for the test cases. This is just one of those puzzles that is easier to solve on paper than to write an actual working implementation.\nHere’s a working solution by Alisdair Sullivan:\nreadInput() = map(t -&gt; split(t, \"\\n\"), split(strip(read(joinpath(@__DIR__, \"./input.txt\"), String)), \"\\n\\n\"))\n\nmutable struct Tile\n    id::Int\n    raw::Array{Char, 2}\nend\n\nfunction copy(tile::Tile)\n    new = copy(tile.raw)\n    return Tile(tile.id, new)\nend\n\nt = Tile(1, ['a' 'b' 'c'; 'd' 'e' 'f'])\n\nfunction size(tile::Tile)\n    return Base.size(tile.raw)\nend\n\nfunction top(tile::Tile)\n    (y, x) = size(tile)\n    return tile.raw[range(1, length=x, step=y)]\nend\n\nfunction right(tile::Tile)\n    (y, x) = size(tile)\n    return tile.raw[range((x * y) - y + 1, length=y, step=1)]\nend\n\nfunction bottom(tile::Tile)\n    (y, x) = size(tile)\n    return tile.raw[range(y, length=x, step=y)]\nend\n\nfunction left(tile::Tile)\n    (y, x) = size(tile)\n    return tile.raw[range(1, length=y, step=1)]\nend\n\nfunction flip!(tile)\n    new = tile.raw[:,end:-1:1]\n    tile.raw = new\nend\n\nfunction rotate!(tile)\n    new = rotr90(tile.raw)\n    tile.raw = new\nend\n\nfunction parse_tiles(tiles)\n    return map(tile -&gt; parse_tile(tile), tiles)\nend\n\nfunction parse_tile(tile)\n    m = match(r\"(\\d+)\", first(tile))\n    id = parse(Int, m.captures[1])\n    raw = reduce(vcat, permutedims.(collect.(tile[2:end])))\n    return Tile(id, raw)\nend\n\nfunction find_edges(tile)\n    edges = []\n    push!(edges, top(tile))\n    push!(edges, right(tile))\n    push!(edges, bottom(tile))\n    push!(edges, left(tile))\n    push!(edges, reverse(top(tile)))\n    push!(edges, reverse(right(tile)))\n    push!(edges, reverse(bottom(tile)))\n    push!(edges, reverse(left(tile)))\n    return edges\nend\n\nfunction orient!(tile, matches)\n    for flipped in (false, true), i in 1:4\n        matches(tile) && return\n        flipped && flip!(tile)\n        flipped && matches(tile) && return\n        flipped && flip!(tile)\n        rotate!(tile)\n    end\nend\n\nfunction find_corners(tiles)\n    corners = []\n    ec = count_edges(tiles)\n\n    for tile in tiles\n        c = sum([length(ec[top(tile)]), length(ec[bottom(tile)]), length(ec[left(tile)]), length(ec[right(tile)])])\n        c == 6 && push!(corners, tile)\n    end\n    return corners\nend\n\nfunction count_edges(tiles)\n    acc = Dict{Vector{Char}, Vector{Int}}()\n    for tile in tiles\n        edges = find_edges(tile)\n        for edge in edges\n            haskey(acc, edge) ? acc[edge] = append!(acc[edge], tile.id) : acc[edge] = [tile.id]\n        end\n    end\n    return acc\nend\n\nfunction find_origin(tiles)\n    edges = count_edges(tiles)\n    corner = first(find_corners(tiles))\n    for _ in 1:4\n        t = edges[top(corner)]\n        l = edges[left(corner)]\n        length(t) == 1 && length(l) == 1 && return corner\n        rotate!(corner)\n    end\nend\n\nfunction trim(tile)\n    raw = tile.raw\n    (x, y) = size(tile)\n    return raw[2:(x - 1),2:(y - 1)]\nend\n\nfunction assemble(tiles)\n    origin = find_origin(deepcopy(tiles))\n    edges = count_edges(deepcopy(tiles))\n\n    rows = []\n    row = [origin]\n\n    rowstart = origin\n    current = origin\n\n    while !isnothing(current)\n        match = edges[right(current)]\n        if length(match) == 2\n            next_id = only(filter(id -&gt; id != current.id, match))\n            next_idx = findfirst(t -&gt; t.id == next_id, tiles)\n            next = tiles[next_idx]\n            matcher = (t) -&gt; left(t) == right(current)\n            orient!(next, matcher)\n            push!(row, next)\n            current = next\n        else\n            push!(rows, row)\n            match = edges[bottom(rowstart)]\n            if length(match) == 2\n                next_id = only(filter(id -&gt; id != rowstart.id, match))\n                next_idx = findfirst(t -&gt; t.id == next_id, tiles)\n                next = tiles[next_idx]\n                orient!(next, (t) -&gt; top(t) == bottom(rowstart))\n                current = next\n                rowstart = current\n                row = [rowstart]\n            else\n                current = nothing\n            end\n        end\n    end\n\n    return vcat(map(row -&gt; hcat(map(tile -&gt; trim(tile), row)...), rows)...)\nend\n\nfunction find_seamonsters(assembled)\n    # seamonster pattern\n    indices = [\n        CartesianIndex(19, 1),\n        CartesianIndex(1, 2),\n        CartesianIndex(6, 2),\n        CartesianIndex(7, 2),\n        CartesianIndex(12, 2),\n        CartesianIndex(13, 2),\n        CartesianIndex(18, 2),\n        CartesianIndex(19, 2),\n        CartesianIndex(20, 2),\n        CartesianIndex(2, 3),\n        CartesianIndex(5, 3),\n        CartesianIndex(8, 3),\n        CartesianIndex(11, 3),\n        CartesianIndex(14, 3),\n        CartesianIndex(17, 3)\n    ]\n\n    (xr, yr) = Base.size(assembled) .- (20, 3)\n\n    counts = []\n\n    for flipped in (false, true), i in 1:4\n        flipped ? assembled = assembled[end:-1:1,:] : nothing\n        count = 0\n        idx = CartesianIndex(0,0)\n        for j in 1:yr\n            (x, y) = Tuple(idx)\n            idx = CartesianIndex(0, y + 1)\n            for i in 1:xr\n                idx += CartesianIndex(1, 0)\n                all(i -&gt; assembled[idx + i] == '#', indices) ? count += 1 : nothing\n            end\n        end\n        push!(counts, count)\n        flipped ? assembled = assembled[end:-1:1,:] : nothing\n        assembled = rotr90(assembled)\n    end\n    return counts\nend\n\nfunction check(puzzle)\n    acc = 0\n    for i in eachindex(puzzle)\n        puzzle[i] == '#' ? acc += 1 : nothing\n    end\n    return acc\nend\n\nfunction part1(tiles = readInput())\n  tiles = parse_tiles(tiles)\n  corners = find_corners(tiles)\n  prod(map(tile -&gt; tile.id, corners))\nend\n\nfunction part2(tiles = readInput())\n  tiles = parse_tiles(tiles)\n  corners = find_corners(tiles)\n\n  assembled = assemble(tiles)\n  counts = find_seamonsters(assembled)\n\n  check(assembled) - (maximum(counts) * 15)\nend\nThe key functions I found that others were using were rotl90, rotr90 and rot180 from the Julia standard library, like in Pablo Zubieta’s solution.\nMark Kittisopikul also used imfilter from ImageFiltering.jl to find the monsters, which I thought was pretty neat.\n\n\nDay 21: Allergen Assessment\nThis puzzle is another graph problem that can be solved quite elegantly using maximum flow algorithms to find the maximum matching. Here’s the solution of the test case using LightGraphs.jl and LightGraphFlows.jl, as well as a visualization using GraphRecipes.jl and Plots.jl:\nusing LightGraphs\nusing LightGraphsFlows\nusing GraphRecipes, Plots\n\nreadInput() = strip(read(joinpath(@__DIR__, \"./input.txt\"), String))\n\nfunction m()\n    data = split(strip(readInput()), '\\n')\n    data = map(data) do line\n        ingredients, allergens = match(r\"^(.*) \\(contains (.*)\\)$\", line).captures\n        String.(split(ingredients)), String.(split(allergens, \", \"))\n    end\n\n    all_ingredients, all_allergens = Set{String}(), Set{String}()\n    for (ingredients, allergens) in data\n        all_ingredients = all_ingredients ∪ Set(ingredients)\n        all_allergens = all_allergens ∪ Set(allergens)\n    end\n    all_ingredients, all_allergens = collect(all_ingredients), collect(all_allergens)\n\n    d = Dict()\n    for (ingredients, allergens) in data, allergen in allergens\n        allergen ∉ keys(d) && ( d[allergen] = Set(ingredients) )\n        d[allergen] = d[allergen] ∩ Set(ingredients)\n    end\n\n    MAX_NODES = length(all_ingredients) + length(all_allergens) + 2\n    g = SimpleDiGraph(MAX_NODES)\n    for i in all_ingredients\n        i = 1 + findfirst(==(i), all_ingredients)\n        add_edge!(g, 1, i)\n    end\n    for a in all_allergens\n        a = length(all_ingredients) + 1 + findfirst(==(a), all_allergens)\n        add_edge!(g, a, MAX_NODES)\n    end\n    for (allergen, ingredients) in d, ingredient in ingredients\n        i = 1 + findfirst(==(ingredient), all_ingredients)\n        a = 1 + length(all_ingredients) + findfirst(==(allergen), all_allergens)\n        add_edge!(g, i, a)\n    end\n\n    graphplot(g,\n        names = 1:MAX_NODES,\n        x = vcat([[1]; [2 for _ in 1:length(all_ingredients)]; [3 for _ in 1:length(all_allergens)]; [4]]),\n        y = vcat(\n                 [\n                  [1];\n                  [i - length(all_ingredients) ÷ 2 for i in 1:length(all_ingredients)];\n                  [a - length(all_allergens) ÷ 2 for a in 1:length(all_allergens)];\n                  [1]\n                 ]\n                ),\n        markercolor = vcat([\n                            [colorant\"white\"];\n                            [colorant\"blue\" for _ in 1:length(all_ingredients)];\n                            [colorant\"green\" for _ in 1:length(all_allergens)];\n                            [colorant\"white\"]\n                      ]),\n        markersize = 1)\n\n    _, F = maximum_flow(g, 1, MAX_NODES)\n\n    no_allergen_ingredients = all_ingredients[[i - 1 for i in 1:MAX_NODES if count(==(0), F[i, :]) == MAX_NODES]]\n\n    no_allergen_ingredients\n    sum(map(data) do (ingredients, _)\n        count(i ∈ ingredients for i in no_allergen_ingredients)\n    end)\nend\nHere are a couple of visualizations, the test data visualized as a graph is on the left and the maximum flow solution on the right.\n \n\n\nDay 22: Crab Combat\nThis puzzle was mostly straightforward too. The key here seems to be to implement the stopping conditions correctly, and take advantage of the stack based behavior of recursion in most programming languages.\nHere’s a solution by Henrique Ferrolho’s.\nfunction play(p₁, p₂, part₂)\n  seen = Set{Tuple{Array,Array}}([])\n\n  while !any(isempty.((p₁, p₂)))\n    (p₁, p₂) ∈ seen && return 1, p₁  # infinite-game-prevention rule\n    push!(seen, copy.((p₁, p₂)))\n\n    c₁, c₂ = popfirst!.((p₁, p₂))  # both players draw their top card\n\n    if part₂ && all(length.((p₁, p₂)) .&gt;= (c₁, c₂))\n      w, _ = play(copy.((p₁[1:c₁], p₂[1:c₂]))..., part₂)\n    elseif c₁ &gt; c₂  w = 1\n    elseif c₂ &gt; c₁  w = 2\n    else @error \"Unexpected case: c₁ == c₂\" end\n\n    w == 1 && push!(p₁, c₁, c₂)  # player 1 wins\n    w == 2 && push!(p₂, c₂, c₁)  # player 2 wins\n  end\n\n  !isempty(p₁) ? (1, p₁) : (2, p₂)\nend\n\nfunction day22()\n  p₁, p₂ = split(read(joinpath(@__DIR__, \"./input.txt\"), String), \"\\n\\n\") .|&gt;\n           x -&gt; parse.(Int, split(x, '\\n', keepempty=false)[2:end])\n\n  result₁, result₂ = map([false, true]) do part₂\n    _, deck = play(copy.((p₁, p₂))..., part₂)\n    multipliers = length(deck):-1:1\n    sum(deck .* multipliers)\n  end\n\n  result₁, result₂\nend\n\npart1() = day22()[1]\npart2() = day22()[2]\nJulia allows using unicode symbols as part of variable names which can make for some pretty looking code.\n\n\nDay 23: Crab Cups\nThis puzzle took me a while to figure out. I spent way too long looking for patterns in each state. Thanks to some helpful tips from fellow Julia advent-of-coders, I re-wrote it from scratch using a Linked List.\nThe key idea is here to manage the ordering in a separate data structure. Using a linked list is just one way to handle this.\nHere’s a solution by Nicolas Viennot based on exchanging ideas with Teo ShaoWei that manages to do that quite elegantly using another array to manage indices:\nreadInput() = parse.(Int32, collect(strip(read(joinpath(@__DIR__, \"./input.txt\"), String))))\n\nfunction peek(next, at, n; result=similar(next,n))\n    for i in 1:n\n        result[i] = next[at]\n        at = next[at]\n    end\n    result\nend\n\nfunction run(cups, steps=1)\n    N = length(cups)\n    prealloc = similar(cups, 3)\n\n    next = similar(cups)\n    for i in 1:N\n        next[cups[i]] = cups[mod1(i+1,N)]\n    end\n\n    current = cups[1]\n    for i in 1:steps\n        pickups = peek(next, current, 3, result=prealloc)\n\n        dst = mod1(current-1, N)\n        while dst in pickups\n          dst = mod1(dst-1, N)\n        end\n\n        next[current] = next[pickups[end]]\n        next[pickups[end]] = next[dst]\n        next[dst] = pickups[1]\n        current = next[current]\n    end\n\n    return next\nend\n\npart1(cups = readInput()) = join(peek(run(cups, 100), 1, 8))\npart2(cups = readInput()) = prod(peek(run(vcat(cups, 10:1_000_000), 10_000_000), 1, 2))\n\n\nDay 24: Lobby Layout\nIn another tribute to John Conway, now you must model hexagon grids.\nHaving never worked with hexagon grid before, I reached for complex numbers again, which turned out to be a bad idea. I was indexing a dictionary with the real and imaginary components of the complex number which were floating point numbers. This caused all sorts of indexing problems due to rounding issues.\nI could have sorted this out by using only integer values or by using the coordinate system described in this resource: https://www.redblobgames.com/grids/hexagons/#coordinates-cube.\n\n  \n  \n    \n      \n    \n    \n      \n    \n    \n      \n    \n    \n      \n    \n    \n      \n    \n  \n  \n  0\n  \n  1\n  \n  1\n  0\n  +1\n  1\n  \n  1\n  1\n  x\n  z\n  0\n  \n  1\n  1\n  y\n  1\n  0\n  0\n  0\n  1\n  \n  1\n  \n  1\n  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \n\n\nHere’s another elegant solution by Nicolas Viennot.\nusing OffsetArrays\n\nparse_path(line) = getproperty.(eachmatch(r\"(e|se|sw|w|nw|ne)\", line), :match)\nreadInput() = parse_path.(readlines(joinpath(@__DIR__, \"./input.txt\")))\n\nconst hex_dirs = Dict(k =&gt; CartesianIndex(v) for (k,v) in [\n    \"e\"  =&gt; ( 1,  0),\n    \"se\" =&gt; ( 1, -1),\n    \"sw\" =&gt; ( 0, -1),\n    \"w\"  =&gt; (-1,  0),\n    \"nw\" =&gt; (-1,  1),\n    \"ne\" =&gt; ( 0,  1)\n])\n\nconst N = 200\n\nget_destination(path) = mapreduce(x-&gt;hex_dirs[x], +, path)\n\nfunction init_tiles(paths)\n    A = OffsetArray(falses(N,N),-N÷2-1,-N÷2-1)\n    foreach(dst -&gt; A[dst] ⊻= 1, get_destination.(paths))\n    A\nend\n\npart1(data = readInput()) = count(init_tiles(data))\n\nfunction get_neighbor_counts(A)\n    C = OffsetArray(zeros(Int, N-2,N-2),-N÷2,-N÷2)\n    for i in CartesianIndices(C)\n        C[i] = sum(A[i+dir] for dir in values(hex_dirs))\n    end\n    C\nend\n\nfunction flip_tiles!(A, steps=1)\n    for step in 1:steps\n        C = get_neighbor_counts(A)\n        for i in CartesianIndices(C)\n            if (A[i] && C[i] ∉ (1,2)) || (!A[i] && C[i] == 2)\n                A[i] ⊻= 1\n            end\n        end\n    end\n    A\nend\n\npart2(data = readInput()) = count(flip_tiles!(init_tiles(data), 100))\nAnd another neat visualization by Tom Kwong:\n\n\n\nhttps://twitter.com/tomkwong/status/1342661344424652801\n\n\n\n\nDay 25: Combo Breaker\nAnd finally, for the last day, it is a cryptography based puzzle.\nThe puzzle’s key idea here is based on the Diffie-Hellman key exchange.\nJulia also has a function called powermod in the standard library, which can be used for this. Here’s a solution by Nicolas Viennot:\nreadInput() = parse.(Int, split(strip(read(joinpath(@__DIR__, \"./input.txt\"), String)), '\\n'))\n\nfunction part1(data = readInput())\n    N = 20201227\n    e = 7\n    card_public_key, door_public_key = data\n    privkey1 = findfirst(i -&gt; powermod(e, i, N) == card_public_key, 1:N)\n    solution = powermod(door_public_key, privkey1, N)\nend\nIf you’ve made it all this way, part 2 of day 25 should be a cinch 😉."
  },
  {
    "objectID": "blog/advent-of-code-2020-retrospective/index.html#final-words",
    "href": "blog/advent-of-code-2020-retrospective/index.html#final-words",
    "title": "Advent of Code 2020 Retrospective",
    "section": "Final words",
    "text": "Final words\nThanks to everyone in the Julia community who participated on Zulip, Slack and Reddit. I learnt a lot by reading your solutions and discussing with you all.\nThanks to the mods on /r/adventofcode to making it such a vibrant community to frequent.\nAnd finally, thanks to Eric Wastl for making such a fun event.\nHappy holidays everyone!"
  },
  {
    "objectID": "blog/neovim-languageserver-julia/index.html",
    "href": "blog/neovim-languageserver-julia/index.html",
    "title": "Neovim + LanguageServer.jl",
    "section": "",
    "text": "This is a showcase of some of the capabilities of Julia’s LanguageServer.jl and Neovim’s built-in Language Server Protocol (LSP) client, as well as the instructions to install this setup."
  },
  {
    "objectID": "blog/neovim-languageserver-julia/index.html#capabilities",
    "href": "blog/neovim-languageserver-julia/index.html#capabilities",
    "title": "Neovim + LanguageServer.jl",
    "section": "Capabilities",
    "text": "Capabilities\nThe .vimrc code corresponding to the capability is linked in the caption of each screencapture.\n\nCompletion\n\n\n\nvim.lsp.omnifunc\n\n\n\n\nDocumentation\n\n\n\nvim.lsp.buf.hover\n\n\n\n\nJump to definition\n\n\n\nvim.lsp.buf.definition\n\n\n\n\nLinting\n\n\n\nvim.lsp.util.show_line_diagnostics\n\n\n\n\nReferences\n\n\n\nvim.lsp.buf.references\n\n\n\n\nDocument symbols\n\n\n\nvim.lsp.buf.document_symbol"
  },
  {
    "objectID": "blog/neovim-languageserver-julia/index.html#install",
    "href": "blog/neovim-languageserver-julia/index.html#install",
    "title": "Neovim + LanguageServer.jl",
    "section": "Install",
    "text": "Install\nIf you’d like to use this you will need the following:\n\nneovim v0.5.0\nneovim/nvim-lsp\n\nThe neovim/nvim-lsp repository contains language server configurations for a bunch of languages. Once you have neovim/nvim-lsp installed with your favorite plugin manager, you can run :LspInstall julials. That will download and install LanguageServer.jl and SymbolServer.jl into your global environment. You may also want JuliaEditorSupport/julia-vim for syntax highlighting and other niceties.\nAt the moment you’ll have to make some changes to julials file. The changes required are in this PR: https://github.com/neovim/nvim-lsp/pull/258.\nAnd, at the moment neovim v0.5.0 isn’t released yet. You’ll have to get the latest commit on master and build from source, or download a release from the nightly tag on github. This also means that the lsp client is not stable yet. If you run into any issues, open an issue on https://github.com/neovim/neovim/issues.\nHere is a minimal .vimrc configuration that works with NVIM v0.5.0-539-g91e41c857.\nset nocompatible\nfiletype off\n\nif empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))\n  silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs\n    \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC\nendif\n\ncall plug#begin('~/.local/share/nvim/plugged')\n\nPlug 'JuliaEditorSupport/julia-vim'\nPlug 'neovim/nvim-lsp'\n\ncall plug#end()\n\nlua &lt;&lt; EOF\n    require'nvim_lsp'.julials.setup{}\nEOF\n\nautocmd Filetype julia setlocal omnifunc=v:lua.vim.lsp.omnifunc\n\nnnoremap &lt;silent&gt; &lt;c-]&gt; &lt;cmd&gt;lua vim.lsp.buf.definition()&lt;CR&gt;\nnnoremap &lt;silent&gt; K     &lt;cmd&gt;lua vim.lsp.buf.hover()&lt;CR&gt;\nnnoremap &lt;silent&gt; gr    &lt;cmd&gt;lua vim.lsp.buf.references()&lt;CR&gt;\nnnoremap &lt;silent&gt; g0    &lt;cmd&gt;lua vim.lsp.buf.document_symbol()&lt;CR&gt;\nOnce you have this, you should be able to open a .jl file and LanguageServer.jl will start up! It may take some time for SymbolServer.jl to cache the symbols the first time you run it, so be prepared to wait for a while. You can type :lua print(vim.lsp.get_log_path())&lt;CR&gt; in neovim to get the path to the language server log file. When you see [ Info: Received new data from Julia Symbol Server. you should be good to go."
  },
  {
    "objectID": "blog/tasker-and-google-maps/index.html",
    "href": "blog/tasker-and-google-maps/index.html",
    "title": "Tasker and Google Maps",
    "section": "",
    "text": "This is a small tutorial on how to use Python with SL4A.\n\nWhen Google Now first came out, it would tell you which bus you could take at what time to get to your meeting or event on time based on the location and time information available in Google Calendar. It’s every student’s dream, especially in countries like the United States or Singapore, where transit navigation is very accurate.\nI loved the idea, but I wanted it to be ever so slightly better. For example, I wanted my phone to inform me well in advance at what time I should consider leaving home to get to the bus on time. I also wanted information on earlier and later buses, so I could have knowledge of my options, very similar to the way it shows in Google Directions.\nEnter Tasker. I have a profile set up, which responds to a Google Calendar event reminder. (Tasker requires accessibility access for this by the way.) All my events in Google Calendar have a reminder set to pop up one hour before the event. This triggers a python script that pulls the next event details from Google Calendar, strips and parses the necessary information. Using my current location, the directions to the location is fetched and parsed again for transit details. Tasker then displays this as a notification.\n\nThis is very similar to a thread found on XDA-Dev. The idea is based on the thread, but in the thread brandall decided to do everything in Tasker. While this is completely doable it made it a little complicated to debug. Also, the profiles attached in his thread require the calendar event to have the name Meeting and also require a description to be entered. Again, not something you cannot do, but you will have to invest a significant amount of time in case you want to make any significant change.\nIf you would like to setup something similar follow the steps below.\n\nInstall Tasker, SL4A and the Python intepreter.\nPaste the python script from the link here in the SL4A folder. This script has to be modified depending on what you want done. To use information from your Google Calendar, you need to add your private Google Calendar link to the script. I’ve written this to pull Transit details from a xml data, but you can theoretically do anything.\nSetup a tasker profile similar to what I have below.\n\n\n\nThe Task that will be performed when this context is triggered is setup as below.\n\n \n\nThe above task turns on GPS, finds your current location using GPS and NET, stores the location data in a file and runs the python script. The python script uses the location data written into the file along with your next calendar event information to find out transit details. This then calls the show route task.\nThe show route is attached below.\n\n\n\nAll you need to do now is create an event on your Calendar with location information and you are good to go!\n\nHere are some screenshots of what it looks like after you are done.\n \nI’ve attached the xml from Tasker here so that it can be imported. Show Route and GetCalData. I’ve used Autonotification, a tasker plugin by joaomgcd to display the notification. You will need to use this if you want a button in the notification. This entire setup is currently in a primitive stage, I haven’t added any error handling or additional functionality but I intend to. I will update this post when I do that.\nBeautifulSoup is supported by SL4A in python, which can make it extremely easy to parse information. I haven’t used it in my script though, since mine was a very small program. But it is nice to know that is an option. Big shoutout to PocketTables for offering a world of useful information on Tasker. I found their posts to be extremely helpful. Tasker is an amazing application and is extremely powerful. It can allow for a world of customization.\nIf you have any questions about this setup please do let me know."
  },
  {
    "objectID": "blog/tasker-and-google-maps/index.html#android-projects",
    "href": "blog/tasker-and-google-maps/index.html#android-projects",
    "title": "Tasker and Google Maps",
    "section": "",
    "text": "This is a small tutorial on how to use Python with SL4A.\n\nWhen Google Now first came out, it would tell you which bus you could take at what time to get to your meeting or event on time based on the location and time information available in Google Calendar. It’s every student’s dream, especially in countries like the United States or Singapore, where transit navigation is very accurate.\nI loved the idea, but I wanted it to be ever so slightly better. For example, I wanted my phone to inform me well in advance at what time I should consider leaving home to get to the bus on time. I also wanted information on earlier and later buses, so I could have knowledge of my options, very similar to the way it shows in Google Directions.\nEnter Tasker. I have a profile set up, which responds to a Google Calendar event reminder. (Tasker requires accessibility access for this by the way.) All my events in Google Calendar have a reminder set to pop up one hour before the event. This triggers a python script that pulls the next event details from Google Calendar, strips and parses the necessary information. Using my current location, the directions to the location is fetched and parsed again for transit details. Tasker then displays this as a notification.\n\nThis is very similar to a thread found on XDA-Dev. The idea is based on the thread, but in the thread brandall decided to do everything in Tasker. While this is completely doable it made it a little complicated to debug. Also, the profiles attached in his thread require the calendar event to have the name Meeting and also require a description to be entered. Again, not something you cannot do, but you will have to invest a significant amount of time in case you want to make any significant change.\nIf you would like to setup something similar follow the steps below.\n\nInstall Tasker, SL4A and the Python intepreter.\nPaste the python script from the link here in the SL4A folder. This script has to be modified depending on what you want done. To use information from your Google Calendar, you need to add your private Google Calendar link to the script. I’ve written this to pull Transit details from a xml data, but you can theoretically do anything.\nSetup a tasker profile similar to what I have below.\n\n\n\nThe Task that will be performed when this context is triggered is setup as below.\n\n \n\nThe above task turns on GPS, finds your current location using GPS and NET, stores the location data in a file and runs the python script. The python script uses the location data written into the file along with your next calendar event information to find out transit details. This then calls the show route task.\nThe show route is attached below.\n\n\n\nAll you need to do now is create an event on your Calendar with location information and you are good to go!\n\nHere are some screenshots of what it looks like after you are done.\n \nI’ve attached the xml from Tasker here so that it can be imported. Show Route and GetCalData. I’ve used Autonotification, a tasker plugin by joaomgcd to display the notification. You will need to use this if you want a button in the notification. This entire setup is currently in a primitive stage, I haven’t added any error handling or additional functionality but I intend to. I will update this post when I do that.\nBeautifulSoup is supported by SL4A in python, which can make it extremely easy to parse information. I haven’t used it in my script though, since mine was a very small program. But it is nice to know that is an option. Big shoutout to PocketTables for offering a world of useful information on Tasker. I found their posts to be extremely helpful. Tasker is an amazing application and is extremely powerful. It can allow for a world of customization.\nIf you have any questions about this setup please do let me know."
  },
  {
    "objectID": "blog/better-git-log-with-git-ls/index.html",
    "href": "blog/better-git-log-with-git-ls/index.html",
    "title": "Better git log with git ls",
    "section": "",
    "text": "Add the following command to ~/.gitconfig:\n[alias]\n    ls = log --graph --abbrev-commit --decorate --color=always --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) - %C(dim red)%an%C(reset)%C(bold yellow)%d%C(reset)' --all\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2015,\n  author = {Krishnamurthy, Dheepak},\n  title = {Better Git Log with Git Ls},\n  date = {2015-06-02},\n  url = {https://kdheepak.com/blog/better-git-log-with-git-ls/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Better git log with git ls,” Jun. 02, 2015.\nhttps://kdheepak.com/blog/better-git-log-with-git-ls/."
  },
  {
    "objectID": "blog/raspberry-pi-powered-led-lamp/index.html",
    "href": "blog/raspberry-pi-powered-led-lamp/index.html",
    "title": "Raspberry Pi powered LED lamp",
    "section": "",
    "text": "With a Raspberry Pi, you can control a RGB addressable LED strip. The instructions are very simple [1] and the results are pretty cool. I decided to make a desk lamp with a web interface. This post will go through the steps to build your own Pi powered desk lamp."
  },
  {
    "objectID": "blog/raspberry-pi-powered-led-lamp/index.html#requirements",
    "href": "blog/raspberry-pi-powered-led-lamp/index.html#requirements",
    "title": "Raspberry Pi powered LED lamp",
    "section": "Requirements",
    "text": "Requirements\n\nRaspberry Pi\nMemory card (greater than 4 GB recommended)\nPower Adapter\nLED Strip (LPD8806)\nWires\nLamp shade"
  },
  {
    "objectID": "blog/raspberry-pi-powered-led-lamp/index.html#instructions",
    "href": "blog/raspberry-pi-powered-led-lamp/index.html#instructions",
    "title": "Raspberry Pi powered LED lamp",
    "section": "Instructions",
    "text": "Instructions\nAny model of the Raspberry Pi should work for this project. First we need to set up the Raspberry Pi.\n\nHardware\nTo use SPI on the Raspberry Pi, you need to connect 4 pins. Adafruit has an excellent image in their tutorial that shows how you can do this, which I’ve also linked below.\n\n\n\n\nWiring Diagram\n\n\n\nI’ve used the same power source to the LED strip to power the Raspberry Pi as well.\nI found the lamp shades on Amazon. I purchased them in white, since the LEDs are RGB.\nI purchased the LED strip from Adafruit.\n\n\nSoftware\nDownload the latest Raspbian from the official source. I used the image 2016-03-18-raspbian-jessie.img. Flash the operating system onto a memory card.\nsudo dd bs=1m if=2016-03-18-raspbian-jessie.img of=/dev/rdisk$DISKNUMBER\nWhen using dd on OSX, I’ve found that rdisk is much faster than disk1.\n1 Both rdisk and disk will work fine, but if you are using disk be prepared to wait longer - it took about an hour in my case.(Optional) Expand the file system to use all the available space on the memory card.\nsudo raspi-config\n-&gt; Expand File System\n-&gt; Save\n-&gt; Reboot\nTo control this particular LED strip, we are going to use the SPI bus on the Raspberry Pi. We need to set up the Pi to use SPI.\nsudo raspi-config\n-&gt; Advanced Options\n-&gt; Enable SPI\n-&gt; Enable on Boot\n-&gt; Save\n-&gt; Reboot\nNext, we need to install some packages to use the SPI bus. First, let’s update the Raspberry Pi.\nsudo apt-get update\nsudo apt-get upgrade\nThen we need to install python-dev, pyspidev and BiblioPixel. These are all required to control the LED strip.\nsudo apt-get install python-dev\nsudo pip install spidev\nsudo pip install BiblioPixel\nInstead of installing spidev and BiblioPixel, you can also clone the repositories and add them to your PYTHONPATH. I found that sudo pip install &lt;package-name&gt; is easier, however I had to browse through the source code of BiblioPixel and found having a local copy accessible was helpful.\nFinally, we need Flask to set up a server on the Raspberry Pi.\nsudo pip install Flask\nI’ve used sudo for all the pip installations. It is definitely required for spidev, but may not be for the others. You will need to use sudo to run the application, since root access is required to control GPIO pins on the Raspberry Pi.\n\nBiblioPixel\nThe tutorial on Adafruit’s page links to a library for their LED strip, which the author has deprecated in favour of the excellent BiblioPixel [2]. I recommend using BiblioPixel as well — if you want to use a different LED strip in the future this will make it very easy to use the same code base.\nAt this point, you should be able to run a few examples, and see animations on your LED strip.\n\n\nFlask\nI’ve set up a simple Flask server and am using a Javascript library called colorwheel to send a user selected color to the Raspberry Pi. The code for the Flask server is available on GitHub under MIT License.\nIf you want more information, feel free to ask me any questions in the comments section below!"
  },
  {
    "objectID": "blog/mac-osx-tweaks/index.html",
    "href": "blog/mac-osx-tweaks/index.html",
    "title": "Mac OSX Tweaks",
    "section": "",
    "text": "Update: I’ve decided to maintain a repo here instead."
  },
  {
    "objectID": "blog/mac-osx-tweaks/index.html#general-ui",
    "href": "blog/mac-osx-tweaks/index.html#general-ui",
    "title": "Mac OSX Tweaks",
    "section": "General UI",
    "text": "General UI\n# Disable Dashboard\ndefaults write com.apple.dashboard mcx-disabled -bool true\n\n# Don’t show Dashboard as a Space\ndefaults write com.apple.dock dashboard-in-overlay -bool true\n\n# disable automatic spell checking\ndefaults write -g NSAllowContinuousSpellChecking -bool false\n\n# don't treat period or colon as part of words\n# en_US_POSIX corresponds to the \"United States (Computer)\" setting that was shown in System Preferences in 10.8 and earlier\ndefaults write -g AppleTextBreakLocale en_US_POSIX\n\n# Disable the sound effects on boot\nsudo nvram SystemAudioVolume=\" \""
  },
  {
    "objectID": "blog/mac-osx-tweaks/index.html#disks",
    "href": "blog/mac-osx-tweaks/index.html#disks",
    "title": "Mac OSX Tweaks",
    "section": "Disks",
    "text": "Disks\n# Disks: disable Time Machine prompts\ndefaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true\n\n# Disks: disable local Time Machine backups\nhash tmutil &&gt; /dev/null && sudo tmutil disablelocal\n\n# Disks: disable disk image verification\n# defaults write com.apple.frameworks.diskimages skip-verify -bool true\n# defaults write com.apple.frameworks.diskimages skip-verify-locked -bool true\n# defaults write com.apple.frameworks.diskimages skip-verify-remote -bool true\n\n# don't save .DS_Store files on network volumes\ndefaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true\n\n# Expand save panel by default\ndefaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true\n\n# Don’t automatically rearrange Spaces based on most recent use\ndefaults write com.apple.dock mru-spaces -bool false"
  },
  {
    "objectID": "blog/mac-osx-tweaks/index.html#keyboard",
    "href": "blog/mac-osx-tweaks/index.html#keyboard",
    "title": "Mac OSX Tweaks",
    "section": "Keyboard",
    "text": "Keyboard\n# Set a blazingly fast keyboard repeat rate\ndefaults write NSGlobalDomain KeyRepeat -int 0"
  },
  {
    "objectID": "blog/mac-osx-tweaks/index.html#finder",
    "href": "blog/mac-osx-tweaks/index.html#finder",
    "title": "Mac OSX Tweaks",
    "section": "Finder",
    "text": "Finder\n# Disable automatic termination of inactive apps\ndefaults write NSGlobalDomain NSDisableAutomaticTermination -bool true\n\n# Finder: disable window animations and Get Info animations\ndefaults write com.apple.finder DisableAllAnimations -bool true\n\n# Finder: show all filename extensions\ndefaults write NSGlobalDomain AppleShowAllExtensions -bool true\n\n# Disable the warning when changing a file extension\ndefaults write com.apple.finder FXEnableExtensionChangeWarning -bool false\n\n# Save to disk (not to iCloud) by default\ndefaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false\n\n# Finder: disable window and Get Info animations\ndefaults write com.apple.finder DisableAllAnimations -bool true\n\n# Finder: show the ~/Library folder (in OS X Lion)\nchflags nohidden ~/Library\n\n# Finder: empty Trash securely by default\ndefaults write com.apple.finder EmptyTrashSecurely -bool true"
  },
  {
    "objectID": "blog/mac-osx-tweaks/index.html#dock-hot-corners",
    "href": "blog/mac-osx-tweaks/index.html#dock-hot-corners",
    "title": "Mac OSX Tweaks",
    "section": "Dock & hot corners",
    "text": "Dock & hot corners\n# Autohide the Dock\ndefaults write com.apple.dock autohide -bool true\n\n# Magnify Dock icons on hover\ndefaults write com.apple.dock magnification -bool false"
  },
  {
    "objectID": "blog/mac-osx-tweaks/index.html#panels",
    "href": "blog/mac-osx-tweaks/index.html#panels",
    "title": "Mac OSX Tweaks",
    "section": "Panels",
    "text": "Panels\n# Panels: expand save panel by default\ndefaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true\n\n# Panels: expand print panel by default\ndefaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true\n\n# Panels: disable the “Are you sure you want to open this application?” dialog\ndefaults write com.apple.LaunchServices LSQuarantine -bool false\n\n# Panels: enable full keyboard access for all controls (e.g. enable Tab in modal dialogs)\ndefaults write NSGlobalDomain AppleKeyboardUIMode -int 3"
  },
  {
    "objectID": "blog/mac-osx-tweaks/index.html#screen",
    "href": "blog/mac-osx-tweaks/index.html#screen",
    "title": "Mac OSX Tweaks",
    "section": "Screen",
    "text": "Screen\n# Screen: save screenshots to the desktop\ndefaults write com.apple.screencapture location -string \"$HOME/Desktop\"\n\n# Screen: disable shadow in screenshots\ndefaults write com.apple.screencapture disable-shadow -bool true"
  },
  {
    "objectID": "blog/mac-osx-tweaks/index.html#misc",
    "href": "blog/mac-osx-tweaks/index.html#misc",
    "title": "Mac OSX Tweaks",
    "section": "Misc",
    "text": "Misc\n# Misc: only use UTF-8 in Terminal.app\ndefaults write com.apple.terminal StringEncodings -array 4\n\n# Misc: disable Dictionary results\ndefaults write com.apple.spotlight DictionaryLookupEnabled -bool false\n\n# Misc: disable auto-correct\ndefaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false"
  },
  {
    "objectID": "blog/three-built-in-neovim-features/index.html",
    "href": "blog/three-built-in-neovim-features/index.html",
    "title": "Three built-in neovim features",
    "section": "",
    "text": "I want to share three built-in neovim features that I think are under the category of quality of life improvements. They are live substitution, highlight yanked text, and the built-in language server protocol support."
  },
  {
    "objectID": "blog/three-built-in-neovim-features/index.html#live-substitution",
    "href": "blog/three-built-in-neovim-features/index.html#live-substitution",
    "title": "Three built-in neovim features",
    "section": "Live Substitution",
    "text": "Live Substitution\nBy default, vim’s :substitute command only modifies the document when you execute the command by pressing Enter (&lt;CR&gt;). In neovim, you can update the document interactively. neovim also shows you a preview window of all the changes you are going to make in the document.\n\nJust add the following option to your vimrc file.\nset inccommand=split"
  },
  {
    "objectID": "blog/three-built-in-neovim-features/index.html#highlight-yanked-text",
    "href": "blog/three-built-in-neovim-features/index.html#highlight-yanked-text",
    "title": "Three built-in neovim features",
    "section": "Highlight Yanked Text",
    "text": "Highlight Yanked Text\nIf you want to use this feature in neovim v0.4.x or in vim 8, you can do so with this or this plugin. Also, check out this well written post on how this works under the hood.\nWith the latest version of neovim, you have the ability to highlight yanked text without using any plugins.\n\nAt the time of writing, you’ll need a v0.5.0 or the nightly1 release of neovim for this feature.\n1 Precompiled binaries are available on the github releases page.nvim --version | head -1\nNVIM v0.5.0-556-ge78658348\nYou can add the following in your vimrc to enable this feature:\naugroup LuaHighlight\n  autocmd!\n  autocmd TextYankPost * silent! lua require'vim.highlight'.on_yank()\naugroup END"
  },
  {
    "objectID": "blog/three-built-in-neovim-features/index.html#language-server-protocol",
    "href": "blog/three-built-in-neovim-features/index.html#language-server-protocol",
    "title": "Three built-in neovim features",
    "section": "Language Server Protocol",
    "text": "Language Server Protocol\nneovim has a built-in implementation of the Language Server Protocol client and default configurations for over 50 languages.\n\n\n\nCompletion, diagnostics and jump to references in lua.\n\n\nAt the time of writing, you’ll need a v0.5.0 or the nightly release of neovim for this feature.\nnvim --version | head -1\nNVIM v0.5.0-556-ge78658348\nWhile technically you can configure the LSP client straight from your vimrc file, it is easier to use configurations from the neovim/nvim-lsp repository that the neovim developers maintain.\nIn order to set this up you need to do 3 things:\n\nAdd the neovim/nvim-lsp plugin:\nPlug 'neovim/nvim-lsp'\nRun :LspInstall {servername}:\n:LspInstall sumneko_lua\n:LspInstall julials\n:LspInstall nimls\n:LspInstall rust_analyzer\n:LspInstall vimls\n:LspInstall pyls\nSet up configurations with options in your vimrc:\nlua &lt;&lt;EOF\n    local nvim_lsp = require'nvim_lsp'\n    nvim_lsp.sumneko_lua.setup()\n    nvim_lsp.julials.setup()\n    nvim_lsp.nimls.setup()\n    nvim_lsp.vimls.setup()\n    nvim_lsp.pyls.setup{\n        settings = {\n            pyls = {\n                configurationSources = {\n                    pycodestyle,\n                    flake8\n                }\n            }\n        }\n    }\nEOF"
  },
  {
    "objectID": "blog/python-2-vs-3/index.html",
    "href": "blog/python-2-vs-3/index.html",
    "title": "Python 2 vs 3",
    "section": "",
    "text": "This post is an account of my personal experience. I’m interested in hearing other people’s opinions and having an open discussion on best practices to develop in Python. For the rest of this post, when I mention Python2 / Python3 please infer that I am referring to Python 2.7 / Python 3.5 respectively."
  },
  {
    "objectID": "blog/python-2-vs-3/index.html#python-2-vs-3",
    "href": "blog/python-2-vs-3/index.html#python-2-vs-3",
    "title": "Python 2 vs 3",
    "section": "Python 2 vs 3",
    "text": "Python 2 vs 3\nA lot of people talk about Python2 vs Python3, and having to make a choice between them. Some beginners venturing to learn Python may be posed with this question themselves. I’ve seen discussions claim that the main issue with picking Python3 is that most packages that were written for Python2 are not compatible with Python3. and I’ve also seen the counter arguments that show that the number of Python2 packages that don’t support Python3 is insignificant.\nIt is true that a large number of PyPi packages are now compatible with both Python2 and Python3. If I had to list the biggest changes in Python3 from Python2 that made the jump between versions difficult, it would be the core updates to the CPython API and the implementation of Unicode everywhere.\nThe changes to CPython API made it difficult to move packages across versions that heavily relied on C code. This has de-incentivised other tools that relied on packages to make the switch as well. Several of the scientific python stack faced this issue. Fortunately, thanks to the efforts of some incredibly smart and dedicated people, NumPy, SciPy, Pandas, Matplotlib now all support Python 3.5.\nIn arguably one of the more contentious decisions, Python3 also changed strings to handled as Unicode by default. This, as a result made thinking about unicode a more conscious decision1.\n1 I highly recommend checking out Ned Batchelder’s talk titled Pragmatic Unicode, or, How do I stop the pain? for an excellent summary on how to deal with unicode issues.Python3 makes dealing with unicode a lot easier, by providing error messages during compilation time instead of run time. With this change however, packages that often dealt with bytes/text/strings required some serious retooling. Many programs in the web stack in the Python world have taken time to move to the latest versions of Python. There are multiple other changes in Python3, but these are most commonly attributed to as the reason for making the transistion difficult.\nOverall, Python3 introduced a lot of niceties. The latest version of Python3 even introduces a more memory efficient dictionary, and since dictionaries are everywhere you can be sure to expect some improvements in your programs. In general, I sure I wouldn’t be alone in recommending anyone to use Python3 for their projects. Personally, I don’t think I’ve ever experienced an issue where a package that I wanted was written for Python2 alone.\nI have experienced another issue though.\nMultiple times now I’ve tried to install packages that have been built for Python3 that are completely incompatible with Python2. When I’ve experienced Python2 packages that are incompatible with Python3, it has been for reasons mentioned above. CPython changes require someone with an understanding of the C Python API ( or the willingness and patience to undertake the task ) to rewrite a significant portion of the library. Unicode issues are a little less demanding, and with a clear understanding of text interfaces one can update their code for Python3 compatibility. However, when a Python3 package is not compatible with Python2 the changes aren’t straightforward, and sometimes even impossible.\nFor example, the use of asyncio in a package make it immediately incompatible with Python2. A more innocuous change is the use of keyword only arguments, introduced by PEP 3102.\ndef compare(a, b, *ignore, key=None):\n    ...\nPersonally, I like this feature a lot. It makes inheritance in Python very clean.\nclass Child(Parent):\n    def __init__(self, *args, child_keyword=child_value, **kwargs):\n        # do something here with child_keyword\n        super().__init__(**kwargs)\nWithout keyword only arguments, i.e. in Python2, the above would look like this\nclass Child(Parent):\n    def __init__(self, *args, **kwargs):\n        child_keyword = kwargs.pop('child_keyword')\n        # do something here with child_keyword\n        super().__init__(**kwargs)\nHowever, this change, although syntactically cleaner and self documenting, is backward incompatible. More changes like this have been or are being introduced in Python3. For example, in Python3 you can merge two dictionaries with the following syntax\nmerged_dict = {**dict1, **dict2}\nThis is so much cleaner and readable code that the different ways one would do it in Python2, however this implementation immediately alienates a large Python2 user base. The list of backward incompatible changes that Python3 introduced is a lot larger than this. And although almost all of these changes can be backported by using the excellent six and future modules, not every change is currently backported.\nThe following is another really neat feature is that currently not available in Python2.\nvalue1, *ignore, value2 = function()\nI’ve been a proponent of writing code that is cross compatible with Python2 and Python3, but I anticipate that I may not get much mileage out of that strategy, or at the very least not for too long. Python 3.0 has been out for almost 10 years now and Python 2.7 has an end date attached to it (2020 will be last year for official support for Python2), which means it is definitely not going to believe any bugfixes or improvements in the future.\nMaybe it is reasonable to expect Python3 packages to be compatible with Python2. But, many enterprise applications and solutions are still using Python2, which are currently not written to be Python3 compatible. In my experience of using Python, I’ve not encountered a case with a package was only Python2 compatible but have encountered multiple packages where it is only Python3 compatible.\nWhat are your thoughts on this subject? If you are reading this and have best practices to share, I would be very keen to hearing from you. Do you write packages that are only compatible with Python3, or strive to make them cross compatible? Are there other changes you can think of that make Python3 code incompatible with Python2? Do you have tips you recommend for writing cross version compatible code or do you think it is no longer worth the effort."
  },
  {
    "objectID": "blog/change-path-inside-vim/index.html",
    "href": "blog/change-path-inside-vim/index.html",
    "title": "Change $PATH inside vim",
    "section": "",
    "text": "Save the following script in /usr/local/bin/cpvim\n#!/bin/zsh\nsource ~/.zshrc &gt; /dev/null 2&gt;&1\nPATH=$VIM_PATH\nexec nvim \"$@\"\nAdd the following to your .zshrc\nalias vim=/usr/local/bin/cpvim\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2015,\n  author = {Krishnamurthy, Dheepak},\n  title = {Change {`\\$PATH`} Inside Vim},\n  date = {2015-09-19},\n  url = {https://kdheepak.com/blog/change-path-inside-vim/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Change `$PATH` inside vim,” Sep. 19, 2015.\nhttps://kdheepak.com/blog/change-path-inside-vim/."
  },
  {
    "objectID": "blog/ibis-power-lines/index.html",
    "href": "blog/ibis-power-lines/index.html",
    "title": "Power Lines with ibis",
    "section": "",
    "text": "This is a reproduction of the post on the official ibis website with minor modifications.\nI like to add the following to the top of all my notebooks.\n\n%reload_ext autoreload\n%autoreload 2\n\nfrom IPython.core.interactiveshell import InteractiveShell\n\nInteractiveShell.ast_node_interactivity = \"last_expr_or_assign\"\n\n\nInstall\nThe packages can be installed with uv sync command if you use the lock file in the source directory.\nuv sync\nAlternatively, you can install the packages with the following commands.\nuv add 'ibis-framework[duckdb,geospatial]' folium geopandas\n\n\nImports\n\nimport ibis\nfrom ibis import _\n\n\nibis.options.interactive = True\n\n\n\nDownload the data\n\ncon = ibis.duckdb.connect(extensions=[\"spatial\"])\n\n&lt;ibis.backends.duckdb.Backend at 0x115da1700&gt;\n\n\n\nimport os\n\nif not os.path.exists(\"power-infra-usa.geoparquet\"):\n    # look into type infrastructure\n    url = \"s3://overturemaps-us-west-2/release/2024-07-22.0/theme=base/type=infrastructure/*\"\n    t = con.read_parquet(url, table_name=\"infra-usa\")\n\n    # filter for USA bounding box, subtype=\"power\", and selecting only few columns\n    expr = t.filter(\n        _.bbox.xmin &gt; -125.0,\n        _.bbox.ymin &gt; 24.8,\n        _.bbox.xmax &lt; -65.8,\n        _.bbox.ymax &lt; 49.2,\n        _.subtype == \"power\",\n    ).select([\"names\", \"geometry\", \"bbox\", \"class\", \"sources\", \"source_tags\"])\n\n    con.to_parquet(expr, \"power-infra-usa.geoparquet\")\n\nNone\n\n\n\nFilter and destructure\nWith ibis we can read the power infrastructure data.\n\nusa_power_infra = con.read_parquet(\"power-infra-usa.geoparquet\")\n\n┏━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃ names ┃ geometry                                                                         ┃ bbox                                                               ┃ class       ┃ sources                                                                          ┃ source_tags                                  ┃\n┡━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ stru… │ geospatial:geometry                                                              │ struct&lt;xmin: float32, xmax: float32, ymin: float32, ymax: float32&gt; │ string      │ array&lt;struct&lt;property: string, dataset: string, record_id: string, update_time:… │ map&lt;string, string&gt;                          │\n├───────┼──────────────────────────────────────────────────────────────────────────────────┼────────────────────────────────────────────────────────────────────┼─────────────┼──────────────────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────┤\n│ NULL  │ &lt;POINT (-114.291 27.151)&gt;                                                        │ {'xmin': -114.29095458984375, 'xmax': -114.29093933105469, ... +2} │ power_tower │ [{...}]                                                                          │ {}                                           │\n│ NULL  │ &lt;POINT (-114.289 27.149)&gt;                                                        │ {'xmin': -114.28852844238281, 'xmax': -114.28851318359375, ... +2} │ power_tower │ [{...}]                                                                          │ {}                                           │\n│ NULL  │ &lt;POINT (-114.29 27.15)&gt;                                                          │ {'xmin': -114.29006958007812, 'xmax': -114.29005432128906, ... +2} │ power_tower │ [{...}]                                                                          │ {}                                           │\n│ NULL  │ &lt;POINT (-114.29 27.151)&gt;                                                         │ {'xmin': -114.2900619506836, 'xmax': -114.29004669189453, ... +2}  │ power_tower │ [{...}]                                                                          │ {}                                           │\n│ NULL  │ &lt;POLYGON ((-114.29 27.152, -114.29 27.151, -114.29 27.15, -114.291 27.151, -...&gt; │ {'xmin': -114.29100036621094, 'xmax': -114.28948974609375, ... +2} │ substation  │ [{...}]                                                                          │ {'location': 'outdoor', 'voltage': '115000'} │\n│ NULL  │ &lt;POINT (-114.291 27.151)&gt;                                                        │ {'xmin': -114.29055786132812, 'xmax': -114.29054260253906, ... +2} │ portal      │ [{...}]                                                                          │ {}                                           │\n│ NULL  │ &lt;POINT (-114.291 27.152)&gt;                                                        │ {'xmin': -114.29069519042969, 'xmax': -114.29067993164062, ... +2} │ power_tower │ [{...}]                                                                          │ {}                                           │\n│ NULL  │ &lt;POINT (-114.288 27.151)&gt;                                                        │ {'xmin': -114.28756713867188, 'xmax': -114.28755187988281, ... +2} │ power_tower │ [{...}]                                                                          │ {}                                           │\n│ NULL  │ &lt;POINT (-114.286 27.152)&gt;                                                        │ {'xmin': -114.28639221191406, 'xmax': -114.286376953125, ... +2}   │ power_tower │ [{...}]                                                                          │ {}                                           │\n│ NULL  │ &lt;POINT (-114.285 27.152)&gt;                                                        │ {'xmin': -114.2851333618164, 'xmax': -114.28511810302734, ... +2}  │ power_tower │ [{...}]                                                                          │ {}                                           │\n│ …     │ …                                                                                │ …                                                                  │ …           │ …                                                                                │ …                                            │\n└───────┴──────────────────────────────────────────────────────────────────────────────────┴────────────────────────────────────────────────────────────────────┴─────────────┴──────────────────────────────────────────────────────────────────────────────────┴──────────────────────────────────────────────┘\n\n\n\nHere’s all the types of infrastructure in the data:\n\n\nCode\nimport rich\ntable = rich.table.Table(title=\"Infrastructure Types\")\n\ntable.add_column(\"Type\", justify=\"left\", style=\"cyan\", no_wrap=True)\n\ninfrastructure_types = (\n  usa_power_infra\n  .rename(infrastructure_types=\"class\")\n  .select(_.infrastructure_types)\n  .distinct()\n  .execute()\n)\n\nfor infra_type in infrastructure_types[\"infrastructure_types\"]:\n  table.add_row(infra_type)\n\nrich.print(table)\n\n\n Infrastructure Types \n┏━━━━━━━━━━━━━━━━━━━━┓\n┃ Type               ┃\n┡━━━━━━━━━━━━━━━━━━━━┩\n│ cable_distribution │\n│ plant              │\n│ power_tower        │\n│ switch             │\n│ power_line         │\n│ substation         │\n│ cable              │\n│ portal             │\n│ catenary_mast      │\n│ generator          │\n│ transformer        │\n│ terminal           │\n│ power_pole         │\n│ minor_line         │\n│ insulator          │\n│ connection         │\n└────────────────────┘\n\n\n\nWe can get all the power lines using this filter:\n\n(\n    usa_power_infra\n    .filter(_[\"class\"] == \"power_line\")\n)\n\n┏━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃ names ┃ geometry                                                                         ┃ bbox                                                               ┃ class      ┃ sources                                                                          ┃ source_tags                              ┃\n┡━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ stru… │ geospatial:geometry                                                              │ struct&lt;xmin: float32, xmax: float32, ymin: float32, ymax: float32&gt; │ string     │ array&lt;struct&lt;property: string, dataset: string, record_id: string, update_time:… │ map&lt;string, string&gt;                      │\n├───────┼──────────────────────────────────────────────────────────────────────────────────┼────────────────────────────────────────────────────────────────────┼────────────┼──────────────────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────┤\n│ NULL  │ &lt;LINESTRING (-115.191 28.056, -115.192 28.057, -115.192 28.058, -115.193 28....&gt; │ {'xmin': -115.19832611083984, 'xmax': -115.19091796875, ... +2}    │ power_line │ [{...}]                                                                          │ {}                                       │\n│ NULL  │ &lt;LINESTRING (-113.414 27.641, -113.414 27.642, -113.416 27.642, -113.418 27....&gt; │ {'xmin': -114.29095458984375, 'xmax': -113.41442108154297, ... +2} │ power_line │ [{...}]                                                                          │ {'frequency': '60', 'voltage': '115000'} │\n│ NULL  │ &lt;LINESTRING (-113.415 27.641, -113.415 27.642, -113.416 27.642, -113.416 27....&gt; │ {'xmin': -113.41552734375, 'xmax': -112.40901184082031, ... +2}    │ power_line │ [{...}]                                                                          │ {'frequency': '60', 'voltage': '115000'} │\n│ NULL  │ &lt;LINESTRING (-118.433 33.353, -118.432 33.352, -118.431 33.352, -118.431 33....&gt; │ {'xmin': -118.43326568603516, 'xmax': -118.42095947265625, ... +2} │ power_line │ [{...}]                                                                          │ {}                                       │\n│ NULL  │ &lt;LINESTRING (-118.489 33.434, -118.489 33.434, -118.489 33.433, -118.486 33....&gt; │ {'xmin': -118.48948669433594, 'xmax': -118.31026458740234, ... +2} │ power_line │ [{...}]                                                                          │ {}                                       │\n│ NULL  │ &lt;LINESTRING (-118.337 33.341, -118.336 33.341, -118.336 33.341, -118.335 33....&gt; │ {'xmin': -118.33689880371094, 'xmax': -118.33036804199219, ... +2} │ power_line │ [{...}]                                                                          │ {}                                       │\n│ NULL  │ &lt;LINESTRING (-118.345 33.347, -118.342 33.346, -118.342 33.345, -118.339 33....&gt; │ {'xmin': -118.34489440917969, 'xmax': -118.31033325195312, ... +2} │ power_line │ [{...}]                                                                          │ {}                                       │\n│ NULL  │ &lt;LINESTRING (-118.335 33.341, -118.335 33.341, -118.335 33.342, -118.335 33....&gt; │ {'xmin': -118.33499145507812, 'xmax': -118.33025360107422, ... +2} │ power_line │ [{...}]                                                                          │ {}                                       │\n│ NULL  │ &lt;LINESTRING (-118.346 33.347, -118.347 33.348, -118.349 33.349, -118.352 33....&gt; │ {'xmin': -118.38180541992188, 'xmax': -118.34550476074219, ... +2} │ power_line │ [{...}]                                                                          │ {}                                       │\n│ NULL  │ &lt;LINESTRING (-118.483 33.435, -118.483 33.436, -118.484 33.436, -118.484 33....&gt; │ {'xmin': -118.49791717529297, 'xmax': -118.48307800292969, ... +2} │ power_line │ [{...}]                                                                          │ {}                                       │\n│ …     │ …                                                                                │ …                                                                  │ …          │ …                                                                                │ …                                        │\n└───────┴──────────────────────────────────────────────────────────────────────────────────┴────────────────────────────────────────────────────────────────────┴────────────┴──────────────────────────────────────────────────────────────────────────────────┴──────────────────────────────────────────┘\n\n\n\nThis is what ibis does under the hood using sql and duckdb to extract data from the parquet file:\n\n\nCode\nibis.to_sql(\n    usa_power_infra.filter(_[\"class\"] == \"power_line\")\n)\n\n\nSELECT\n  *\n  REPLACE (ST_ASWKB(\"geometry\") AS \"geometry\")\nFROM (\n  SELECT\n    *\n  FROM \"ibis_read_parquet_n6ptzz4gvnb6dlcdlwzwpfb5tq\" AS \"t0\"\n  WHERE\n    \"t0\".\"class\" = 'power_line'\n)\n\n\nThe source_tags column contains voltage information for some lines:\n\n(\n    usa_power_infra\n    .filter(_[\"class\"] == \"power_line\")\n    .select(_.source_tags)\n    .distinct()\n)\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃ source_tags                                                                  ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ map&lt;string, string&gt;                                                          │\n├──────────────────────────────────────────────────────────────────────────────┤\n│ {'frequency': '60;60;0', 'voltage': '230000;230000;0'}                       │\n│ {'frequency': '60;60;0', 'voltage': '230000;220000;0'}                       │\n│ {'voltage': '500000'}                                                        │\n│ {'frequency': '60', 'voltage': '66000;66000;12000'}                          │\n│ {'frequency': '60', 'voltage': '66000;12000;'}                               │\n│ {'frequency': '60', 'voltage': '66000;12000;240'}                            │\n│ {'ref': 'Moss Landing - Metcalf', 'voltage': '230000'}                       │\n│ {'frequency': '60', 'voltage': '230000', ... +1}                             │\n│ {'frequency': '60', 'voltage': '230000', ... +1}                             │\n│ {'voltage': '230000', 'ref': 'Castro Valley-Newark/San Ramon-Castro Valley'} │\n│ …                                                                            │\n└──────────────────────────────────────────────────────────────────────────────┘\n\n\n\nYou can see that source_tags is a map (or record or dictionary) that contains voltage information. Let’s extract just the first voltage value we can find into new column called voltage:\n\npower_lines = (\n    usa_power_infra.filter(_[\"class\"] == \"power_line\")\n    .filter(_.source_tags[\"voltage\"] != ibis.null())\n    .mutate(\n        voltage=_.source_tags[\"voltage\"]\n        .split(\";\")[0]\n        .split(\":\")[0]\n        .split(\"/\")[0]\n        .split(\"'\")[0]\n        .split(\",\")[0]\n        .split(\"=\")[0]\n        .try_cast(\"int64\")\n    )\n    .filter([\n        _.voltage.notnull(),\n        _.voltage &gt; 0.0,\n    ])\n)\n\n┏━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━┓\n┃ names ┃ geometry                                                                         ┃ bbox                                                               ┃ class      ┃ sources                                                                          ┃ source_tags                              ┃ voltage ┃\n┡━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━┩\n│ stru… │ geospatial:geometry                                                              │ struct&lt;xmin: float32, xmax: float32, ymin: float32, ymax: float32&gt; │ string     │ array&lt;struct&lt;property: string, dataset: string, record_id: string, update_time:… │ map&lt;string, string&gt;                      │ int64   │\n├───────┼──────────────────────────────────────────────────────────────────────────────────┼────────────────────────────────────────────────────────────────────┼────────────┼──────────────────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────┼─────────┤\n│ NULL  │ &lt;LINESTRING (-113.414 27.641, -113.414 27.642, -113.416 27.642, -113.418 27....&gt; │ {'xmin': -114.29095458984375, 'xmax': -113.41442108154297, ... +2} │ power_line │ [{...}]                                                                          │ {'frequency': '60', 'voltage': '115000'} │  115000 │\n│ NULL  │ &lt;LINESTRING (-113.415 27.641, -113.415 27.642, -113.416 27.642, -113.416 27....&gt; │ {'xmin': -113.41552734375, 'xmax': -112.40901184082031, ... +2}    │ power_line │ [{...}]                                                                          │ {'frequency': '60', 'voltage': '115000'} │  115000 │\n│ NULL  │ &lt;LINESTRING (-115.987 30.715, -115.986 30.716, -115.986 30.715, -115.986 30....&gt; │ {'xmin': -115.98729705810547, 'xmax': -115.90068054199219, ... +2} │ power_line │ [{...}]                                                                          │ {'frequency': '60', 'voltage': '115000'} │  115000 │\n│ NULL  │ &lt;LINESTRING (-112.692 29.91, -112.693 29.91, -112.693 29.91, -112.693 29.909)&gt;   │ {'xmin': -112.69328308105469, 'xmax': -112.69247436523438, ... +2} │ power_line │ [{...}]                                                                          │ {'frequency': '60', 'voltage': '230000'} │  230000 │\n│ NULL  │ &lt;LINESTRING (-112.691 29.909, -112.692 29.909, -112.692 29.909, -112.692 29....&gt; │ {'xmin': -112.69207000732422, 'xmax': -112.69055938720703, ... +2} │ power_line │ [{...}]                                                                          │ {'frequency': '60', 'voltage': '230000'} │  230000 │\n│ NULL  │ &lt;LINESTRING (-112.692 29.908, -112.691 29.908, -112.691 29.908, -112.691 29....&gt; │ {'xmin': -112.69156646728516, 'xmax': -112.69055938720703, ... +2} │ power_line │ [{...}]                                                                          │ {'frequency': '60', 'voltage': '230000'} │  230000 │\n│ NULL  │ &lt;LINESTRING (-112.692 29.909, -112.692 29.909, -112.692 29.909, -112.691 29.91)&gt; │ {'xmin': -112.69243621826172, 'xmax': -112.69139099121094, ... +2} │ power_line │ [{...}]                                                                          │ {'frequency': '60', 'voltage': '230000'} │  230000 │\n│ NULL  │ &lt;LINESTRING (-112.691 29.91, -112.692 29.909, -112.693 29.909, -112.693 29.909)&gt; │ {'xmin': -112.69294738769531, 'xmax': -112.69139099121094, ... +2} │ power_line │ [{...}]                                                                          │ {'frequency': '60', 'voltage': '230000'} │  230000 │\n│ NULL  │ &lt;LINESTRING (-112.648 29.904, -112.649 29.904, -112.651 29.905, -112.654 29....&gt; │ {'xmin': -112.6930160522461, 'xmax': -112.64823913574219, ... +2}  │ power_line │ [{...}]                                                                          │ {'frequency': '60', 'voltage': '230000'} │  230000 │\n│ NULL  │ &lt;LINESTRING (-112.691 29.909, -112.689 29.911, -112.688 29.914, -112.686 29....&gt; │ {'xmin': -112.6905746459961, 'xmax': -112.65251922607422, ... +2}  │ power_line │ [{...}]                                                                          │ {'frequency': '60', 'voltage': '230000'} │  230000 │\n│ …     │ …                                                                                │ …                                                                  │ …          │ …                                                                                │ …                                        │       … │\n└───────┴──────────────────────────────────────────────────────────────────────────────────┴────────────────────────────────────────────────────────────────────┴────────────┴──────────────────────────────────────────────────────────────────────────────────┴──────────────────────────────────────────┴─────────┘\n\n\n\nAnd then finally we can filter only the power lines with a voltage greater than 230 kV:\n\npower_lines_subset = (\n    power_lines\n    .filter(_.voltage &gt; 230e3)\n    .select(_.voltage, _.geometry)\n    .order_by(_.voltage)\n)\n\n┏━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃ voltage ┃ geometry                                                                         ┃\n┡━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ int64   │ geospatial:geometry                                                              │\n├─────────┼──────────────────────────────────────────────────────────────────────────────────┤\n│  235000 │ &lt;LINESTRING (-104.812 39.762, -104.813 39.762, -104.813 39.762, -104.813 39....&gt; │\n│  235000 │ &lt;LINESTRING (-104.812 39.762, -104.812 39.762, -104.812 39.762, -104.812 39....&gt; │\n│  250000 │ &lt;LINESTRING (-92.297 46.773, -92.298 46.773, -92.302 46.773, -92.307 46.773,...&gt; │\n│  250000 │ &lt;LINESTRING (-92.297 46.774, -92.297 46.774, -92.297 46.775, -92.295 46.775,...&gt; │\n│  250000 │ &lt;LINESTRING (-101.194 47.072, -101.195 47.072)&gt;                                  │\n│  250000 │ &lt;LINESTRING (-101.195 47.072, -101.194 47.072)&gt;                                  │\n│  250000 │ &lt;LINESTRING (-101.194 47.072, -101.193 47.072, -101.19 47.072, -101.187 47.0...&gt; │\n│  250000 │ &lt;LINESTRING (-98.585 46.725, -98.584 46.724, -98.582 46.723, -98.58 46.721, ...&gt; │\n│  260000 │ &lt;LINESTRING (-123.075 49.061, -123.076 49.06, -123.082 49.06, -123.088 49.06...&gt; │\n│  276000 │ &lt;LINESTRING (-72.23 41.712, -72.229 41.713)&gt;                                     │\n│       … │ …                                                                                │\n└─────────┴──────────────────────────────────────────────────────────────────────────────────┘\n\n\n\n\n\nVisualize\nWe can read the data into a geopandas dataframe:\n\nimport geopandas as gpd\ngdf = gpd.GeoDataFrame(power_lines_subset.execute());\n\nAnd we can visualize it using folium:\n\nimport folium\n\nm = folium.Map(location=[41.5435959, -99.8396373], zoom_start=5)\n\nfolium.GeoJson(gdf.to_json(), name=\"Power Lines\").add_to(m)\n\nm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\nRaw SQL\nHere’s the raw SQL ibis generates:\n\nibis.to_sql(\n    power_lines_subset\n)\n\nSELECT\n  *\n  REPLACE (ST_ASWKB(\"geometry\") AS \"geometry\")\nFROM (\n  SELECT\n    \"t1\".\"voltage\",\n    \"t1\".\"geometry\"\n  FROM (\n    SELECT\n      \"t0\".\"names\",\n      \"t0\".\"geometry\",\n      \"t0\".\"bbox\",\n      \"t0\".\"class\",\n      \"t0\".\"sources\",\n      \"t0\".\"source_tags\",\n      TRY_CAST(LIST_EXTRACT(\n        STR_SPLIT(\n          LIST_EXTRACT(\n            STR_SPLIT(\n              LIST_EXTRACT(\n                STR_SPLIT(\n                  LIST_EXTRACT(\n                    STR_SPLIT(\n                      LIST_EXTRACT(\n                        STR_SPLIT(\n                          LIST_EXTRACT(\n                            STR_SPLIT(\n                              CASE\n                                WHEN \"t0\".\"source_tags\" IS NULL\n                                THEN NULL\n                                ELSE COALESCE(\n                                  LIST_EXTRACT(\n                                    CASE\n                                      WHEN 'voltage' IS NULL\n                                      THEN NULL\n                                      ELSE ELEMENT_AT(\"t0\".\"source_tags\", 'voltage')\n                                    END,\n                                    1\n                                  ),\n                                  NULL\n                                )\n                              END,\n                              ';'\n                            ),\n                            0 + CAST(0 &gt;= 0 AS TINYINT)\n                          ),\n                          ':'\n                        ),\n                        0 + CAST(0 &gt;= 0 AS TINYINT)\n                      ),\n                      '/'\n                    ),\n                    0 + CAST(0 &gt;= 0 AS TINYINT)\n                  ),\n                  ''''\n                ),\n                0 + CAST(0 &gt;= 0 AS TINYINT)\n              ),\n              ','\n            ),\n            0 + CAST(0 &gt;= 0 AS TINYINT)\n          ),\n          '='\n        ),\n        0 + CAST(0 &gt;= 0 AS TINYINT)\n      ) AS BIGINT) AS \"voltage\"\n    FROM \"ibis_read_parquet_n6ptzz4gvnb6dlcdlwzwpfb5tq\" AS \"t0\"\n    WHERE\n      \"t0\".\"class\" = 'power_line'\n      AND CASE\n        WHEN \"t0\".\"source_tags\" IS NULL\n        THEN NULL\n        ELSE COALESCE(\n          LIST_EXTRACT(\n            CASE\n              WHEN 'voltage' IS NULL\n              THEN NULL\n              ELSE ELEMENT_AT(\"t0\".\"source_tags\", 'voltage')\n            END,\n            1\n          ),\n          NULL\n        )\n      END IS NOT NULL\n  ) AS \"t1\"\n  WHERE\n    \"t1\".\"voltage\" IS NOT NULL AND \"t1\".\"voltage\" &gt; 0.0 AND \"t1\".\"voltage\" &gt; 230000.0\n  ORDER BY\n    \"t1\".\"voltage\" ASC\n)\n\n\n\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2024,\n  author = {Krishnamurthy, Dheepak},\n  title = {Power {Lines} with `Ibis`},\n  date = {2024-11-30},\n  url = {https://kdheepak.com/blog/ibis-power-lines/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Power Lines with `ibis`,” Nov. 30, 2024. https://kdheepak.com/blog/ibis-power-lines/."
  },
  {
    "objectID": "blog/welcome-to-my-blog/index.html",
    "href": "blog/welcome-to-my-blog/index.html",
    "title": "Welcome to my blog",
    "section": "",
    "text": "Welcome to my blog where I share random musings, pieces of learnings and my thoughts and notes.\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2014,\n  author = {Krishnamurthy, Dheepak},\n  title = {Welcome to My Blog},\n  date = {2014-01-05},\n  url = {https://kdheepak.com/blog/welcome-to-my-blog/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Welcome to my blog,” Jan. 05, 2014. https://kdheepak.com/blog/welcome-to-my-blog/."
  },
  {
    "objectID": "blog/uninstalling-and-reinstalling-homebrew-on-osx/index.html",
    "href": "blog/uninstalling-and-reinstalling-homebrew-on-osx/index.html",
    "title": "Uninstalling and re-installing Homebrew on OSX",
    "section": "",
    "text": "Gist\n#!/bin/sh\n# Just copy and paste the lines below (all at once, it won't work line by line!)\n# MAKE SURE YOU ARE HAPPY WITH WHAT IT DOES FIRST! THERE IS NO WARRANTY!\n\nbrew list &gt; ~/brew_list.txt\n\nfunction abort {\n  echo \"$1\"\n  exit 1\n}\n\nset -e\n\n/usr/bin/which -s git || abort \"brew install git first!\"\ntest -d /usr/local/.git || abort \"brew update first!\"\n\ncd $(brew --prefix)\ngit checkout master\ngit ls-files -z | pbcopy\nrm -rf Cellar\nbin/brew prune\npbpaste | xargs -0 rm\nrm -r Library/Homebrew Library/Aliases Library/Formula Library/Contributions\ntest -d Library/LinkedKegs && rm -r Library/LinkedKegs\nrmdir -p bin Library share/man/man1 2&gt; /dev/null\nrm -rf .git\nrm -rf ~/Library/Caches/Homebrew\nrm -rf ~/Library/Logs/Homebrew\nrm -rf /Library/Caches/Homebrew\nSet permission on Homebrew folder\nsudo chown -R $USER /Library/Caches/Homebrew/\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2015,\n  author = {Krishnamurthy, Dheepak},\n  title = {Uninstalling and Re-Installing {Homebrew} on {OSX}},\n  date = {2015-08-28},\n  url = {https://kdheepak.com/blog/uninstalling-and-reinstalling-homebrew-on-osx/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Uninstalling and re-installing Homebrew on\nOSX,” Aug. 28, 2015. https://kdheepak.com/blog/uninstalling-and-reinstalling-homebrew-on-osx/."
  },
  {
    "objectID": "blog/the-egg-tower-puzzle/index.html",
    "href": "blog/the-egg-tower-puzzle/index.html",
    "title": "The egg tower puzzle",
    "section": "",
    "text": "Here is a fun puzzle:\nIf you are interested in an easy to understand intuitive explanation to the \\(2\\) egg \\(100\\) storey tower problem, check out the following video:\nWe will go through this problem for the \\(2\\) eggs and \\(3\\) eggs variant, and derive the solution mathematically. Then, we will generalize the problem with \\(x\\) floors and \\(N\\) eggs."
  },
  {
    "objectID": "blog/the-egg-tower-puzzle/index.html#two-eggs",
    "href": "blog/the-egg-tower-puzzle/index.html#two-eggs",
    "title": "The egg tower puzzle",
    "section": "Two eggs",
    "text": "Two eggs\nWe have \\(2\\) eggs to start with and a \\(100\\) storey tower to explore.\nLet’s consider what we would do if we had just one egg.\nWith just one egg, we could drop the egg from floor \\(1\\). If it breaks, we stop and can definitively say that for any floor \\(1\\) and above all eggs would break. If it doesn’t break, we can proceed to floor \\(2\\) and repeat.\nThis means that for a tower with \\(100\\) floors we will need up to \\(100\\) drops to definitively say at which floor the egg would break. The above strategy gives us the minimum number of drops to guarantee that we find at which floor the egg would break. Or in other words, we can search \\(N\\) floors with \\(N\\) drops. Let’s call the lowest floor in the tower at which a egg would break the breaking floor. Here, \\(N\\) is the breaking floor and \\(N-1\\) is the highest floor from which an egg will not break. Once we can find the breaking floor, we can find the solution to this puzzle. The aim of this puzzle is to minimize the worst case when trying to guarantee finding the breaking floor.\nWhat could we do differently with \\(2\\) eggs?\nWith \\(2\\) eggs, in fact we can explore the search space more efficiently. We can use the first egg to partition the total number of floors, and once the first egg breaks we can use the second egg to search floors within the last partition.\nAs an example, let’s say you decide to drop the first egg from every \\(10^{th}\\) floor. If it doesn’t break at floor \\(10\\), \\(20\\), \\(30\\), \\(40\\) or \\(50\\) but breaks at floor \\(60\\) you can use the second egg to explore floors \\(51\\) - \\(59\\). If it finally breaks at floor \\(59\\), you would have used \\(6\\) drops of the first egg and \\(9\\) drops of the second egg to find the breaking floor.\nWe can do even better though.\nLet’s assume that the minimum number of drops required to guarantee finding the breaking floor for a \\(N\\) storey tower is \\(x\\). If when we drop the first egg and the egg breaks, we can use \\(x - 1\\) drops of the second egg to find the breaking floor. We already know that we can search at most \\(x - 1\\) floors with the \\(1\\) egg using \\(x - 1\\) drops. So if our first drop was from a floor greater than \\(x\\), we would not be able to guarantee finding the solution to this problem. This means that if we have \\(2\\) eggs we would want to drop the first egg from floor \\(x\\), where \\(x\\) is also the minimum number of drops that will guarantee finding the breaking floor in a \\(N\\) storey tower.\nWhen we drop the first egg from floor \\(x\\), if the egg breaks, we can use the second egg to find which floor from \\(1\\) to \\(x - 1\\) is the solution. If the egg doesn’t break, now we have used \\(1\\) drop. Let’s assume that the first egg breaks on the second drop. When this happens, we can use the remaining egg to explore \\(x - 2\\) floors with \\(x - 2\\) drops find the breaking floor. With \\(x - 2\\) drops, we can search from floor \\(x + 1\\) to floor \\(x + (x - 2)\\). This means that when we drop the first egg the second time, we should start from \\(x + (x - 2) + 1\\), i.e., \\(x + (x - 1)\\), to allow for finding the breaking floor.\nIf the egg doesn’t break on the second drop, we have now used \\(2\\) drops. If the egg is going to break on the third drop, we have to allow for searching \\(x - 3\\) floors with the second egg. This means we should drop the first egg on our third attempt from floor number \\(x + (x - 1) + (x - 3) + 1\\), i.e., \\(x + (x - 1) + (x - 2)\\). We can also say that with \\(3\\) drops and \\(2\\) eggs we are guaranteed to find the floor if it is within the first \\(3 + (3 - 1) + (3 - 2)\\) floors, i.e. \\(6\\) floors.\nSeeing the pattern here?\nFor a \\(N\\) storey tower, we need to ensure that with \\(x\\) drops we cover all the floors of the tower. That gives us this constraint.\n\\[x + (x - 1) + (x - 2) + (x - 3) + \\ldots + 1 &gt;= N\\]\nWhich can be rewritten as:\n\\[\\sum_{k=1}^{x} k &gt;= N\\]\nOr, in closed form as:\n\\[\\frac{x \\times (1 + x)}{2} &gt;= N\\]\nWe know \\(N\\) is \\(100\\) in this problem.\n\\[\\frac{x \\times (1 + x)}{2} &gt;= 100\\]\nThis tells us that with \\(14\\) drops we can guarantee finding the breaking floor in a tower with up to \\(105\\) floors."
  },
  {
    "objectID": "blog/the-egg-tower-puzzle/index.html#three-eggs",
    "href": "blog/the-egg-tower-puzzle/index.html#three-eggs",
    "title": "The egg tower puzzle",
    "section": "Three eggs",
    "text": "Three eggs\nWe have already previously established the best strategy for \\(1\\) egg and \\(2\\) eggs.\nLet’s define some terminology:\n\\[f_1(x) = x\\] \\[f_2(x) = \\frac{x \\times (1 + x)}{2}\\]\nwhere \\(f_1(x)\\) and \\(f_2(x)\\) are the number of floors that can be checked with \\(1\\) and \\(2\\) eggs respectively with \\(x\\) drops.\nAnd we know that \\(f_2(x)\\) can be written as:\n\\[f_2(x) = \\sum_{k=1}^{x} k\\]\nSo if we have 3 eggs and if the first egg breaks on the first drop, we want to ensure that we can check \\(f_2(x - 1)\\) floors with the remaining \\(x - 1\\) drops. That means we should drop the first egg from floor:\n\\[1 + f_2(x - 1)\\]\nFor the second drop, we can start from floor:\n\\[1 + f_2(x - 1) + 1 + f_2(x - 2)\\]\nFor the third drop, we can start from floor:\n\\[1 + f_2(x - 1) + 1 + f_2(x - 2) + 1 + f_2(x - 3)\\]\nSeeing a pattern emerge again?\nSimilar to before, the total number of floors we can check is constrained by \\(N\\):\n\\[1 + f_2(x - 1) + 1 + f_2(x - 2) + 1 + f_2(x - 3) + \\ldots + 1 &gt;= N\\]\nThis can be rewritten as:\n\\[\\sum_{k=1}^{x-1} \\left( 1 + f_2(k) \\right) + 1 &gt;= N\\]\n\\[1 + \\sum_{j=1}^{x-1} \\left( 1 + \\sum_{k=1}^{j} k \\right) &gt;= N\\]\n\\[x + \\sum_{j=1}^{x-1}\\sum_{k=1}^{j} k &gt;= N\\]\nwhich results in:\n\\[\\frac{x^3 + 5x}{6} &gt;= N\\]\nSolving this, we get \\(9\\) drops for \\(3\\) eggs. With just \\(9\\) drops, we can guarantee finding the breaking floor in a \\(129\\) storey tower."
  },
  {
    "objectID": "blog/the-egg-tower-puzzle/index.html#n-eggs",
    "href": "blog/the-egg-tower-puzzle/index.html#n-eggs",
    "title": "The egg tower puzzle",
    "section": "\\(N\\) eggs",
    "text": "\\(N\\) eggs\nLet’s see if we can generalize this for \\(N\\) eggs.\nWith \\(1\\) egg and \\(x\\) drops, we know we can check \\(x\\) floors. Let’s define this as \\(f(x, 1)\\), i.e.:\n\\[f(x, 1) = x \\tag{1}\\]\nwhere \\(f(x, n)\\) is the floors that can be checked with \\(x\\) drops and \\(n\\) eggs.\nWe can safely say that with \\(0\\) drops or \\(0\\) eggs we can check \\(0\\) floors.\n\\[f(0, n) = f(x, 0) = 0\\]\nSo we can write Equation 1 as the following:\n\\[f(x, 1) = 1 + f(x-1, 1) + f(x-1, 0)\\]\nFor \\(2\\) eggs and \\(x\\) drops, the number of floors we can check, i.e. \\(f(x, 2)\\), is:\n\\[f(x, 2) = \\sum_{k=1}^{x} k \\tag{2}\\]\nWe can expand this as the following:\n\\[f(x, 2) = 1 + \\sum_{k=1}^{x-1} k + x - 1\\]\nand substitute in Equation 1 to get:\n\\[f(x, 2) = 1 + f(x-1, 2) + f(x-1, 1)\\]\nAnd, for \\(3\\) eggs and \\(x\\) drops, the number of floors we can check, i.e. \\(f(x, 2)\\), is:\n\\[f(x, 3) = x + \\sum_{j=1}^{x-1}\\sum_{k=1}^{j} k\\]\nAgain, we can expand it and rearrange some terms:\n\\[f(x, 3) = x + \\sum_{j=1}^{x-2}\\sum_{k=1}^{j} k + \\sum_{k=1}^{x-1} k\\]\n\\[f(x, 3) = 1 + x - 1 + \\sum_{j=1}^{x-2}\\sum_{k=1}^{j} k + \\sum_{k=1}^{x-1} k\\]\nand substitute in Equation 2 to get:\n\\[f(x, 3) = 1 + f(x - 1, 3) + f(x - 1, 2)\\]\nWe can see a pattern emerging here. The generalized equation can be written like so:\n\\[f(x, n) = 1 + f(x - 1, n) + f(x - 1, n - 1) \\tag{3}\\]\nThis is also known as a recurrence relation.\nThis result can be reasoned through intuition as well. To find the total floors you can check with \\(n\\) eggs and \\(x\\) drops, it will be \\(1\\) (your first drop) plus the maximum number of floors you can check with \\(n\\) eggs and \\(x-1\\) eggs (if the first egg does not break) plus the maximum number of floors you can check with \\(n-1\\) eggs with \\(x-1\\) eggs (if the first egg does break).\nIf we wanted to, we could expand this recurrence relation1.\n1 Thanks to /u/possiblywrong for pointing this out [1].Here is the expansion increasing the depth in the direction of number of drops:\n\\[f(x, n) = 1 + f(x - 1, n) + f(x - 1, n - 1)\\]\n\\[f(x, n) = 3 + f(x - 2, n) + 2f(x - 2, n - 1) + f(x - 2, n - 2)\\]\n\\[f(x, n) = 7 + f(x - 3, n) + 3f(x - 3, n - 1) + 3f(x - 3, n - 2) + f(x - 3, n - 3)\\]\n\\[f(x, n) = 15 + f(x - 4, n) + 4f(x - 4, n - 1) + 6f(x - 4, n - 2) + 4f(x - 4, n - 3) + f(x - 4, n - 4)\\]\n\\[f(x, n) = 31 + f(x - 5, n) + 5f(x - 5, n - 1) + 10f(x - 5, n - 2) + 10f(x - 5, n - 3) + 5f(x - 5, n - 4) + f(x - 5, n - 5)\\]\n\\[f(x, n) = 63 + f(x - 6, n) + 6f(x - 6, n - 1) + 15f(x - 6, n - 2) + 20f(x - 6, n - 3) + 15f(x - 6, n - 4) + 6f(x - 6, n - 5) + f(x - 6, n - 6)\\]\nEagle eye readers will notice a pattern.\n\n\n\nBinomial coefficients in Pascal’s triangle\n\n\nIt turns out that this expansion is related to the binomial coefficients.\nIf we had infinite number of eggs, you’d see that the first element is the only term that contributes to \\(f(x, n)\\), since the others will be \\(0\\) for \\(x - d\\) where \\(d\\) is the depth in the triangle. That is to say, if we had infinite eggs, with 6 drops we can guarantee checking 63 floors.\nUsing this, we can say that, with \\(x\\) drops we can guarantee checking \\(2^x - 1\\) floors if we had infinite eggs2.\n2 If we had a finite number of eggs, an approximation of this recurrence can be made. See /u/mark_ovchain’s insightful comment on this thread for more information."
  },
  {
    "objectID": "blog/the-egg-tower-puzzle/index.html#implementation",
    "href": "blog/the-egg-tower-puzzle/index.html#implementation",
    "title": "The egg tower puzzle",
    "section": "Implementation",
    "text": "Implementation\nLet’s implement this problem.\njulia&gt; println(VERSION)\n1.4.0\nWe can implement Equation 3 as a function:\njulia&gt; f(x, n) = x == 0 || n == 0 ? 0 : 1 + f(x - 1, n) + f(x - 1, n - 1)\nf (generic function with 1 method)\nFor \\(1\\) egg, the number of floors you can check is the number of drops you make.\njulia&gt; arr = 1:100;\n\njulia&gt; @test f.(arr, 1) == arr\nTest Passed\nAnd, we can verify that it works for \\(2\\) eggs as well.\njulia&gt; @test f(14, 2) &gt;= 100\nTest Passed\n\njulia&gt; @test f(14, 2) == 105\nTest Passed\nWe can implement this generally like so:\njulia&gt; function starting_floor(floors, n)\n         for x in 1:floors\n             if f(x, n) &gt;= floors\n                 return x\n             end\n         end\n       end\nstarting_floor (generic function with 1 method)\nAnd get the answer to the problem programmatically.\njulia&gt; starting_floor(100, 2)\n14\nUsing the function f, we can also generate a table that explores what is the maximum number of floors that can be check for various number of drops and eggs.\n\n\n\nMaximum number of floors that can be checked with \\(x\\) drops and \\(n\\) eggs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 egg\n2 eggs\n3 eggs\n4 eggs\n5 eggs\n6 eggs\n7 eggs\n8 eggs\n9 eggs\n10 eggs\n\n\n\n\n1 drop\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n\n\n2 drops\n2\n3\n3\n3\n3\n3\n3\n3\n3\n3\n\n\n3 drops\n3\n6\n7\n7\n7\n7\n7\n7\n7\n7\n\n\n4 drops\n4\n10\n14\n15\n15\n15\n15\n15\n15\n15\n\n\n5 drops\n5\n15\n25\n30\n31\n31\n31\n31\n31\n31\n\n\n6 drops\n6\n21\n41\n56\n62\n63\n63\n63\n63\n63\n\n\n7 drops\n7\n28\n63\n98\n119\n126\n127\n127\n127\n127\n\n\n8 drops\n8\n36\n92\n162\n218\n246\n254\n255\n255\n255\n\n\n9 drops\n9\n45\n129\n255\n381\n465\n501\n510\n511\n511\n\n\n10 drops\n10\n55\n175\n385\n637\n847\n967\n1012\n1022\n1023\n\n\n11 drops\n11\n66\n231\n561\n1023\n1485\n1815\n1980\n2035\n2046\n\n\n12 drops\n12\n78\n298\n793\n1585\n2509\n3301\n3796\n4016\n4082\n\n\n13 drops\n13\n91\n377\n1092\n2379\n4095\n5811\n7098\n7813\n8099\n\n\n14 drops\n14\n105\n469\n1470\n3472\n6475\n9907\n12910\n14912\n15913\n\n\n15 drops\n15\n120\n575\n1940\n4943\n9948\n16383\n22818\n27823\n30826\n\n\n\n\n\nYou’ll notice that the upper right corner of the table stays the same if you increase the number of eggs you have at your disposal. You can see this even more clearly in this visualization.\n\n\n\nThe relationship between the number of floors that can be checked, the number of drops and number of eggs.\n\n\nThere’s a minimal number of drops required to guarantee that you will find the breaking floor, even if you have unlimited eggs.\nIf you want to check \\(7\\) floors, as long as you have more than \\(3\\) eggs, you can have to use a minimum of 3 drops to guarantee finding the breaking floor.\nFor 100 floors, it is \\(7\\) drops. If you had unlimited eggs, you would use the largest partition possible. That means dividing the total floors by \\(2\\).\nPartitioning the floors equally or in other words bisecting the floors, and exploring the partition of interest using the same strategy is the most efficient way of finding the breaking floor.\nSo there you go! We have solved the general case for the egg and tower puzzle."
  },
  {
    "objectID": "blog/how-to-install-gdb-on-osx/index.html",
    "href": "blog/how-to-install-gdb-on-osx/index.html",
    "title": "How to install gdb on OSX",
    "section": "",
    "text": "brew tap homebrew/dupes\nbrew install gdb\nCertificate issue can be resolved by the following steps\nsudo security add-trust -d -r trustRoot -p basic -p codeSign -k /Library/Keychains/System.keychain ~/Desktop/gdb-cert.cer\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2015,\n  author = {Krishnamurthy, Dheepak},\n  title = {How to Install Gdb on {OSX}},\n  date = {2015-07-27},\n  url = {https://kdheepak.com/blog/how-to-install-gdb-on-osx/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “How to install gdb on OSX,” Jul. 27, 2015.\nhttps://kdheepak.com/blog/how-to-install-gdb-on-osx/."
  },
  {
    "objectID": "blog/building-dashboards-using-param-and-panel-in-python/index.html",
    "href": "blog/building-dashboards-using-param-and-panel-in-python/index.html",
    "title": "Building Dashboards using Param and Panel in Python",
    "section": "",
    "text": "Code\n################################################################################\n\n# autoreload all modules every time before executing the Python code\n%reload_ext autoreload\n%autoreload 2\n\n################################################################################\n\nfrom IPython.core.interactiveshell import InteractiveShell\n\n# `ast_node_interactivity` is a setting that determines how the return value of the last line in a cell is displayed\n# with `last_expr_or_assign`, the return value of the last expression is displayed unless it is assigned to a variable\nInteractiveShell.ast_node_interactivity = \"last_expr_or_assign\"\n\n################################################################################\n\nimport pandas as pd\n\n# `copy_on_write` is a performance improvement\n# This will be the default in a future version of pandas\n# Refer to https://pandas.pydata.org/pandas-docs/stable/user_guide/copy_on_write.html\npd.options.mode.copy_on_write = True\npd.options.future.no_silent_downcasting = True\n\n################################################################################\n\n%matplotlib inline\n\nimport matplotlib as mpl\n\nmpl.use(\"agg\")\n\n# `constrained_layout` helps avoid overlapping elements\n# Refer to https://matplotlib.org/stable/tutorials/intermediate/constrainedlayout_guide.html\nmpl.pyplot.rcParams[\"figure.constrained_layout.use\"] = True\n\n\n\n\n\n\n\n\nThe UI elements in this post are not interactive as this is a static page. To see the interactive elements, please run the notebook in a Jupyter environment.\n\n\n\n\n\nCode\nimport holoviews as hv\nimport hvplot.pandas  # noqa\nimport pandas as pd\nimport panel as pn\nimport param\n\npn.extension(\"tabulator\")\nhv.extension(\"bokeh\")\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npanel is a library that allows creating interactive dashboards in pure Python. It’s a flexible library that allows interlinking matplotlib, bokeh, widgets, and more.\nThere are however many ways to use panel, some of which are better for certain use cases. I wanted to write this post to share the way I use panel.\n\nDevelopment Constraints\nMy first constraint when using panel was that I wanted to develop the dashboard in an interactive manner, preferably using a Jupyter notebook environment. panel does allow starting a server using the panel serve --autoreload command and you can pass in the path to a file or a jupyter notebook. However, I want to prototype individual components in a Jupyter notebook, but once I’m happy with the components, I want to combine them into a dashboard. With multiple components like this, using global variables gets unwieldy. Additionally, for multi-page dashboards, I don’t want to have to store different components in different files and run multiple servers.\nMy second constraint was that I wanted to make the dashboard as modular as possible. I wanted to be able to reuse some components across different dashboards. For example, I might have a component that shows a line chart and I want to use that line chart in a user guide page as well as in the home page.\nLastly, I wanted the code to be usable in a Python script in case someone wanted to programmatically access the same features. Imagine if a user wanted to plot the line chart from the dashboard and annotate it with some custom text. I wanted to make it easy for an advanced user that wanted to do that to have the option to do so. This also means that I wanted to make it easy to test the components in a CI/CD pipeline.\nThe most natural way to do this was to make the components as classes and then instantiate them as part of the dashboard. This also requires the state and the view to be separate. In this post we are going to talk specifically about that approach. We’ll use the IMDb movies dataset as an example to build a dashboard.\n\n\nJupyter prelude\nWhen working in a Jupyter notebook, autoreloading modules is a feature that can be very useful. This means you can make a python package and import the package in the notebook, prototype components in the notebook and move the code over to the package when you are happy with the component. With autoreloading, you don’t have to restart the jupyter notebook kernel every time you make a change to the source code.\n\n# autoreload all modules every time before executing the Python code\n%reload_ext autoreload\n%autoreload 2\n\nFor this example, I’ve made a package called movies_dashboard that has the following structure:\n\n!eza --tree src\n\n\nsrc\n\n└── movies_dashboard\n\n    ├── __init__.py\n\n    ├── movies.py\n\n    └── py.typed\n\n\n\n\nAny changes to the files in the package will be automatically reloaded when a new cell is run.\n\nimport movies_dashboard as md\nmd.__version__\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[5], line 2\n      1 import movies_dashboard as md\n----&gt; 2 md.__version__\n\nAttributeError: module 'movies_dashboard' has no attribute '__version__'\n\n\n\nThat errors but after updating the version in the __init__.py file, the __version__ attribute is updated without reloading the kernel.\n\n!echo \"__version__ = '0.1.0'\" &gt; src/movies_dashboard/__init__.py\n\n\nmd.__version__\n\n'0.1.0'\n\n\nAnother setting that you can enable is last_expr_or_assign. This makes it such that even if the last line of a cell is an assignment, the value of the assignment is displayed.\n\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"last_expr_or_assign\"\n\nWith this setting, you don’t have to repeat the name of the variable at the end of every cell to see the value of the variable.\n\nimport pandas as pd\n\ndf = pd.read_csv(\"./data/title.basics.tsv.gz\", sep=\"\\t\", nrows=500).head()\n# df ## this line is not required to see the value of df\n\n\n\n\n\n\n\n\ntconst\ntitleType\nprimaryTitle\noriginalTitle\nisAdult\nstartYear\nendYear\nruntimeMinutes\ngenres\n\n\n\n\n0\ntt0000001\nshort\nCarmencita\nCarmencita\n0\n1894\n\\N\n1\nDocumentary,Short\n\n\n1\ntt0000002\nshort\nLe clown et ses chiens\nLe clown et ses chiens\n0\n1892\n\\N\n5\nAnimation,Short\n\n\n2\ntt0000003\nshort\nPoor Pierrot\nPauvre Pierrot\n0\n1892\n\\N\n5\nAnimation,Comedy,Romance\n\n\n3\ntt0000004\nshort\nUn bon bock\nUn bon bock\n0\n1892\n\\N\n12\nAnimation,Short\n\n\n4\ntt0000005\nshort\nBlacksmith Scene\nBlacksmith Scene\n0\n1893\n\\N\n1\nShort\n\n\n\n\n\n\n\n\n\nParam State\npanel is built on top of param. One useful way to think about these two packages is that param is a way to define state and panel is a way to visualize that state. And making state driven components is a great way to make interactive dashboards.\nWith param, you can define the state using a class based approach:\n\nimport param\n\n\nclass MoviesStateExample(param.Parameterized):\n    name = param.String()\n    year = param.Integer()\n\nm = MoviesStateExample(name = \"Goodfellas\", year = 1990)\n\nMoviesStateExample(name='Goodfellas', year=1990)\n\n\nAnd with panel, you can visualize the state:\n\nimport panel as pn\n\npn.Param(m)\n\n\n\n\n\n  \n\n\n\n\nWhen making any UI it is important to identify the state variables of a component. This usually involves understanding a few different things:\n\nWhat are the inputs to the component?\nWhat are the derived properties of the component?\nWhat are the outputs of the component?\n\nThis typically forms a unidirectional graph where the inputs are used to derive the properties and the properties are used to derive the outputs.\n\nIdentifying Inputs\nLet’s say we want to filter based on the year, the average ratings and the runtime of movies. In this case, we would have one variable for the input dataframe; and variables for the year, ratings and runtime ranges.\n\nclass MoviesStateExample(param.Parameterized):\n    input_df = param.DataFrame()\n    \n    year_range = param.Range()\n    ratings_range = param.Range()\n    runtime_range = param.Range()\n\n\n\nIdentifying Derived Properties\nIn this example, when the class is initialized, we may want to load the CSV files, preprocess and clean the data. When self.df = df is called, param will trigger an action with the name of the parameter. And any functions that are listening to that action will be called. We can use this feature to update any derived properties.\nThere are a few different ways to listen to changes in a parameter.\n\nAdd a member function with the param.depends decorator.\n\n\nclass MovieUsingDepends(param.Parameterized):\n    start_year = param.Integer()\n    end_year = param.Integer()\n    df = param.DataFrame()\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.df = pd.read_csv(\"./data/title.basics.tsv.gz\", sep=\"\\t\", nrows=500)\n\n    @param.depends(\"df\", watch=True)\n    def _update_bounds(self):\n        self.start_year = int(self.df[\"startYear\"].min())\n        self.end_year = int(self.df[\"startYear\"].max())\n\n\nm = MovieUsingDepends()\nprint(dict(start=m.start_year, end=m.end_year))\n\n{'start': 1892, 'end': 1912}\n\n\n\nUse pm.bind with the watch=True argument.\n\n\nclass MovieUsingBind(param.Parameterized):\n    start_year = param.Integer()\n    end_year = param.Integer()\n    df = param.DataFrame()\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        param.bind(self._update_bounds, self.param.df, watch=True)\n        self.df = pd.read_csv(\"./data/title.basics.tsv.gz\", sep=\"\\t\", nrows=500)\n\n    def _update_bounds(self, df):\n        self.start_year = int(self.df[\"startYear\"].min())\n        self.end_year = int(self.df[\"startYear\"].max())\n\n\nm = MovieUsingBind()\nprint(dict(start=m.start_year, end=m.end_year))\n\n{'start': 1892, 'end': 1912}\n\n\n\nUse self.param.watch in the __init__ function.\n\n\nclass MovieUsingWatch(param.Parameterized):\n    start_year = param.Integer()\n    end_year = param.Integer()\n    df = param.DataFrame()\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.param.watch(self._update_bounds, \"df\")\n        self.df = pd.read_csv(\"./data/title.basics.tsv.gz\", sep=\"\\t\", nrows=500)\n\n    def _update_bounds(self, event):\n        if event.name == \"df\":\n            df = event.new\n            self.start_year = int(self.df[\"startYear\"].min())\n            self.end_year = int(self.df[\"startYear\"].max())\n\n\nm = MovieUsingWatch()\nprint(dict(start=m.start_year, end=m.end_year))\n\n{'start': 1892, 'end': 1912}\n\n\n\n\n\n\n\n\n@param.depends decorator with watch=True is the simplest because it is more explicit and easier to read.\n\n\n\nIn all cases, when you use watch=True, you have created a dependent function, and any properties that are updated in that function are dependent properties.\n\n\nOutputs\nFinally, it is important to define the outputs of the component. In this case, the outputs is a derived component that represents the filtered dataframe.\n\nclass MovieWithOutputs(param.Parameterized):\n    start_year = param.Integer()\n    end_year = param.Integer()\n    df = param.DataFrame()\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.df = pd.read_csv(\n            \"./data/title.basics.tsv.gz\",\n            sep=\"\\t\",\n            usecols=[\"primaryTitle\", \"startYear\"],\n            nrows=200,\n        )\n\n    @param.depends(\"df\", watch=True)\n    def _update_bounds(self):\n        self.start_year = int(self.df[\"startYear\"].min())\n        self.end_year = int(self.df[\"startYear\"].max())\n\n    @param.depends(\"df\", \"start_year\", \"end_year\")\n    def output_df(self):\n        df, start_year, end_year = (\n            self.df,\n            self.start_year,\n            self.end_year,\n        )\n        return df.query(f\"startYear &gt;= {start_year}\").query(f\"startYear &lt;= {end_year}\")\n\n\nm = MovieWithOutputs()\nm.output_df()\n\n\n\n\n\n\n\n\nprimaryTitle\nstartYear\n\n\n\n\n0\nCarmencita\n1894\n\n\n1\nLe clown et ses chiens\n1892\n\n\n2\nPoor Pierrot\n1892\n\n\n3\nUn bon bock\n1892\n\n\n4\nBlacksmith Scene\n1893\n\n\n...\n...\n...\n\n\n195\nLa fuite en Égypte\n1898\n\n\n196\nGlasgow Fire Engine\n1898\n\n\n197\nGran corrida de toros\n1898\n\n\n198\nIndian War Council\n1894\n\n\n199\nLe jardin des oliviers\n1898\n\n\n\n\n200 rows × 2 columns\n\n\n\nReturning the outputs from a function allows for easy access to the outputs for testing, debugging and for use in other components.\nOn some occassions however, you might want to store the outputs as a property to cache outputs. This is useful when the output is expensive to compute. In the example below, the output is stored in a filtered_df property and is updated whenever the df, start_year or end_year changes.\n\nclass MovieWithDependentOutputs(param.Parameterized):\n    df = param.DataFrame()\n    start_year = param.Integer()\n    end_year = param.Integer()\n    filtered_df = param.DataFrame()\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.df = pd.read_csv(\n            \"./data/title.basics.tsv.gz\",\n            sep=\"\\t\",\n            usecols=[\"primaryTitle\", \"startYear\"],\n            nrows=200,\n        )\n\n    @param.depends(\"df\", watch=True)\n    def _update_bounds(self):\n        self.start_year = int(self.df[\"startYear\"].min())\n        self.end_year = int(self.df[\"startYear\"].max())\n\n    @param.depends(\"df\", \"start_year\", \"end_year\", watch=True)\n    def _output_df(self):\n        df, start_year, end_year = (\n            self.df,\n            self.start_year,\n            self.end_year,\n        )\n        self.filtered_df = df.query(f\"startYear &gt;= {start_year}\").query(\n            f\"startYear &lt;= {end_year}\"\n        )\n\n\nm = MovieWithDependentOutputs()\nm.filtered_df\n\n\n\n\n\n\n\n\nprimaryTitle\nstartYear\n\n\n\n\n0\nCarmencita\n1894\n\n\n1\nLe clown et ses chiens\n1892\n\n\n2\nPoor Pierrot\n1892\n\n\n3\nUn bon bock\n1892\n\n\n4\nBlacksmith Scene\n1893\n\n\n...\n...\n...\n\n\n195\nLa fuite en Égypte\n1898\n\n\n196\nGlasgow Fire Engine\n1898\n\n\n197\nGran corrida de toros\n1898\n\n\n198\nIndian War Council\n1894\n\n\n199\nLe jardin des oliviers\n1898\n\n\n\n\n200 rows × 2 columns\n\n\n\n\n\nConventions\nOne thing to consider is that some dependent properties may computed only as part of the internal state of a component. These dependent properties are usually private variables and are not meant to be accessed directly.\n\n\n\n\n\n\nYou can signal that a property is private by prefixing the property with an underscore. This is a convention in Python to signal that a property is private and should not be accessed directly.\n\n\n\n\nclass MovieSignalingPrivateVariables(param.Parameterized):\n    df = param.DataFrame()\n    _start_year = param.Integer()\n    _end_year = param.Integer()\n    filtered_df = param.DataFrame()\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.df = pd.read_csv(\n            \"./data/title.basics.tsv.gz\",\n            sep=\"\\t\",\n            usecols=[\"primaryTitle\", \"startYear\"],\n            nrows=200,\n        )\n\n    @param.depends(\"df\", watch=True)\n    def _update_bounds(self):\n        self._start_year = int(self.df[\"startYear\"].min())\n        self._end_year = int(self.df[\"startYear\"].max())\n\n    @param.depends(\"df\", \"_start_year\", \"_end_year\", watch=True)\n    def _update_outputs(self):\n        df, start_year, end_year = (\n            self.df,\n            self._start_year,\n            self._end_year,\n        )\n        self.filtered_df = df.query(f\"startYear &gt;= {start_year}\").query(\n            f\"startYear &lt;= {end_year}\"\n        )\n\n\nm = MovieSignalingPrivateVariables();\n\n\n\n\nPanel View\nAfter setting up the state of an component, we can create a view that presents the state, derived values and the outputs.\nOne convention is to make this part of a panel() or a view() method that returns the layout and initializes any pn.widgets in, and only in, this method.\n\nclass MoviesPanel(param.Parameterized):\n    df = param.DataFrame()\n    start_year = param.Integer()\n    end_year = param.Integer()\n    filtered_df = param.DataFrame()\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        basics = pd.read_csv(\"./data/title.basics.tsv.gz\", sep=\"\\t\", nrows=500)\n        ratings = pd.read_csv(\"./data/title.ratings.tsv.gz\", sep=\"\\t\", nrows=500)\n        self.df = basics.merge(ratings, on=\"tconst\").dropna()\n\n    @param.depends(\"df\", watch=True)\n    def _update_bounds(self):\n        self.start_year = int(self.df[\"startYear\"].min())\n        self.end_year = int(self.df[\"startYear\"].max())\n\n    @param.depends(\"df\", \"start_year\", \"end_year\", watch=True)\n    def _update_outputs(self):\n        df, start_year, end_year = (\n            self.df,\n            self.start_year,\n            self.end_year,\n        )\n        self.filtered_df = df.query(f\"startYear &gt;= {start_year}\").query(\n            f\"startYear &lt;= {end_year}\"\n        )\n\n    def panel(self):\n        return pn.Column(\n            pn.Row(\n                pn.widgets.IntInput.from_param(self.param.start_year, name=\"Start Year\"),\n                pn.widgets.IntInput.from_param(self.param.end_year, name=\"End Year\"),\n            ),\n            pn.widgets.Tabulator.from_param(\n                self.param.filtered_df, pagination=\"remote\", page_size=5, disabled=True,\n            ),\n        )\n\n\nm = MoviesPanel()\nm.panel()\n\n\n\n\n\n  \n\n\n\n\nWhen a user updates the start year or the end year, the filtered dataframe is updated. And when that filtered data is updated, the Tabulator widget is updated. This is a very simple example, but this pattern can be extended to more complex dashboards.\n\n\n\n\n\n\nIt is possible to also derive from pn.viewable.Viewer and implement the __panel__ method. Doing this will return the layout of the component when the component is displayed in a notebook.\n\n\n\nEvery widget in panel accepts a few different types of arguments (See this section in the official documentation for more information). But the two most common types are:\n\nA Parameter instance\nA method using pn.bind or pn.depends that returns a value\n\n\n1. A parameter instance\nIt is important to understand the difference between an attribute instance and a parameter instance. An attribute instance is the value that most people typically deal with.\n\nm.start_year\n\n1892\n\n\nA parameter instance on the other hand is a special instance created by any class that inherits from param.Parameterized.\n\nm.param.start_year\n\n&lt;param.parameters.Integer at 0x317027400&gt;\n\n\n\nisinstance(m.param.start_year, param.Parameter)\n\nTrue\n\n\nAttribute instances are implemented using descriptors. When the Python interpreter sees m.start_year, it will return the value of the attribute by called the __get__ method of the param.Integer descriptor. This returns the current state at the time of the invocation.\n\ntype(m.start_year)\n\nint\n\n\nm.param.start_year on the other hand is a special value that contains a pm.Parameter instance that allows enabling the reactive features. This special value has to be passed into a widget to create a two way binding, and this has to be done using the from_param method.\n\npn.widgets.IntInput.from_param(m.param.start_year)\n\n\n\n\n\n  \n\n\n\n\n\n\n2. A method using pn.bind or pn.depends that returns a value\nThere are two ways to achieve a method that functions as a callback.\n\nUsing pn.bind\nUsing @pn.depends\n\na. Using pn.bind\nWidgets also can accept a method that is bound to a parameter. This is useful when you want to create a widget that is dependent on another parameter.\n\ndef _get_dataframe(df):\n    return df.head().drop(columns=[\"tconst\", \"titleType\", \"isAdult\", \"endYear\", \"genres\", \"originalTitle\"])\n    \npn.widgets.Tabulator(pn.bind(_get_dataframe, m.param.filtered_df), disabled=True)\n\n\n\n\n\n  \n\n\n\n\npn.bind is a way to bind a method to a parameter, and this method will be called whenever the parameter changes.\n\n\n\n\n\n\npn.bind is just an alias for param.bind.\n\n\n\nKeep in mind that pn.bind returns a function:\n\ntype(pn.bind(_get_dataframe, m.param.filtered_df))\n\nfunction\n\n\nAnd calling that function will return the value of the parameter at that time.\n\nf = pn.bind(_get_dataframe, m.param.filtered_df);\n\nf()\n\n\n\n\n\n\n\n\nprimaryTitle\nstartYear\nruntimeMinutes\naverageRating\nnumVotes\n\n\n\n\n0\nCarmencita\n1894\n1\n5.7\n2115\n\n\n1\nLe clown et ses chiens\n1892\n5\n5.6\n285\n\n\n2\nPoor Pierrot\n1892\n5\n6.4\n2148\n\n\n3\nUn bon bock\n1892\n12\n5.3\n183\n\n\n4\nBlacksmith Scene\n1893\n1\n6.2\n2872\n\n\n\n\n\n\n\nBut in Jupyter notebooks, even displaying the function will call the function and return the value.\n\nf\n\n\n\n\n\n  \n\n\n\n\nb. Using @pn.depends\nThe input to a widget can also be a function or a method that is part of the class that uses the @pn.depends decorator. If this decorator is used, and when this method is passed to a widget, the method will be called whenever the parameter changes and the return value is used to update the UI.\nIn this case however, displaying the method will not call the method:\n\n@pn.depends(m.param.filtered_df)\ndef _get_dataframe(filtered_df):\n    return df.head().drop(columns=[\"tconst\", \"titleType\", \"isAdult\", \"endYear\", \"genres\", \"originalTitle\"])\n\n_get_dataframe\n\n&lt;function __main__._get_dataframe(filtered_df)&gt;\n\n\n\n_get_dataframe(m.filtered_df)\n\n\n\n\n\n\n\n\nprimaryTitle\nstartYear\nruntimeMinutes\n\n\n\n\n0\nCarmencita\n1894\n1\n\n\n1\nLe clown et ses chiens\n1892\n5\n\n\n2\nPoor Pierrot\n1892\n5\n\n\n3\nUn bon bock\n1892\n12\n\n\n4\nBlacksmith Scene\n1893\n1\n\n\n\n\n\n\n\nWhen using @pn.depends, the variable (e.g. _get_dataframe) that would have contained a reference to the function is replaced by a new wrapped function which is reactive. So in this case, you can pass the variable directly to the widget.\n\npn.widgets.Tabulator(_get_dataframe, disabled=True)\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSimilar to pn.bind and param.bind, @pn.depends is an alias for @param.depends.\n\n\n\nHere’s an example of using the @pn.depends decorator to define a method in a class that is used to update the UI:\n\nclass MoviesPanel(param.Parameterized):\n    start_year = param.Integer()\n    end_year = param.Integer()\n    df = param.DataFrame()\n    filtered_df = param.DataFrame()\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        basics = pd.read_csv(\"./data/title.basics.tsv.gz\", sep=\"\\t\", nrows=500)\n        ratings = pd.read_csv(\"./data/title.ratings.tsv.gz\", sep=\"\\t\", nrows=500)\n        self.df = basics.merge(ratings, on=\"tconst\").dropna()\n\n    @param.depends(\"df\", watch=True)\n    def _update_bounds(self):\n        self.start_year = int(self.df[\"startYear\"].min())\n        self.end_year = int(self.df[\"startYear\"].max())\n\n    @param.depends(\"df\", \"start_year\", \"end_year\", watch=True)\n    def _output_df(self):\n        df, start_year, end_year = (\n            self.df,\n            self.start_year,\n            self.end_year,\n        )\n        self.filtered_df = df.query(f\"startYear &gt;= {start_year}\").query(\n            f\"startYear &lt;= {end_year}\"\n        )\n        return self.filtered_df\n\n    @param.depends(\"filtered_df\")\n    def _get_dataframe(filtered_df):\n        return df.head().drop(columns=[\"tconst\", \"titleType\", \"isAdult\", \"endYear\", \"genres\", \"originalTitle\"])\n\n    def panel(self):\n        return pn.Column(\n            pn.Row(\n                pn.widgets.IntInput.from_param(self.param.start_year, name=\"Start Year\"),\n                pn.widgets.IntInput.from_param(self.param.end_year, name=\"End Year\"),\n            ),\n            pn.widgets.Tabulator(\n                self._get_dataframe, pagination=\"remote\", page_size=5\n            ),\n        )\n\n\n\nm = MoviesPanel()\nm.panel()\n\n\n\n\n\n  \n\n\n\n\n\n\nwatch=True vs watch=False\nNotice that the @pn.depends decorator is used to define the method _get_dataframe does not use the watch=True argument.\nIf the @pn.depends decorator uses the watch=True argument, the method will be called whenever the parameter changes AND the method will be called again when the widget needs to be updated.\nIf you are ever confused about this, add print or log statements to the method to see when a method is called.\n\nclass WatchTrueVsFalse(param.Parameterized):\n    input_data = param.String()\n\n    @param.depends(\"input_data\")\n    def _update_dependency_unwatched(self):\n        print(\"Unwatched\")\n        return \"Unwatched: \" + self.input_data\n\n    @param.depends(\"input_data\", watch=True)\n    def _update_dependent_watched(self):\n        print(\"Watched\")\n        return \"Watched: \" + self.input_data\n\n    def panel(self):\n        return pn.Column(\n            pn.widgets.TextInput.from_param(self.param.input_data),\n            pn.Row(pn.pane.Str(self._update_dependency_unwatched), pn.pane.Str(self._update_dependent_watched)),\n        )\n\nWatchTrueVsFalse(input_data=\"hello world\").panel()\n\nUnwatched\nWatched\n\n\n\n\n\n\n  \n\n\n\n\n\nYou can see that Watched is printed twice:\n\nWhen the input is changed\nWhen the pn.pane.Str is displayed again after the input is changed\n\nbut Unwatched is printed only once:\n\nWhen the pn.pane.Str is displayed again after the input is changed\n\n\n\n\n\n\n\nWhen watch=True is used, it is recommended to not return anything from that method and simply update the state of the class instead. It’s easier to reason about the code and forces using from_param to bind to a derived property instead.\n\n\n\n\n\n\nExample: Movies Dashboard\nWith just the @param.depends decorator, you can make any reactive component using panel by using two way bindings to update the state and the UI, and trigger updates to other dependencies which in turn can update other parts of the UI.\nAs a more involved example, I’ve attached a package with a class called Movies that has the following state, derived properties and outputs:\n\n\nCode\ndigraph MoviesGraph {\n    // Define graph properties\n    rankdir=LR;\n    node [shape=box, style=rounded];\n\n    // State variables\n    nrows [label=\"nrows (state)\"];\n    df [label=\"df (state)\"];\n    year_range [label=\"year_range (state)\"];\n    ratings_range [label=\"ratings_range (state)\"];\n    runtime_range [label=\"runtime_range (state)\"];\n    genre [label=\"genre (state)\"];\n\n    // Derived properties\n    filtered_df [label=\"filtered_df (derived)\"];\n    plot [label=\"plot (derived)\"];\n\n    // Outputs\n    panel_layout [label=\"Panel Layout (output)\"];\n\n    // Edges\n    nrows -&gt; df;\n    df -&gt; year_range;\n    df -&gt; ratings_range;\n    df -&gt; runtime_range;\n    df -&gt; genre;\n    df -&gt; filtered_df;\n    year_range -&gt; filtered_df;\n    ratings_range -&gt; filtered_df;\n    runtime_range -&gt; filtered_df;\n    genre -&gt; filtered_df;\n    filtered_df -&gt; plot;\n    plot -&gt; panel_layout;\n    filtered_df -&gt; panel_layout;\n}\n\n\n\n\n\n\n\nMoviesGraph\n\n\n\nnrows\n\nnrows (state)\n\n\n\ndf\n\ndf (state)\n\n\n\nnrows-&gt;df\n\n\n\n\n\nyear_range\n\nyear_range (state)\n\n\n\ndf-&gt;year_range\n\n\n\n\n\nratings_range\n\nratings_range (state)\n\n\n\ndf-&gt;ratings_range\n\n\n\n\n\nruntime_range\n\nruntime_range (state)\n\n\n\ndf-&gt;runtime_range\n\n\n\n\n\ngenre\n\ngenre (state)\n\n\n\ndf-&gt;genre\n\n\n\n\n\nfiltered_df\n\nfiltered_df (derived)\n\n\n\ndf-&gt;filtered_df\n\n\n\n\n\nyear_range-&gt;filtered_df\n\n\n\n\n\nratings_range-&gt;filtered_df\n\n\n\n\n\nruntime_range-&gt;filtered_df\n\n\n\n\n\ngenre-&gt;filtered_df\n\n\n\n\n\nplot\n\nplot (derived)\n\n\n\nfiltered_df-&gt;plot\n\n\n\n\n\npanel_layout\n\nPanel Layout (output)\n\n\n\nfiltered_df-&gt;panel_layout\n\n\n\n\n\nplot-&gt;panel_layout\n\n\n\n\n\n\n\n\n\n\nAnd here’s what the UI looks like:\n\n\nCode\nimport movies_dashboard\n\n\nWe can instantiate the Movies class.\n\nm = movies_dashboard.movies.Movies();\n\nAnd call the panel() method to get an interactive dashboard.\n\nm.panel()\n\n\n\n\n\n\n\n\n  \n\n\n\n\nBy having methods that return subcomponents, we can easily combine them on the fly on a case by case basis.\n\n\nCode\nm.genre = \"Documentary\"\ndocumentary_plot = m._update_plot()\nm.genre = \"Comedy\"\ncomedy_plot = m._update_plot()\n\nm.genre = \"Romance\"\n\n(documentary_plot + comedy_plot).cols(1)\n\n\n\n\n\n\n  \n\n\n\n\nThe only real disadvantage of this package based approach is that it is not straightforward to make a wasm only version of the panel dashboard, since that requires it to be all in one file.\nThis approach allows making a package, using param to define dependent state, create UI when required in a class based approach. In my opinion, this lends itself to better testing, documentation and maintainability in the long run. This is also the approach recommended in the intermediate sections of the panel tutorials. Check out these links for more information:\n\nhttps://panel.holoviz.org/tutorials/intermediate/parameters.html\nhttps://panel.holoviz.org/tutorials/intermediate/interactivity.html\nhttps://panel.holoviz.org/tutorials/intermediate/reusable_components.html\n\nI also wanted to shout out the panel and param developers for creating such a flexible and powerful library. And thanks to the members of the holoviz community for offering feedback and suggestions on this post.\n\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2025,\n  author = {Krishnamurthy, Dheepak},\n  title = {Building {Dashboards} Using {Param} and {Panel} in {Python}},\n  date = {2025-01-05},\n  url = {https://kdheepak.com/blog/building-dashboards-using-param-and-panel-in-python/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Building Dashboards using Param and Panel in\nPython,” Jan. 05, 2025. https://kdheepak.com/blog/building-dashboards-using-param-and-panel-in-python/."
  },
  {
    "objectID": "blog/graphing-cgpgrey-rock-paper-scissors-youtube-game/index.html",
    "href": "blog/graphing-cgpgrey-rock-paper-scissors-youtube-game/index.html",
    "title": "Graphing CGP Grey’s Rock-Paper-Scissors YouTube Game",
    "section": "",
    "text": "If you haven’t already checked it out, go watch CGPGrey’s Rock-Paper-Scissors YouTube Game.\n\nIn this post, I’m going to explore what all the possible paths available are. Let’s import some packages first.\n\nusing PyCall\nusing Conda\nusing Graphs\nusing WGLMakie\nusing CairoMakie\nusing GraphMakie\nusing GraphMakie.NetworkLayout\nusing JSON3\nusing JSServe, Markdown\nusing ColorSchemes\nPage(exportable=true, offline=true)\nCairoMakie.activate!()\nMakie.inline!(true)\n\nFortunately for us, CGPGrey was kind enough to put links to the choices in the description of (almost) every video. We can use Google’s YouTube API to get the video descriptions and get all the YouTube links in the description.\nWe are going to use the google-api-python-client in Python from Julia.\n\n\nCode\nAPI_KEY = ENV[\"YOUTUBE_API_KEY\"]; # Get API_KEY from google console\nbuild = pyimport(\"googleapiclient.discovery\").build # from googleapiclient.discovery import build\nyoutube = build(\"youtube\", \"v3\", developerKey=API_KEY) # call build function in Python\n\n\nNow we can get the description of every video, extract the metadata from it into a Dict of Dicts, build a graph:\n\n\nCode\nyoutubeid(url) = string(first(split(replace(url, \"https://www.youtube.com/watch?v=\" =&gt; \"\"), \"&t\")))\n\nfunction metadata(url)\n  id = youtubeid(url)\n  request = youtube.videos().list(part=[\"snippet\", \"statistics\"], id=id)\n  response = request.execute()\n  description = response[\"items\"][1][\"snippet\"][\"description\"]\n  title = response[\"items\"][1][\"snippet\"][\"title\"]\n  views = parse(Int, response[\"items\"][1][\"statistics\"][\"viewCount\"])\n  if url == \"https://www.youtube.com/watch?v=CPb168NUwGc\"\n    # Special case for https://www.youtube.com/watch?v=CPb168NUwGc (description for this is not standard)\n    return (; description=\"\"\"\nWIN: https://www.youtube.com/watch?v=RVLUX6BUEJI\nLOSE / DRAW: https://www.youtube.com/watch?v=jDQqv3zkbIQ\n\n🌐 Website: https://www.cgpgrey.com\n💖 Patreon: https://www.patreon.com/cgpgrey\n📒 Cortex: http://www.cortexbrand.com\n\n⛔️ Ah01F ✅\n\"\"\", title=\"🔴\", views)\n  end\n  (; description, title, views)\nend\n\nfunction links(url; visited=Dict(), duplicate_links=false)\n  m = metadata(url)\n  r = Dict(\n    :id =&gt; youtubeid(url),\n    :code =&gt; last(split(strip(m.description), \"\\n\")), # last line is a special code\n    :url =&gt; url,\n    :links =&gt; [],\n    :children =&gt; [],\n    :title =&gt; m.title,\n    :views =&gt; m.views,\n  )\n  for line in split(m.description, \"\\n\")\n    if occursin(\"https://www.youtube.com/watch?v=\", line)\n      _status, video = split(line, \":\", limit=2)\n      video = strip(video)\n      push!(r[:links], Dict(:status =&gt; string(_status), :url =&gt; string(video)))\n    end\n  end\n\n  for link in r[:links]\n    url = link[:url]\n    if !(url in keys(visited))\n      visited[url] = Dict()\n      s = links(url; visited, duplicate_links)\n      push!(r[:children], s)\n      visited[url] = s\n    else\n      duplicate_links && push!(r[:children], visited[url])\n    end\n  end\n  return r\nend\n\nfunction cached_links(url; duplicate_links)\n  bfile = \"\"\"$(youtubeid(url))-$(duplicate_links ? \"dup-links\" : \"no-dup-links\").json\"\"\"\n  if isfile(bfile)\n    return JSON3.read(bfile)\n  end\n  r = links(url; duplicate_links)\n  open(bfile, \"w\") do f\n    JSON3.write(f, r)\n  end\n  r\nend\n\nfunction _clean_titles(str)\n  t = join([c for c in str if isascii(c)])\n  t = strip(t)\n  if occursin(\"Cortex\", t)\n    return \"\"\n  end\n  string(t)\nend\n\n\nfunction _node_builder(nodes, d)\n  for c in d[:children]\n    push!(nodes, (; id=c[:id], title=_clean_titles(c[:code]), url=c[:url], views=c[:views]))\n    _node_builder(nodes, c)\n  end\nend\n\nfunction _graph_builder(G, d, ids)\n  from = d[:id]\n  for c in d[:children]\n    to = c[:id]\n    add_edge!(G, findfirst(isequal(from), ids), findfirst(isequal(to), ids))\n    _graph_builder(G, c, ids)\n  end\nend\n\nfunction get_nodes(data)\n  nodes = [(; id=data[:id], title=_clean_titles(data[:title]), url=data[:url], views=data[:views])]\n  _node_builder(nodes, data)\n  nodes = unique(nodes)\n  ids = [n.id for n in nodes]\n  titles = [n.title for n in nodes]\n  urls = [n.url for n in nodes]\n  (; ids, titles, urls, nodes)\nend\n\nfunction grapher(data, ids)\n  G = SimpleDiGraph(length(ids))\n  _graph_builder(G, data, ids)\n  G\nend\n\n\n\ndata = cached_links(\"https://www.youtube.com/watch?v=PmWQmZXYd74\", duplicate_links=true)\n(; ids, titles, urls, nodes) = get_nodes(data)\nG = grapher(data, ids)\n\n{111, 206} directed simple Int64 graph\n\n\n\n\nThere’s 111 videos in this graph with 206 connections between the videos.\n\n\nHere’s what that graph visualized looks like:\n\n\nCode\nset_theme!(; size=(1600, 900), fonts=(; title=\"CMU Serif\"))\nviews = [node[:views] for node in nodes]\nmin_val, max_val = extrema(views[2:end])\nnormed_views = (views .- min_val) ./ (max_val - min_val)\ncolors = cgrad(:viridis, scale=log)\nnode_colors = ColorSchemes.get.(Ref(colors), normed_views)\n\nf, ax, p = graphplot(G;\n  nlabels=titles,\n  nlabels_fontsize=10,\n  node_color=node_colors,\n  node_size=20,\n  arrow_size=8,\n  layout=Stress(dim=3)\n)\nColorbar(f[1, 2], limits=extrema(views), colormap=colors, label=\"YouTube Views\")\n# hidedecorations!(ax); hidespines!(ax);\n# offsets = [Point2f(0.1, -0.5) for _ in p[:node_pos][]]\n# offsets[1] = Point2f(0.1, 0.5)\n# p.nlabels_offset[] = offsets\n# autolimits!(ax)\n# ax.title = \"CGP Grey's Rock-Paper-Scissors YouTube Game\"\nf\n\n\n\n\n\nThis graph contains a lot of duplicate links to the same video. For example when losing after different number of wins, you might end up at the same video. Let’s remove those connections so we can visualize it as a tree.\n\n\nCode\ndata = cached_links(\"https://www.youtube.com/watch?v=PmWQmZXYd74\", duplicate_links=false)\n(; ids, titles, urls, nodes) = get_nodes(data)\nG = grapher(data, ids)\n\n\n{111, 110} directed simple Int64 graph\n\n\n\n\nThere’s 111 videos in this graph with 110 connections between the videos.\n\n\nHere’s what the graph now visualized looks like:\n\n\nCode\nset_theme!(; size=(1600, 900), fonts=(; title=\"CMU Serif\"))\n\nviews = [node[:views] for node in nodes]\nmin_val, max_val = extrema(views[2:end])\nnormed_views = (views .- min_val) ./ (max_val - min_val)\ncolors = cgrad(:viridis, scale=log)\nnode_colors = ColorSchemes.get.(Ref(colors), normed_views)\n\n# If there's a space it is probably a unique name\nnode_size = [length(split(strip(t))) &gt; 1 ? 25 : 15 for t in titles]\n\nf, ax, p = graphplot(G;\n  nlabels=titles,\n  nlabels_fontsize=15,\n  node_color=node_colors,\n  node_size,\n  arrow_size=8,\n  arrow_shift=:end,\n  layout=Buchheim()\n)\nhidedecorations!(ax);\nhidespines!(ax);\noffsets = [Point2f(0.1, -1.5) for _ in p[:node_pos][]]\noffsets[1] = Point2f(0.1, 0.5)\np.nlabels_offset[] = offsets\nautolimits!(ax)\nax.title = \"CGP Grey's Rock-Paper-Scissors YouTube Game\"\nColorbar(f[1, 2], limits=extrema(views), colormap=colors, label=\"YouTube Views\")\nf\n\n\n\n\n\nThere we have it; a flowchart of the Rock-Paper-Scissors game.\nHere’s a table that contains the sorted view count as of April 19th, 2024.\n\n\nCode\nimport DataFrames as DF\n\n# Create an empty DataFrame\ndf = DF.DataFrame(Title=String[], Views=Int[])\n\nfor idx in sortperm(views, rev=true)\n  push!(df, (; Title=titles[idx], Views=views[idx]))\nend\n\n# Display the DataFrame\ndisplay(df)\n\n\n111×2 DataFrame86 rows omitted\n\n\n\nRow\nTitle\nViews\n\n\n\nString\nInt64\n\n\n\n\n1\nOne-in-a-Million YouTube Game: Can YOU Win?\n1073774\n\n\n2\nR1h01W\n420943\n\n\n3\nReally Over\n386865\n\n\n4\nR2xF\n354432\n\n\n5\nPost Game\n306757\n\n\n6\nR2h01W\n299879\n\n\n7\n\n285998\n\n\n8\nR1h03W\n234144\n\n\n9\nR1h04W\n228726\n\n\n10\nAh01F\n218414\n\n\n11\nR3h01W\n195832\n\n\n12\nR1h12W\n158979\n\n\n13\nR1h05W\n148637\n\n\n⋮\n⋮\n⋮\n\n\n100\nAh22F\n14462\n\n\n101\nAh29F\n14377\n\n\n102\nAh24F\n14309\n\n\n103\nAh27F\n14286\n\n\n104\nAh28F\n14184\n\n\n105\nAh26F\n14115\n\n\n106\nAh25F\n14112\n\n\n107\nR2h12F Scissors\n12105\n\n\n108\nAntiEnd Over 1k\n11331\n\n\n109\nR2xF PretFar\n10516\n\n\n110\nMost Anti Lucky\n10395\n\n\n111\nAh35W\n8809\n\n\n\n\n\n\nIf you liked this blog post, consider subscribing to CGP Grey’s Patreon so that they can make more awesome content like this.\nIf you are interested in viewing all the videos, you can check them out below:\n\n\nCode\nusing IJulia\n\nfunction display_youtube_video(node)\n  video_id = split(node.url, \"=\")[end]\n  title = node.title\n  if isempty(title)\n    title = \"---no special code---\"\n  end\n  html_code = \"\"\"\n&lt;details&gt;\n  &lt;summary&gt;$(title)&lt;/summary&gt;\n  &lt;iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/$video_id\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;\n&lt;/details&gt;\n  \"\"\"\n  display(\"text/html\", HTML(html_code))\nend\n\n@assert unique(nodes) == nodes\n\ndisplay_youtube_video.(nodes);\n\n\n\n  One-in-a-Million YouTube Game: Can YOU Win?\n  \n\n  \n\n\n\n  R1h01W\n  \n\n  \n\n\n\n  ---no special code---\n  \n\n  \n\n\n\n  R1h03W\n  \n\n  \n\n\n\n  R1h04W\n  \n\n  \n\n\n\n  R1h05W\n  \n\n  \n\n\n\n  R1h06W\n  \n\n  \n\n\n\n  R1h07W\n  \n\n  \n\n\n\n  R1h08\n  \n\n  \n\n\n\n  R1h09W\n  \n\n  \n\n\n\n  R1h10W\n  \n\n  \n\n\n\n  R1h11W\n  \n\n  \n\n\n\n  R1h12W\n  \n\n  \n\n\n\n  R1h13W    One Million Rock\n  \n\n  \n\n\n\n  Post Game Blue\n  \n\n  \n\n\n\n  Billion or Bust\n  \n\n  \n\n\n\n  RTh14W\n  \n\n  \n\n\n\n  RTh15W\n  \n\n  \n\n\n\n  RTh16W\n  \n\n  \n\n\n\n  RTh17W\n  \n\n  \n\n\n\n  RTh18W\n  \n\n  \n\n\n\n  RTh19W\n  \n\n  \n\n\n\n  RTh19 5W\n  \n\n  \n\n\n\n  RTh20W\n  \n\n  \n\n\n\n  RTh21W\n  \n\n  \n\n\n\n  RTh22W\n  \n\n  \n\n\n\n  RTh23W\n  \n\n  \n\n\n\n  RTh24W\n  \n\n  \n\n\n\n  RTh25W\n  \n\n  \n\n\n\n  RTh26W    Trillion End\n  \n\n  \n\n\n\n  Over a Billion, Under a Trillion\n  \n\n  \n\n\n\n  Over a Million, Under a Billion\n  \n\n  \n\n\n\n  R1h13F    Paper\n  \n\n  \n\n\n\n  R2h01W\n  \n\n  \n\n\n\n  R2h02W\n  \n\n  \n\n\n\n  R2h03W\n  \n\n  \n\n\n\n  R2h04W\n  \n\n  \n\n\n\n  R2h05W\n  \n\n  \n\n\n\n  R2h06W\n  \n\n  \n\n\n\n  R2h07W\n  \n\n  \n\n\n\n  R2h08W\n  \n\n  \n\n\n\n  R2h09W\n  \n\n  \n\n\n\n  R2h10W\n  \n\n  \n\n\n\n  R2h11W\n  \n\n  \n\n\n\n  R2h12W\n  \n\n  \n\n\n\n  R2h12F - Rock\n  \n\n  \n\n\n\n  R3h01W\n  \n\n  \n\n\n\n  R3h02W\n  \n\n  \n\n\n\n  R3h03W\n  \n\n  \n\n\n\n  R3h04W\n  \n\n  \n\n\n\n  R3h05W\n  \n\n  \n\n\n\n  R3h06W\n  \n\n  \n\n\n\n  R3h07W\n  \n\n  \n\n\n\n  R3h08W\n  \n\n  \n\n\n\n  R3h09W\n  \n\n  \n\n\n\n  R3h10W\n  \n\n  \n\n\n\n  R3h11W\n  \n\n  \n\n\n\n  R3h12W\n  \n\n  \n\n\n\n  R3 Rock\n  \n\n  \n\n\n\n  Post Game\n  \n\n  \n\n\n\n  R3 Paper\n  \n\n  \n\n\n\n  R1h13W    One Million Scissors\n  \n\n  \n\n\n\n  Really Over\n  \n\n  \n\n\n\n  R1h13W    One Million Paper\n  \n\n  \n\n\n\n  R2h12F    Scissors\n  \n\n  \n\n\n\n  R2xF PretFar\n  \n\n  \n\n\n\n  R2xF\n  \n\n  \n\n\n\n  R1h13F    Scissors\n  \n\n  \n\n\n\n  R1hPretFarF\n  \n\n  \n\n\n\n  R1hXF\n  \n\n  \n\n\n\n  R1h03F\n  \n\n  \n\n\n\n  R1h02F\n  \n\n  \n\n\n\n  Ah01F\n  \n\n  \n\n\n\n  Ah02F\n  \n\n  \n\n\n\n  Ah03F\n  \n\n  \n\n\n\n  Ah04F\n  \n\n  \n\n\n\n  Ah05F\n  \n\n  \n\n\n\n  Ah06F\n  \n\n  \n\n\n\n  Most Anti Lucky\n  \n\n  \n\n\n\n  Ah07F\n  \n\n  \n\n\n\n  AntiEnd Under 1k\n  \n\n  \n\n\n\n  Ah08F\n  \n\n  \n\n\n\n  Ah09F\n  \n\n  \n\n\n\n  Ah10F\n  \n\n  \n\n\n\n  Ah11F\n  \n\n  \n\n\n\n  Ah12F\n  \n\n  \n\n\n\n  Ah13F\n  \n\n  \n\n\n\n  Ah14F\n  \n\n  \n\n\n\n  Ah15F\n  \n\n  \n\n\n\n  Ah16F\n  \n\n  \n\n\n\n  Ah17F\n  \n\n  \n\n\n\n  Ah18F\n  \n\n  \n\n\n\n  AntiEnd Over 1k\n  \n\n  \n\n\n\n  Ah19F\n  \n\n  \n\n\n\n  Ah20F\n  \n\n  \n\n\n\n  Ah21F\n  \n\n  \n\n\n\n  Ah22F\n  \n\n  \n\n\n\n  Ah23F\n  \n\n  \n\n\n\n  Ah24F\n  \n\n  \n\n\n\n  Ah25F\n  \n\n  \n\n\n\n  Ah26F\n  \n\n  \n\n\n\n  Ah27F\n  \n\n  \n\n\n\n  Ah28F\n  \n\n  \n\n\n\n  Ah29F\n  \n\n  \n\n\n\n  Ah30F\n  \n\n  \n\n\n\n  Ah31F\n  \n\n  \n\n\n\n  Ah32F\n  \n\n  \n\n\n\n  Ah33F\n  \n\n  \n\n\n\n  Ah34F\n  \n\n  \n\n\n\n  Ah35W\n  \n\n  \n\n\n\n  Ah35F\n  \n\n  \n\n\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2023,\n  author = {Krishnamurthy, Dheepak},\n  title = {Graphing {CGP} {Grey’s} {Rock-Paper-Scissors} {YouTube}\n    {Game}},\n  date = {2023-10-23},\n  url = {https://kdheepak.com/blog/graphing-cgpgrey-rock-paper-scissors-youtube-game/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Graphing CGP Grey’s Rock-Paper-Scissors YouTube\nGame,” Oct. 23, 2023. https://kdheepak.com/blog/graphing-cgpgrey-rock-paper-scissors-youtube-game/."
  },
  {
    "objectID": "blog/home-monitoring-system/index.html",
    "href": "blog/home-monitoring-system/index.html",
    "title": "Home monitoring system",
    "section": "",
    "text": "Monitoring temperature using Raspberry Pi\nThe current ambient room temperature is 75.76 °F\n\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2014,\n  author = {Krishnamurthy, Dheepak},\n  title = {Home Monitoring System},\n  date = {2014-12-11},\n  url = {https://kdheepak.com/blog/home-monitoring-system/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Home monitoring system,” Dec. 11, 2014. https://kdheepak.com/blog/home-monitoring-system/."
  },
  {
    "objectID": "blog/pelican-margin-notes-with-pandoc/index.html",
    "href": "blog/pelican-margin-notes-with-pandoc/index.html",
    "title": "Pelican margin notes with Pandoc",
    "section": "",
    "text": "I’ve shifted to using quarto. I’ll leave this blog post up for reference if someone is interested.\nI’ve been inspired by a few other blogs to consider adding margin notes to this theme."
  },
  {
    "objectID": "blog/pelican-margin-notes-with-pandoc/index.html#introduction",
    "href": "blog/pelican-margin-notes-with-pandoc/index.html#introduction",
    "title": "Pelican margin notes with Pandoc",
    "section": "Introduction",
    "text": "Introduction\nI’ve been inspired by a few other blogs to consider adding margin notes to this theme. This theme is called pelican-smoothie and is freely available on Github. As you may have guessed from the name, this is a theme for Pelican, a static site generator powered by Python. Pelican allows you to write posts in Markdown or RestructuredText, and convert them into structured and beautiful websites. There are a few advantages of using a static site generator instead of a Content Management System (CMS) like WordPress, and I have covered it briefly in this post. Since Pelican is an open source project, it is inherently pretty customization. I can almost guarantee if you think of a feature that you’d like, you’ll be able to search for a plugin that does exactly that. There is in fact a collection of pelican-plugins. Their maintainer @justinmayer is also very responsive to feature requests and pull requests.\n And, on the rare occasion that you can’t find a plugin that does exactly what you want it to, you’ll be able to (with a little bit of research) create a plugin to do exactly just that. Their documentation is pretty good too. If you are looking at a creating a blog I highly recommend checking out Pelican.Pelican is only one of the few static site generators in Python. There are others such as Nikola, Lektor, Cactus, Hyde and many more. The main reason I chose Pelican was because it had a wide selection of themes. There are also many popular ones in other languages, but I haven’t researched them or used them enough or to have a strong opinion on them.\nThat’s probably not why you are reading this post though. You are probably interested in getting margin notes working on your blog too. I’ll have to caveat the following post by saying that this is a proof of concept and by no means a final stable version that you can deploy on your site. This approach worked for me, and the reason I went down this path was because I was curious to see how far I could push my static site generation workflow."
  },
  {
    "objectID": "blog/pelican-margin-notes-with-pandoc/index.html#setup",
    "href": "blog/pelican-margin-notes-with-pandoc/index.html#setup",
    "title": "Pelican margin notes with Pandoc",
    "section": "Setup",
    "text": "Setup\nFirstly, I’m not using Pelican’s built in reader for Markdown files, but instead am using Pandoc. I wrote a pretty long post on using Pandoc for academic writing; I think it’s safe to say that I’m a fan of Pandoc. Pelican has better built-in support for RestructuredText compared to Markdown, but plugins allow you to do pretty much everything you want with Markdown as your source file format. However the number of plugins required to get everything you want working quickly adds up.1 I’ve used Pandoc for other projects before and wanted to see if I could get it working in my blogging workflow. I’ve since incorporated Pandoc and it seems to be working quite well. Getting jupyter notebooks working with Pandoc was a bit of challenge though, but I was able to get past it by writing a filter for converting Jupyter notebooks with Pandoc.\n1 Not that’s a bad thing. I believe the way Pelican signals works will only activate a plugin if it has to, so it doesn’t slow down your deployment process.2 You will still be able to use this theme, either with Pandoc or Pelican’s default readers, however as you might see later in the post, I use aside tag elements for side notes or margin notes and I haven’t been able to find a plugin that does just thatAnd as I mentioned earlier, one of the main purposes of this implementation was because I was curious to see how far I could push this static site generation workflow. So if you are not using Pandoc in Pelican, you will not be able to use this theme with margin notes straight away2. So, the short version is that this implementation of margin notes employs Pandoc, filters with Pandoc using the pandocfilters package and this current specific theme."
  },
  {
    "objectID": "blog/pelican-margin-notes-with-pandoc/index.html#inspiration",
    "href": "blog/pelican-margin-notes-with-pandoc/index.html#inspiration",
    "title": "Pelican margin notes with Pandoc",
    "section": "Inspiration",
    "text": "Inspiration\nA list of blogs, posts, websites, web books have inspired this implementation. Most notably are the following articles – tuftle-css and this article published on Medium about Medium sidenotes. They both speak to some length on how margin notes can be used to improve the experience for a reader, especially on the web. Butterick’s Practical Typography is also a great example of effective use of margin notes. There are a few other articles [1], [2] that talk about this. The CSS for this page originally and the CSS for the margin notes had been heavily inspired by gameprogrammingpatterns.com.I highly recommend reading Butterick’s web book. It is freely available at Practical Typography. It’s challenged me to think critically about every aspect of a presentation. I also encourage buying his book or his fonts to aid Butterick in maintaining this content and producing more like this."
  },
  {
    "objectID": "blog/pelican-margin-notes-with-pandoc/index.html#implementation",
    "href": "blog/pelican-margin-notes-with-pandoc/index.html#implementation",
    "title": "Pelican margin notes with Pandoc",
    "section": "Implementation",
    "text": "Implementation\nAt the time of writing this article, Pandoc does not support creating margin notes for HTML documents. Pandoc does however support footnotes in the form of footnotes and inline notes. Inline notes are different for traditional footnotes in the source document. The following is an example of footnotes in Pandoc Markdown.\nHere is a footnote reference,[^1] and another.[^longnote]\n\n[^1]: Here is the footnote.\n[^longnote]: Here's one with multiple blocks.\n\n    Subsequent paragraphs are indented to show that they\n    belong to the previous footnote.\n\n        { some.code }\n\n    The whole paragraph can be indented, or just the first\n    line. In this way, multi-paragraph footnotes work like\n    multi-paragraph list items.\n\nThis paragraph won't be part of the note, because it\nisn't indented.\nThe following is an example of inline footnotes in Pandoc Markdown.\nHere is an inline note.^[Inlines notes are easier to write, since\nyou don't have to pick an identifier and move down to type the\nnote.]\nAs described in the example, inline notes are easier to write. Pandoc also conveniently also supports filters. They allow for additional functionality to be added by walking through the Abstract Syntax Tree, and parsing or modifying information. I chose the following syntax for implementing a aside tag when converting from a Markdown file to a HTML document.\n&gt; This is the syntax^[_aside_: And this is the margin note.] in Markdown.\n\nThis is the syntax in Markdown.And this is the margin note.\n\nWhen run through the filter, the above will be rendered as the following html.\n&lt;p&gt;This is an example for the syntax&lt;span id=\"aside-0\"&gt;&lt;/span&gt; in Markdown.&lt;/p&gt;\n&lt;div id=\"div-aside-0\"&gt;\n  &lt;aside id=\"aside-0\"&gt;This is a note that will appear in a tag&lt;/aside&gt;\n&lt;/div&gt;\nThe location of the footnote is replaced with a &lt;span&gt; tag, and an &lt;aside&gt; tag wrapped in a &lt;div&gt; tag is added to the end of the paragraph. This filter will also assign id to the &lt;span&gt;, &lt;aside&gt; and &lt;div&gt; tags sequentially. Additional functionally can be added here, but for now this seems to work for my purposes.\nWith the HTML generated with &lt;aside&gt; tags, it is now a question of assigning the right css. This turned out to be more tricky than I originally anticipated. The current theme uses bootstrap and the following layout to display content.\n&lt;div class=\"row\"&gt;\n  &lt;div class=\"col-sm-8\"&gt;&lt;/div&gt;\n  &lt;div class=\"col-sm-4\"&gt;&lt;/div&gt;\n&lt;/div&gt;\nBecause of the way Pelican and Jinja work, and because of how Pandoc returns the content to Pelican, the entire article content is stored in the first &lt;div&gt; element of width 8 units. Ideally, each paragraph would be wrapped in &lt;div&gt; elements of one class, with &lt;aside&gt; elements wrapped in a neighboring div class. With the current structure of Pelican, the only way I could do that is by injecting &lt;div&gt; elements all over the place using something like beautifulsoup. However I decided against it for now, and am using CSS to move the &lt;aside&gt; elements outside the element they are currently positioned in. Since the &lt;aside&gt; elements are located below the actual paragraph, I added javascript to move them up by their height. A better implementation could use the location of the &lt;span&gt; elements to fix the position of the notes."
  },
  {
    "objectID": "blog/pelican-margin-notes-with-pandoc/index.html#conclusions",
    "href": "blog/pelican-margin-notes-with-pandoc/index.html#conclusions",
    "title": "Pelican margin notes with Pandoc",
    "section": "Conclusions",
    "text": "Conclusions\nI’m sure there are definitely better ways to do the same thing, but this is what worked for now. There are a few limitations in the current implementation. One noticeable flaw is that I cannot have one margin note and one footnote in the same paragraph. And I’m positive there are more. Hopefully I’ll get a chance to work on this more to improve it in the near future. All the code is on GitHub in case you were curious and wanted to take a look at it. If you have thoughts on how this could be done better or would like to ask questions in general feel free to reach out."
  },
  {
    "objectID": "blog/robotics/index.html",
    "href": "blog/robotics/index.html",
    "title": "Robotics",
    "section": "",
    "text": "Robotics and Microcontroller Projects\n\n\n\n\n\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2014,\n  author = {Krishnamurthy, Dheepak},\n  title = {Robotics},\n  date = {2014-12-13},\n  url = {https://kdheepak.com/blog/robotics/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Robotics,” Dec. 13, 2014. https://kdheepak.com/blog/robotics/."
  },
  {
    "objectID": "blog/pandoc-lua-filter-for-alerts/index.html",
    "href": "blog/pandoc-lua-filter-for-alerts/index.html",
    "title": "Pandoc lua filter for alerts",
    "section": "",
    "text": "This is the example output of the markdown containing alert divs in pandoc. The unicode icons are inserted into the HTML using a pandoc lua filter.\n\n\n\n\n\n\n\n❓ This is a warning.\n\n\n\n\n\n\n\n\n\n\n\n❗ This is a error.\n\n\n\n\n\n\n\n\n\n\n\nℹ This is a info.\n\n\n\n\n\n\n\n\n\n\n\n✓ This is a success.\n\n\n\n\n\n\n\n\n\n\n\n🔎 This is a hint.\n\n\n\n\n\n\n\n\n\n\n\n🚧 This is a todo.\n\n\n\n\n\n\n\n\n\n\n\n💡 This is a tip.\n\n\n\n\n\n\n\n\n\n\n\n📝 This is a note.\n\n\n\n\n\n\n\n\n\n\n\n🥋 This is a exercise.\n\n\n\n\n\n\n\n\n\n\nQuarto supports additional callouts.\n\n\n\n\n\n\n\n\n\nThis is a Quarto callout-note.\n\n\n\n\n\n\n\n\n\nThis is a Quarto callout-tip.\n\n\n\n\n\n\n\n\n\nThis is a Quarto callout-important.\n\n\n\n\n\n\n\n\n\nThis is a Quarto callout-caution.\n\n\n\n\n\n\n\n\n\nThis is a Quarto callout-warning.\n\n\n\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2022,\n  author = {Krishnamurthy, Dheepak},\n  title = {Pandoc Lua Filter for Alerts},\n  date = {2022-03-31},\n  url = {https://kdheepak.com/blog/pandoc-lua-filter-for-alerts/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Pandoc lua filter for alerts,” Mar. 31,\n2022. https://kdheepak.com/blog/pandoc-lua-filter-for-alerts/."
  },
  {
    "objectID": "blog/emacsclient-and-tmux-split-navigation/index.html",
    "href": "blog/emacsclient-and-tmux-split-navigation/index.html",
    "title": "Emacsclient and tmux split navigation",
    "section": "",
    "text": "I’ve described some of the scripts that I use regularly when using emacs in the terminal. I also using emacs with tmux, even though it seems like emacs itself could be tweaked to replace tmux. Currently, my tmux+zsh setup has been much more powerful that what emacs alone can provide. zsh did not play well, even with multiterm and I’ve had mixed results with getting ipython to work well inside emacs.\nI use the following set of lisps my .emacs to get seamless navigation between emacs splits and tmux panes.\n;; Many thanks to the author of and contributors to the following posts:\n;; https://gist.github.com/mislav/5189704\n;; https://robots.thoughtbot.com/post/53022241323/seamlessly-navigate-vim-and-tmux-splits\n;;\n;; TODO: Make a script that generates tmux and emacs code without duplication\n;;\n;; NOTE: My keybindings are not the default emacs ones, using windmove\n\n;; Try to move direction, which is supplied as arg\n;; If cannot move that direction, send a tmux command to do appropriate move\n(defun windmove-emacs-or-tmux(dir tmux-cmd)\n(interactive)\n(if (ignore-errors (funcall (intern (concat \"windmove-\" dir))))\nnil                       ;; Moving within emacs\n(shell-command tmux-cmd)) ;; At edges, send command to tmux\n)\n\n;Move between windows with custom keybindings\n(global-set-key (kbd \"C-k\")\n   '(lambda () (interactive) (windmove-emacs-or-tmux \"up\"  \"tmux select-pane -U\")))\n(global-set-key (kbd \"C-j\")\n   '(lambda () (interactive) (windmove-emacs-or-tmux \"down\"  \"tmux select-pane -D\")))\n(global-set-key (kbd \"C-l\")\n   '(lambda () (interactive) (windmove-emacs-or-tmux \"right\" \"tmux select-pane -R\")))\n(global-set-key (kbd \"C-h\")\n   '(lambda () (interactive) (windmove-emacs-or-tmux \"left\"  \"tmux select-pane -L\")))\nThe following was added to .tmux.conf\n## Smart pane switching with awareness of emacs splits.\nbind -n C-h run \"(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\\/)g?(view|emacs?)(diff)?$' && tmux send-keys C-h) || tmux select-pane -L\"\nbind -n C-j run \"(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\\/)g?(view|emacs?)(diff)?$' && tmux send-keys C-j) || tmux select-pane -D\"\nbind -n C-k run \"(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\\/)g?(view|emacs?)(diff)?$' && tmux send-keys C-k) || tmux select-pane -U\"\nbind -n C-l run \"(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\\/)g?(view|emacs?)(diff)?$' && tmux send-keys C-l) || tmux select-pane -R\"\nbind -n C-\\ run \"(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\\/)g?(view|emacs?)(diff)?$' && tmux send-keys 'C-\\\\') || tmux select-pane -l\"\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2015,\n  author = {Krishnamurthy, Dheepak},\n  title = {Emacsclient and Tmux Split Navigation},\n  date = {2015-07-27},\n  url = {https://kdheepak.com/blog/emacsclient-and-tmux-split-navigation/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Emacsclient and tmux split navigation,”\nJul. 27, 2015. https://kdheepak.com/blog/emacsclient-and-tmux-split-navigation/."
  },
  {
    "objectID": "blog/my-unicode-cheat-sheet/index.html",
    "href": "blog/my-unicode-cheat-sheet/index.html",
    "title": "My Unicode cheat sheet",
    "section": "",
    "text": "I wanted to make a cheat sheet for myself containing a reference of things I use when it comes to Unicode and when using Unicode in Vim, Python, Julia and Rust.\nFirst some basics:"
  },
  {
    "objectID": "blog/my-unicode-cheat-sheet/index.html#vim",
    "href": "blog/my-unicode-cheat-sheet/index.html#vim",
    "title": "My Unicode cheat sheet",
    "section": "Vim",
    "text": "Vim\nIn vim in insert mode, we can type Ctrl+V3 followed by either:\n3 aside: Check out :help i_CTRL-V_digit for more information.\na decimal number [0-255]. Ctrl-v255 will insert ÿ.\nthe letter o and then an octal number [0-377]. Ctrl-vo377 will insert ÿ.\nthe letter x and then a hex number [00-ff]. Ctrl-vxff will insert ÿ.\nthe letter u and then a 4-hexchar Unicode sequence. Ctrl-vu03C0 will insert π.\nthe letter U and then an 8-hexchar Unicode sequence. Ctrl-vU0001F409 will insert 🐉.\n\nUsing unicode.vim, we can use :UnicodeName to get the Unicode number of the code point under the cursor. With unicode.vim and fzf installed, you can even fuzzy find Unicode symbols."
  },
  {
    "objectID": "blog/my-unicode-cheat-sheet/index.html#python",
    "href": "blog/my-unicode-cheat-sheet/index.html#python",
    "title": "My Unicode cheat sheet",
    "section": "Python",
    "text": "Python\nSince Python &gt;=3.3, the Unicode string type supports a flexible string representation. This means that any one of multiple internal representations may be used depending on the largest Unicode ordinal (1, 2, or 4 bytes) in a Unicode string.\nFor the common case, a string used in the English speaking world may only use ASCII characters thereby using a Latin-1 encoding to store the data. If non Basic Multilingual Plane characters are used in a Python Unicode string, the internal representation may be stored as UCS2 or UCS4.\nIn each of these cases, the internal representation uses the same number of bytes for each code point. This allows efficient indexing into a Python Unicode string, but indexing into a Python Unicode string will only return a valid code point and not a grapheme. The length of a Unicode string is defined as the number of code points in the string.\nAs an example, let’s take this emoji: 🤦🏼‍♂️ [1]. This emoji actually consists of 5 code points4:\n4 aside: We can view this breakdown using uniview. In vim, we can use :UnicodeName.\n🤦 : U+1F926 FACE PALM\n🏼 : U+1F3FC EMOJI MODIFIER FITZPATRICK TYPE-3\n‍: U+200D ZERO WIDTH JOINER\n♂ : U+2642 MALE SIGN (Ml)\n ️: U+FE0F VARIATION SELECTOR-16\n\nIn Python, a string that contains just this emoji has length equal to 5.\nPython 3.7.6 (default, Jan  8 2020, 13:42:34)\nType 'copyright', 'credits' or 'license' for more information\nIPython 7.16.1 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]: s = \"🤦🏼‍♂️\"\n\nIn [2]: s\nOut[2]: '🤦🏼\\u200d♂️'\n\nIn [3]: print(s)\n🤦🏼‍♂️\n\nIn [4]: len(s)\nOut[4]: 5\nIf we want to keep a Python file pure ASCII but want to use Unicode in string literals, we can use the \\U escape sequence.\nIn [5]: s = '\\U0001F926\\U0001F3FC\\u200D\\u2642\\uFE0F'\n\nIn [6]: print(s)\n🤦🏼‍♂️\nAs mentioned earlier, indexing into a Python Unicode string gives us the code point at that location.\nIn [6]: s[0]\nOut[6]: '🤦'\n\nIn [7]: s[1]\nOut[7]: '🏼'\n\nIn [8]: s[2]\nOut[8]: '\\u200d'\n\nIn [9]: s[3]\nOut[9]: '♂'\n\nIn [10]: s[4] # this may look like an empty string but it is not.\nOut[10]: '️'\n\nIn [11]: len(s[4]), s[4].encode(\"utf-8\")\nOut[11]: (1, b'\\xef\\xb8\\x8f')\n\nIn [12]: len(''), ''.encode(\"utf-8\")\nOut[12]: (0, b'')\n\nIn [13]: s[5]\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\n&lt;ipython-input-42-b5dece75d686&gt; in &lt;module&gt;\n----&gt; 1 s[5]\n\nIndexError: string index out of range\nIterating over a Python string gives us the code points as well.\nIn [14]: [c for c in s]\nOut[14]: ['🤦', '🏼', '\\u200d', '♂', '️']\nHowever, in practice, indexing into a string may not be what we want or may not be useful. More often, we are either interested in:\n\nindexing into the byte string representation or\nindexing into the graphemes.\n\nWe can use the s.encode('utf-8') function to get a Python byte string representation of the Python unicode string in s.\nIn [15]: s\nOut[15]: '🤦🏼\\u200d♂️'\n\nIn [16]: len(s)\nOut[16]: 5\n\nIn [17]: type(s)\nOut[17]: str\n\nIn [18]: s.encode(\"utf-8\")\nOut[18]: b'\\xf0\\x9f\\xa4\\xa6\\xf0\\x9f\\x8f\\xbc\\xe2\\x80\\x8d\\xe2\\x99\\x82\\xef\\xb8\\x8f'\n\nIn [19]: len(s.encode(\"utf-8\"))\nOut[19]: 17\n\nIn [20]: type(s.encode(\"utf-8\"))\nOut[20]: bytes\nIf we are interested in the number of graphemes, we can use the grapheme package.\nIn [21]: import grapheme\n\nIn [22]: grapheme.length(s)\nOut[22]: 1\n\nIn [23]: s = s + \" Why is Unicode so complicated?\"\n\nIn [24]: grapheme.slice(s, 0, 1)\nOut[24]: '🤦🏼\\u200d♂️'\n\nIn [25]: grapheme.slice(s, 2)\nOut[25]: 'Why is Unicode so complicated?'\nFor historical reasons, Unicode allows the same set of characters to be represented by different sequences of code points.\nIn [26]: single_char = 'ê'\n    ...: multiple_chars = '\\N{LATIN SMALL LETTER E}\\N{COMBINING CIRCUMFLEX ACCENT}'\n\nIn [27]: single_char\nOut[27]: 'ê'\n\nIn [28]: multiple_chars\nOut[28]: 'ê'\n\nIn [29]: len(single_char)\nOut[29]: 1\n\nIn [30]: len(multiple_chars)\nOut[30]: 2\nWe can use the built in standard library unicodedata to normalize Python Unicode strings.\nIn [31]: import unicodedata\n\nIn [32]: len(unicodedata.normalize(\"NFD\", single_char))\nOut[32]: 2\nIt is best practice to add the following lines to the top of your Python file that you expect to run as scripts.\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nIf your Python files are part of a package, just adding the second line is sufficient. I recommend using pre-commit hooks to ensure that the encoding pragma of python files are fixed before making a git commit."
  },
  {
    "objectID": "blog/my-unicode-cheat-sheet/index.html#julia",
    "href": "blog/my-unicode-cheat-sheet/index.html#julia",
    "title": "My Unicode cheat sheet",
    "section": "Julia",
    "text": "Julia\nLet’s take a look at how Julia handles strings. This is the version of Julia that I’m using:\n               _\n   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.5.0 (2020-08-01)\n _/ |\\__'_|_|_|\\__'_|  |  Official https://julialang.org/ release\n|__/                   |\n\njulia&gt;\njulia&gt; s = \"🤦🏼‍♂️\"\n\"🤦🏼\\u200d♂️\"\n\njulia&gt; println(s)\n🤦🏼‍♂️\n\njulia&gt; length(s)\n5\n\njulia&gt; ncodeunits(s)\n17\n\njulia&gt; codeunit(s)\nUInt8\nPrinting the length of the string in Julia returns 5. As we saw earlier, this is the number of code points in the unicode string.\nJulia String literals are encoded using the UTF-8 encoding. In Python, the indexing into a string would return the code point at the string. In Julia, indexing into a string refers to code units5, and for the default String this returns the byte as a Char type.\n5 https://unicode.org/glossary/#code_unitjulia&gt; s[1]\n'🤦': Unicode U+1F926 (category So: Symbol, other)\n\njulia&gt; typeof(s[1])\nChar\n\njulia&gt; s[2]\nERROR: StringIndexError(\"🤦🏼\\u200d♂️\", 2)\nStacktrace:\n [1] string_index_err(::String, ::Int64) at ./strings/string.jl:12\n [2] getindex_continued(::String, ::Int64, ::UInt32) at ./strings/string.jl:220\n [3] getindex(::String, ::Int64) at ./strings/string.jl:213\n [4] top-level scope at REPL[12]:1\n\njulia&gt; s[3]\nERROR: StringIndexError(\"🤦🏼\\u200d♂️\", 3)\nStacktrace:\n[...]\n\njulia&gt; s[4]\nERROR: StringIndexError(\"🤦🏼\\u200d♂️\", 4)\nStacktrace:\n[...]\n\njulia&gt; s[5]\n'🏼': Unicode U+1F3FC (category Sk: Symbol, modifier)\n\njulia&gt; s[6]\nERROR: StringIndexError(\"🤦🏼\\u200d♂️\", 6)\nStacktrace:\n[...]\n\njulia&gt; s[7]\nERROR: StringIndexError(\"🤦🏼\\u200d♂️\", 7)\nStacktrace:\n[...]\n\njulia&gt; s[8]\nERROR: StringIndexError(\"🤦🏼\\u200d♂️\", 8)\nStacktrace:\n[...]\n\njulia&gt; s[9]\n'\\u200d': Unicode U+200D (category Cf: Other, format)\n\njulia&gt; s[10]\nERROR: StringIndexError(\"🤦🏼\\u200d♂️\", 10)\nStacktrace:\n[...]\n\njulia&gt; s[11]\nERROR: StringIndexError(\"🤦🏼\\u200d♂️\", 11)\nStacktrace:\n[...]\n\njulia&gt; s[12]\n'♂': Unicode U+2642 (category So: Symbol, other)\n\njulia&gt; s[13]\nERROR: StringIndexError(\"🤦🏼\\u200d♂️\", 13)\nStacktrace:\n[...]\n\njulia&gt; s[14]\nERROR: StringIndexError(\"🤦🏼\\u200d♂️\", 14)\nStacktrace:\n[...]\n\njulia&gt; s[15]\n'️': Unicode U+FE0F (category Mn: Mark, nonspacing)\n\njulia&gt; s[16]\nERROR: StringIndexError(\"🤦🏼\\u200d♂️\", 16)\nStacktrace:\n[...]\n\njulia&gt; s[17]\nERROR: StringIndexError(\"🤦🏼\\u200d♂️\", 17)\nStacktrace:\n[...]\n\njulia&gt; s[18]\nERROR: BoundsError: attempt to access String\n  at index [18]\nStacktrace:\n[...]\nIf we want each code point in a Julia String, we can use eachindex6.\n6 aside: See the Julia manual strings documentation for more information: https://docs.julialang.org/en/v1/manual/strings/julia&gt; [s[i] for i in eachindex(s)]\n5-element Array{Char,1}:\n '🤦': Unicode U+1F926 (category So: Symbol, other)\n '🏼': Unicode U+1F3FC (category Sk: Symbol, modifier)\n '\\u200d': Unicode U+200D (category Cf: Other, format)\n '♂': Unicode U+2642 (category So: Symbol, other)\n '️': Unicode U+FE0F (category Mn: Mark, nonspacing)\nAnd finally, we can use the Unicode module that is built in to the standard library to get the number of graphemes.\n\njulia&gt; using Unicode\n\njulia&gt; graphemes(s)\nlength-1 GraphemeIterator{String} for \"🤦🏼‍♂️\"\n\njulia&gt; length(graphemes(s))\n1\nIf we wish to encode a Julia string as UTF-87, we can use the following:\n7 aside: As of Julia v1.5.0, only conversion to/from UTF-8 is currently supported: https://docs.julialang.org/en/v1/base/strings/#Base.transcodejulia&gt; transcode(UInt8, s)\n17-element Base.CodeUnits{UInt8,String}:\n 0xf0\n 0x9f\n 0xa4\n 0xa6\n 0xf0\n 0x9f\n 0x8f\n 0xbc\n 0xe2\n 0x80\n 0x8d\n 0xe2\n 0x99\n 0x82\n 0xef\n 0xb8\n 0x8f"
  },
  {
    "objectID": "blog/my-unicode-cheat-sheet/index.html#rust",
    "href": "blog/my-unicode-cheat-sheet/index.html#rust",
    "title": "My Unicode cheat sheet",
    "section": "Rust",
    "text": "Rust\nLet’s also take a look at rust. We can create a simple main.rs file:\n// main.rs\n\nfn main() {\n\n    let s = \"🤦🏼‍♂️\";\n\n    println!(\"{}\", s);\n\n    println!(\"{:?}\", s);\n\n    dbg!(s);\n\n    dbg!(s.len());\n\n    for (i, b) in s.bytes().enumerate() {\n        println!(\"s.bytes()[{}] = {:#x}\", i, b);\n    }\n\n    dbg!(s.chars().count());\n\n    for (i, c) in s.chars().enumerate() {\n        println!(\"s.chars()[{}] = {:?}\", i, c);\n    }\n\n}\nAnd compile and run it like so:\n$ rustc main.rs && ./main\n🤦🏼‍♂️\n\"🤦🏼\\u{200d}♂\\u{fe0f}\"\n[main.rs:11] s = \"🤦🏼\\u{200d}♂\\u{fe0f}\"\n[main.rs:13] s.len() = 17\ns.bytes()[0] = 0xf0\ns.bytes()[1] = 0x9f\ns.bytes()[2] = 0xa4\ns.bytes()[3] = 0xa6\ns.bytes()[4] = 0xf0\ns.bytes()[5] = 0x9f\ns.bytes()[6] = 0x8f\ns.bytes()[7] = 0xbc\ns.bytes()[8] = 0xe2\ns.bytes()[9] = 0x80\ns.bytes()[10] = 0x8d\ns.bytes()[11] = 0xe2\ns.bytes()[12] = 0x99\ns.bytes()[13] = 0x82\ns.bytes()[14] = 0xef\ns.bytes()[15] = 0xb8\ns.bytes()[16] = 0x8f\n[main.rs:19] s.chars().count() = 5\ns.chars()[0] = '🤦'\ns.chars()[1] = '🏼'\ns.chars()[2] = '\\u{200d}'\ns.chars()[3] = '♂'\ns.chars()[4] = '\\u{fe0f}'\nThere are also additional crates such as unicode-width and unicode-segmentation.\nunicode-width helps determine how many column widths a grapheme will occupy based on the Unicode Standard Annex #11 rules. For example abc occupies 3 columns but 写作业 occupies 6 columns but they are both 3 codepoints and 3 graphemes each. unicode-segmentation helps with determining the number of graphemes in a string.\n// main.rs\nuse unicode_width::UnicodeWidthStr;\nuse unicode_segmentation::UnicodeSegmentation;\n\nfn main() {\n  let s = \"abc\";\n  dbg!(s);\n  dbg!(s.len());\n  dbg!(s.width());\n  dbg!(s.graphemes(true).count());\n\n  println!(\"\");\n\n  let s = \"写作业\";\n  dbg!(s);\n  dbg!(s.len());\n  dbg!(s.width());\n  dbg!(s.graphemes(true).count());\n\n  println!(\"\");\n\n  let s = \"🤦🏼‍♂️\";\n  dbg!(s);\n  dbg!(s.len());\n  dbg!(s.width());\n  dbg!(s.graphemes(true).count());\n}\n$ rustc main.rs && ./main\n[src/main.rs:6] s = \"abc\"\n[src/main.rs:7] s.len() = 3\n[src/main.rs:8] s.width() = 3\n[src/main.rs:9] s.graphemes(true).count() = 3\n\n[src/main.rs:14] s = \"写作业\"\n[src/main.rs:15] s.len() = 9\n[src/main.rs:16] s.width() = 6\n[src/main.rs:17] s.graphemes(true).count() = 3\n\n[src/main.rs:22] s = \"🤦🏼‍♂️\"\n[src/main.rs:23] s.len() = 17\n[src/main.rs:24] s.width() = 5\n[src/main.rs:25] s.graphemes(true).count() = 1"
  },
  {
    "objectID": "blog/sveltekit-tailwind-starter/index.html",
    "href": "blog/sveltekit-tailwind-starter/index.html",
    "title": "Sveltekit tailwind starter",
    "section": "",
    "text": "The following is minimal instructions for getting started with the SvelteKit skeleton app, with tailwind and font awesome support. Run the following and follow prompts:\nnpm init svelte@next\nnpx svelte-add@latest tailwindcss\nnpx svelte-add@latest scss\nnpx svelte-add@latest postcss\nInstall all the following packages:\nnpm install\nnpm install -D @tailwindcss/forms\nnpm install -D tailwindcss/typography\nnpm install -D svelte-icons\nnpm install -D @fortawesome/free-solid-svg-icons@5.15.4\nnpm install -D @fortawesome/free-regular-svg-icons@5.15.4\nnpm install -D @fortawesome/free-brands-svg-icons@5.15.4\nnpm install -D @sveltejs/adapter-static@next\nnpm install layercake\nnpm install tw-elements\nnpm install d3\nAdd the following to .prettierrc:\n{\n  \"useTabs\": false,\n  \"quoteProps\": \"preserve\",\n  \"singleQuote\": false,\n  \"trailingComma\": \"all\",\n  \"printWidth\": 100,\n  \"tabWidth\": 2,\n  \"bracketSameLine\": false,\n  \"bracketSpacing\": true\n}\nAnd run the following to format all files:\nprettier . --write --ignore-path .gitignore\n\ntailwind-elements\nIf you want to add tailwind-elements, change tailwind.config.js to the following:\nconst config = {\n  content: [\"./src/**/*.{html,js,svelte,ts}\", \"./node_modules/tw-elements/dist/js/**/*.js\"],\n\n  theme: {\n    extend: {},\n  },\n\n  plugins: [\n    require(\"@tailwindcss/forms\"),\n    require(\"@tailwindcss/typography\"),\n    require(\"tw-elements/dist/plugin\"),\n  ],\n};\n\nmodule.exports = config;\nAnd update __layout.svelte to include the following:\n&lt;script lang=\"ts\"&gt;\n  import \"../app.css\";\n  import { browser } from \"$app/env\";\n  import { onMount } from \"svelte\";\n  onMount(async () =&gt; {\n    if (browser) {\n      await import(\"tw-elements\");\n    }\n  });\n&lt;/script&gt;\n\n\n\n\nReuseCC BY-SA 4.0CitationBibTeX citation:@online{krishnamurthy2022,\n  author = {Krishnamurthy, Dheepak},\n  title = {Sveltekit Tailwind Starter},\n  date = {2022-02-19},\n  url = {https://kdheepak.com/blog/sveltekit-tailwind-starter/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nD.\nKrishnamurthy, “Sveltekit tailwind starter,” Feb. 19, 2022.\nhttps://kdheepak.com/blog/sveltekit-tailwind-starter/."
  }
]