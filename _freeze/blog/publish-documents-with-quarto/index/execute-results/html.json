{
  "hash": "350df1c95bf3d82fbefa31b893893c42",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Publishing documents with Quarto\ndate: '2023-11-19T23:10:00-04:00'\ncategories:\n  - pandoc\nkeywords: 'quarto, markdown, pandoc, papers, writing, academic, scholarly, technical, scientific'\n---\n\n8 years ago, I made this diagram tongue-in-cheek to show my colleagues that it was possible to [write academic papers with Pandoc Markdown](../writing-papers-with-markdown/index.qmd).\n\n![](https://kdheepak.com/blog/writing-papers-with-markdown/images/learningcurve.png)\n\nSince then, there's been a lot of improvements to the Pandoc Markdown workflow for writing papers.\nPandoc went from 1.15.2 to 3.1.9, [adding an extraordinary number of features](https://pandoc.org/releases.html).\nOf note, [panflute](https://github.com/sergiocorreia/panflute) was created as a better and more fun way to write Python Pandoc filters. And Pandoc embedded [lua filters](https://pandoc.org/lua-filters.html) to allow writing pandoc filters directly in lua to prevent any marshalling of data.\n\n::: {.callout-important icon=false}\n\nI am continuously amazed and deeply impressed by the remarkable feat of software engineering that Pandoc represents, a sentiment echoed by everyone I know who has incorporated Pandoc into their workflow.\n\n:::\n\nYet, Pandoc has not achieved widespread popularity in the academic sphere.\n\nCollaborative academic writing often gravitates towards using Microsoft Word with OneDrive support.\nWYSIWYG is a powerful paradigm and provides immediate ease of use.\nWord's robust commenting and review tools are second to none.\nOutside of Word, OverLeaf or ShareLaTeX seem to have the most mindshare.\nI think when people choose $\\LaTeX$, they tend to do so because it is a safe bet.\nAs a markup language, it is older than I am.\nThat means there are resources online to address pretty much any problem you will come across^[Pour one out if you've tasked a graduate student to figure out why your paper isn't compiling.]\n, there are templates _everywhere_ for all kinds of publications, and text editor support is high quality.\n\nI still believe Pandoc is a phenomenal piece of software for writing academic papers (or any technical content for that matter).\nBeing able to version control through git, and to produce outputs in diverse formats like PDF, Word, and HTML, adds immense value for me.\nBut is it really going to be easier for everyone I'm collaborating with?\n\nEnter [Quarto](https://quarto.org/), a potential game-changer in persuading researchers to transition from Word or $\\LaTeX$.\n\nIf this is the first time you've heard of Quarto, you are probably not alone.\nQuarto is a nascent open-source publishing system from the creators of RMarkdown and RStudio that builds upon Pandoc and Jupyter.\n\nQuarto can [embed Jupyter Notebook cells](https://quarto.org/docs/authoring/notebook-embed.html) straight into the publication output.\nThis allows a seamless integration of research and data analysis into the publication process.\nAs most scientific research increasingly relies on interactive environments like RStudio and Jupyter Notebooks,\nQuarto's ability to incorporate this work into publishing workflows is immensely productive.\nAnd since Quarto builds on top of Pandoc, it supports [extensions that are basically Lua filters](https://quarto.org/docs/extensions/) to enhance the output.\nQuarto's VSCode and neovim extension make it easier for even non-technical contributors to collaborate on writing.\n\nFor technical publications where you want to show results inline, Quarto is a no-brainer.\nIf you are already using Jupyter Notebooks, using Quarto is incredibly seamless.\n[If you are interested in a static site generator writing in Julia with a similar feature set, you should check out [Franklin.jl](https://github.com/tlienart/Franklin.jl).]{.aside}\n\nBut even without using any of Quarto's computational features, I think it compares really well to many static site generation tools as a means to develop high quality technical documentation.\nI believe Quarto is a compelling alternative to Docsaurus, mkdocs, mdbook, hugo, sphinx, etc.\n\nOver the past year, every report, paper, presentation, and tutorial I've created has used Quarto and its features.\nAt the time of writing this post, Quarto is even the backbone of my blog.\nI think Quarto isn't without its [fair share of issues](https://github.com/quarto-dev/quarto-cli/issues), and I do think for highly custom layouts or professional typesetting, directly working in $\\LaTeX$ is probably easier.\nBut for such a young project, it shows real promise in my humble opinion.\n\nGiven that I've been using Quarto extensively for a while, I figured it was appropriate to revise the earlier diagram to reflect my experience:\n\n::: {#23a93f0d .cell execution_count=2}\n``` {.python .cell-code code-fold=\"true\"}\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nALPHA = 0.25\n\nwith plt.xkcd():\n    plt.rcParams.update({'font.size': 22})\n    x = np.arange(0, 1, 0.1)\n    word_y = 40 * x**2 + 2\n    latex_y = 2 * x**2 + 5\n    markdown_y = np.array([3, 3.1, 3.2, 1.5, 1.6, 3, 3.7, 7.5, 7.75, 8, 100])\n    markdown_x = np.array([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.61, 0.7, 0.8, 0.9])\n    quarto_y = 22.5 * (x-0.3)**2 + 0.75\n    fig, axs = plt.subplots(1, 1, figsize=(16, 10))\n    ax = axs\n\n    segment_positions = [0.25, 0.5, 0.75]\n\n    segment_labels = ['Basic Reports OR\\nStandard Documents', 'Papers with Figures\\nbased on Results', 'Per-Page Layout\\nOR Web Content', 'Professional\\nBook Layout']\n\n    range_starts = [0, 0.25, 0.5, 0.75]\n    range_ends = [0.25, 0.5, 0.75, 0.9]\n\n    y_pos_annotations = -0.15\n    y_pos_arrows = -0.1\n\n    for start, end, label in zip(range_starts, range_ends, segment_labels):\n        ax.annotate('',\n                    xy=(start, y_pos_arrows), xycoords=('data', 'axes fraction'),\n                    xytext=(end, y_pos_arrows), textcoords=('data', 'axes fraction'),\n                    arrowprops=dict(arrowstyle='<->', color='black'))\n\n    for i, position in enumerate(segment_positions):\n        ax.axvline(x=position, color='black', linestyle='--', linewidth=1)\n\n        ax.annotate(segment_labels[i],\n                    xy=(position, 0), xycoords=('data', 'axes fraction'),\n                    xytext=(-125, -50), textcoords='offset points',\n                    ha='center', va='baseline', alpha = 0.5)\n\n    ax.annotate(segment_labels[-1],\n                xy=(1, 0), xycoords=('axes fraction', 'axes fraction'),\n                xytext=(-75, -50), textcoords='offset points',\n                ha='center', va='baseline', alpha = 0.5)\n\n    word_line, = ax.plot(x, word_y, label=\"Word\")\n    latex_line, = ax.plot(x, latex_y, label=\"LaTeX\")\n    markdown_line, = ax.plot(markdown_x, markdown_y, alpha=ALPHA, label=\"Markdown\")\n    quarto_line, = ax.plot(x, quarto_y, linewidth=5, label=\"Quarto\")\n\n    ax.legend(handles=[word_line, latex_line, markdown_line, quarto_line], loc=\"upper left\")\n\n    ax.set_ylim(0, 10)\n    ax.set_xlim(0, 0.9)\n\n    arrowprops = dict(arrowstyle=\"->\", alpha=ALPHA)\n    ax.annotate(\"WHEN YOU START\\n USING MAKEFILES\", xy=(0.2, 3.3), arrowprops=arrowprops, xytext=(0.025, 3.75), alpha = ALPHA/5)\n    ax.annotate(\"WHEN YOU START USING\\n UNSUPPORTED SYNTAX\", xy=(0.6, 3.7), arrowprops=arrowprops, xytext=(0.30, 4), alpha = ALPHA/5)\n    ax.annotate(\"WHEN YOU DISCOVER\\n    PANDOCFILTERS\", xy=(0.61, 7.5), arrowprops=arrowprops, xytext=(0.375, 6.25), alpha = ALPHA/5)\n    ax.annotate(\"WHEN YOU REALIZE YOU \\nHAVE TO LEARN HASKELL\", xy=(0.8, 8), arrowprops=arrowprops, xytext=(0.45, 8.5), alpha=ALPHA/5)\n\n    ax.get_xaxis().set_ticks([])\n    ax.get_yaxis().set_ticks([])\n\n    ax.set_xlabel(\"DOCUMENT COMPLEXITY\")\n    ax.xaxis.set_label_position('top')\n    ax.set_ylabel(\"IMPLEMENTATION DIFFICULTY\")\n\n    plt.savefig(\"./images/learningcurve.png\") #| hide_line\n\nNone #| hide_line\n```\n:::\n\n\n![](./images/learningcurve.png)\n\nI hope this brief exploration into Quarto's and Pandoc's capabilities has been insightful.\nLet me know if you have any questions in the comments below.\n\n<details>\n<summary>Version</summary>\n\n::: {#4544821e .cell execution_count=3}\n``` {.python .cell-code}\nimport matplotlib\nimport sys\nimport numpy as np\n\nprint(\"Matplotlib version:\", matplotlib.__version__)\nprint(\"NumPy version:\", np.__version__)\nprint(\"Python version:\", sys.version)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMatplotlib version: 3.8.1\nNumPy version: 1.26.0\nPython version: 3.10.12 | packaged by conda-forge | (main, Jun 23 2023, 22:41:52) [Clang 15.0.7 ]\n```\n:::\n:::\n\n\n</details>\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}